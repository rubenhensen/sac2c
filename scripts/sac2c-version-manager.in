#!@Python3_EXECUTABLE@

# This scripts makes it possible to manage multiple installations
# of sac2c on the system.  The scripts provide the following
# functionality:
#
#       * list available versions under the given prefix
#       * switch to the selected version
#       * delete selected versions
#       * show current version of sac2c
#       * install symlinks for arbitrary version of sac2c
#         (useful only in build system)!
#
# See help outputs of individual commands to learn about arguments.

import os
import re
import sys
import glob
import fnmatch
import platform
import argparse

# TODO(artem) abstract common version operations into a class

## GLOBAL ATTRIBUTES ##
__version__ = "0.4"

## GLOBAL VARIABLES ##

# shared library extension of SAC libraries and the prelude
SHARED_LIB_EXT = "@CMAKE_SHARED_LIBRARY_SUFFIX@"

# a list of binaries provided by one build type
SAC2C_BINARIES = [
        ("csima", ),
        ("csimt", ),
        ("sac2c", ),
        ("sac2tex", ),
        ("sac4c", ),
        ("saccc", ),
]

# a map of build-type to postfix
SAC2C_BUILD_TYPE_POSTFIXES = @BUILD_TYPE_POSTFIX_DICT@

# a map of build-type to directory name scheme
SAC2C_BUILD_TYPE_DIRS = @BUILD_TYPE_DIRECTORY_DICT@

# default install prefix
SAC2C_DEFAULT_INSTALL_PREFIX = '@CMAKE_INSTALL_PREFIX@'

## FUNCTIONS ##

def die (msg):
    print(msg, file=sys.stderr)
    sys.exit (-1)

def error (msg):
    die ("error: %s" % msg)

def warning (msg):
    print("warning: %s" %msg, file=sys.stderr)

def info (msg):
    print("info: %s" % msg)

def find_files_rec (d, pattern):
    l = []
    for root, dirnames, filenames in os.walk (d):
        for filename in fnmatch.filter (filenames, pattern):
            l.append (os.path.join(root, filename))
    return l

def dir_isempty (d):
    for root, dirs, files in os.walk (d):
        for name in files:
            return False
    return True


def rmdir_rec (d):
    "Remove directories recursively"
    # XXX(artem) it can be done easier by using shutil module, but this might be not
    #            available on standard python installations
    for root, dirs, files in os.walk (d, topdown=False):
        for name in files:
            os.remove (os.path.join (root, name))
        for name in dirs:
            os.rmdir (os.path.join (root, name))
    os.rmdir (d)

def max_version (lst):
    "Filter the latest (lexicographically) sac version"
    def vertotup (v):
        # Assumption is that v == "<num>(.num)*-<tag-name>(-<commits>)?-g<hash>"
        t = v.split ('-')
        assert re.match (r"^([0-9]+)(\.[0-9]+)*$", t[0])
        assert re.match (r"^g[0-9a-f]+$", t[-1])

        l = list (map (int, t[0].split ('.')))

        if len (t) > 2 and re.match (r"^[0-9]+$", t[-2]):
            l.append (int (t[-2]))

        return l

    # Find maximum version amongst the list of version tuples
    v = max (lst, key=lambda x: vertotup (x[0]))

    # Return all the buildtypes of the given version
    return [x for x in lst if x[0] == v[0]]

def recent_version (prefix, lst):
    "Find the most recently installed version"
    p = [(os.path.join (prefix, "libexec", "sac2c", x[0], "sac2c" + SAC2C_BUILD_TYPE_POSTFIXES[x[1]]), x)
         for x in lst]
    v = max (p, key=lambda x: os.path.getctime (x[0]))
    return v[1]



def list_of_files (prefix, ver, build_type):
    assert build_type in SAC2C_BUILD_TYPE_POSTFIXES

    bt_postfix = SAC2C_BUILD_TYPE_POSTFIXES[build_type]

    l = []
    # $prefix/lib/sac2c/$version/lib/*-$bt.$SHARED_LIB_EXT
    l.extend (find_files_rec (os.path.join (prefix, "lib", "sac2c", ver),
                              "*%s%s" % (bt_postfix, SHARED_LIB_EXT)))

    # $prefix/lib/sac2c/$version/lib/*-${bt}Mod$SHARED_LIB_EXT
    l.extend (find_files_rec (os.path.join (prefix, "lib", "sac2c", ver),
                              "*%sMod%s" % (bt_postfix, SHARED_LIB_EXT)))

    # $prefix/libexec/sac2c/$version/{libsacprelude${bt}*Tree.so}
    l.extend (find_files_rec (os.path.join (prefix, "libexec", "sac2c", ver),
                              "libsacprelude*%sTree%s" % (bt_postfix, SHARED_LIB_EXT)))

    # $prefix/libexec/sac2c/$version/{librterror${bt}*Tree.so}
    l.extend (find_files_rec (os.path.join (prefix, "libexec", "sac2c", ver),
                              "librterror*%sTree%s" % (bt_postfix, SHARED_LIB_EXT)))

    # $prefix/libexec/sac2c/$version/{sac2c$bt, sac4c$bt, ...}
    for b in SAC2C_BINARIES:
        l.append (os.path.join (prefix, "libexec", "sac2c", ver, os.path.join (*b) + bt_postfix))

    # $prefix/libexec/sac2c/$version/libsac2c${bt}.so
    l.append (os.path.join (prefix, "libexec", "sac2c", ver, "libsac2c%s%s" % (bt_postfix, SHARED_LIB_EXT)))

    # $prefix/share/sac2c/$version/sac2crc$bt
    l.append (os.path.join (prefix, "share", "sac2c", ver, "sac2crc" + bt_postfix))

    # $prefix/include/sac2c/$version/$build_type/*
    l.extend (find_files_rec (os.path.join (prefix, "include", "sac2c", ver, SAC2C_BUILD_TYPE_DIRS[build_type]), "*"))

    # This is internal sanity check
    lbad = []
    for f in l:
        if not os.path.isfile (f):
            lbad.append (f)

    if lbad != []:
        die ("""\
internal error:
    The `list_of_files' function returned inconsistent list of files,
    the following files don't exist:
\t%s

    Please fix the function in %s""" % ("\n\t".join (lbad), __file__))

    return l

def remove_version (prefix, ver_tuple):
    version, build_type = ver_tuple

    # Remove files generated by the LIST_OF_FILES
    for f in  list_of_files (prefix, version, build_type):
        os.remove (f)

    # Check whether there exists another build type in the given version
    # and if there isn't one, remove the directory structure of this
    # sac2c version.
    if glob_versions (prefix, version) == []:
        dirs_to_remove = [
            os.path.join (prefix, "include", "sac2c", version),
            os.path.join (prefix, "lib", "sac2c", version),
            os.path.join (prefix, "libexec", "sac2c", version),
            os.path.join (prefix, "share", "sac2c", version),
        ]

        for d in dirs_to_remove:
            if not dir_isempty (d):
                warning ("directory structure of sac2c version `%s' is not removed "
                         "as directory `%s' is not empty" % (version, d))
                exit (0)

        print ("removing directory structure for sac2c version `%s'" % version)
        for d in dirs_to_remove:
            rmdir_rec (d)

def verify_dirs_under_prefix (prefix):
    "Make sure that directory structure under prefix is sound"
    expected_dir = ['include', 'bin', 'libexec', 'share', 'lib']
    prefix_dirs = os.listdir (prefix)
    for d in expected_dir:
        if d not in prefix_dirs:
            error ("cannot find `%s' under `%s' --- is the prefix set correctly?" \
                    % (d, prefix))

def print_available_versions (prefix):
    "List available versions based on listing the content of libexec"
    versions = glob_versions (prefix, "*")
    if versions == []:
        print ("No sac2c versions are installed.")
        exit (0)

    print ("sac2c versions available:")
    for v, bt in versions:
        print ("\t%s [build-type = %s]" % (v, bt))

def dry_run_delete (prefix, versions):
    "List files that will be removed"
    print ("files to be removed:")
    l = len (versions)
    for idx, (v, bt) in enumerate (versions):
        for f in list_of_files (prefix, v, bt):
            print ("--remove `%s'" % f)
        if idx != l - 1:
            print ()

def glob_versions (prefix, glob_expr, build_type=None):
    "Expand the list of versions that matches the argument passed to the script"
    glob_prefix = os.path.join (prefix, "libexec", "sac2c")
    glob_versions = glob.glob (os.path.join (glob_prefix, glob_expr))

    ver_dirs = [os.path.split (x)[1] for x in glob_versions]
    if ver_dirs == [] or ver_dirs == [""]:
        error ("none of the sac2c versions matching `%s' were found" % glob_expr)

    binary_to_build_types = None

    # Create a filter of build_types that we will look for in the given
    # version.  If the `build_type' argument is None then we consider
    # all the build_types.
    if build_type is None:
        binary_to_build_types = {}
        for x in SAC2C_BUILD_TYPE_POSTFIXES:
            binary_to_build_types["sac2c" + SAC2C_BUILD_TYPE_POSTFIXES[x]] = x
    else:
        binary_to_build_types = {"sac2c" + SAC2C_BUILD_TYPE_POSTFIXES[build_type] : build_type}

    assert binary_to_build_types is not None

    versions = []
    for v in ver_dirs:
        for b in binary_to_build_types:
            if os.path.isfile (os.path.join (glob_prefix, v, b)):
                versions.append ((v, binary_to_build_types[b]))

    return versions

def confirm_removal (text):
    "Ask a user if he/she really wants to delete those files"
    sys.stdout.write ("%s [Y/N] " % text)
    choice = input ().lower ()
    return choice in ["y", "ye", "yes", "aye", "i don't give shit"]


def delete_versions (prefix, glob_expr, dryrun, build_type):
    "Expand versions to be deleted and delete them after confirmation"
    versions = glob_versions (prefix, glob_expr, build_type)

    if versions == []:
        warning ("there are no sac2c versions to remove")
        exit (0)

    if (dryrun):
        dry_run_delete (prefix, versions)
        exit (0)

    if confirm_removal ("delete %r sac2c versions in %s?" % (versions, prefix)):
        for v in versions:
            remove_version (prefix, v)
    else:
        print ("Nothing removed")

def binary_to_version (sac2c_binary):
    binary_to_build_types = {}
    for x in SAC2C_BUILD_TYPE_POSTFIXES:
        binary_to_build_types["sac2c" + SAC2C_BUILD_TYPE_POSTFIXES[x]] = x
    if not sac2c_binary in binary_to_build_types:
        error ("undefined build type `%s' of sac2c found" % sac2c_binary)

    return binary_to_build_types[sac2c_binary]


def current_version (prefix):
    "Find out which version of sac2c is currently chosen"

    if not os.path.isfile (os.path.join (prefix, "bin", "sac2c")):
        error ("sac2c is not set to any version")

    sac2c_real_binaries = [
            "sac2c" + SAC2C_BUILD_TYPE_POSTFIXES[x]
            for x in SAC2C_BUILD_TYPE_POSTFIXES
    ]

    sac2c_symlink = os.path.join (prefix, "bin", "sac2c")
    if not os.path.islink (sac2c_symlink):
        error ("broken sac2c installation: `%s' should be a symbolic link.\n"
               "please remove files manually or run switch command of this"
               "script" % sac2c_symlink)

    # resolve symlink
    sac2c_path = os.path.realpath (sac2c_symlink)
    d, sac2c_binary = os.path.split (sac2c_path)
    if sac2c_binary not in sac2c_real_binaries:
        error ("the sac2c symlink should point to one of {%s}; either\n"
                 "sac2c installation is broken, or you need to update this script!"
                 %",".join (sac2c_real_binaries))

    print ("""Current sac2c symlink points to:
VERSION    = `%s'
BUILD_TYPE = `%s'""" % (os.path.split (d)[1], binary_to_version (sac2c_binary)))


def create_link (link_src, link_name):
    "create a link after checking that the links doesn't already exist or refer to a file"

    if os.path.islink (link_name):
        os.unlink (link_name)
    elif os.path.isfile (link_name):
        if confirm_removal ("`%s' is a file, not a symlink; delete it?" % link_name):
            os.remove (link_name)
        else:
            info ("exiting")
            sys.exit (0)

    os.symlink (link_src, link_name)

def do_install (version, sac2c_postfix, prefix, install):
    "create symbolic links for assumed files and place these in specified directory"

    # we assume prefix is correct but make sure that install actually exists
    if not os.path.isdir (install):
        os.makedirs (install)

    # create symlinks for both postfixes and standard binaries
    for p in SAC2C_BINARIES:
        pp = [x for x in p]
        pp[-1] += sac2c_postfix
        link_name = os.path.join (install, *p)
        link_name_postfix = os.path.join (install, *pp)
        link_src = os.path.join (prefix, "libexec", "sac2c", version, *pp)

        # install links to postfixed binaries
        create_link (link_src, link_name_postfix)

        # install links to without postfix to binaries
        create_link (link_src, link_name)


def switch_version (prefix, version, sac2c_postfix):
    "create symbolic links for the relevant files"

    bin_dir = os.path.join (prefix, "bin")
    do_install (version, sac2c_postfix, prefix, bin_dir)


def handle_remove (argv):
    parser = argparse.ArgumentParser (description='Remove sac2c versions')
    parser.add_argument ("-p", "--prefix", dest="prefix", default=SAC2C_DEFAULT_INSTALL_PREFIX,
                       help="installation prefix of sac2c versions (default: `%s\')"
                       % SAC2C_DEFAULT_INSTALL_PREFIX)
    parser.add_argument ("-v", "--sac2c-version", dest="sac2c_version", required=True,
                       help="version(s) of sac2c to uninstall (regexps accepted)")
    parser.add_argument ("-d", "--dry-run", dest="dryrun", action="store_true",
                       help="list the files that will be uninstalled")
    parser.add_argument ("-b", "--build-type", dest="build_type",
            help="build type {%s} of sac2c to remove (ALL by default)"
                 % ",".join (list (SAC2C_BUILD_TYPE_POSTFIXES.keys())))

    args = parser.parse_args (argv)

    # Expand home/user in the prefix
    prefix = os.path.expanduser (args.prefix)

    # Make sure that the directory structure is sane
    verify_dirs_under_prefix (prefix)

    try:
        delete_versions (prefix, args.sac2c_version, args.dryrun, args.build_type)
    except OSError as e:
        if e.errno == 13: # permission denied
            error ("you need root permission!")
        else:
            error (e.strerro)

def handle_list_versions (argv):
    parser = argparse.ArgumentParser (description="List installed sac2c versions")
    parser.add_argument ("-p", "--prefix", dest="prefix", default=SAC2C_DEFAULT_INSTALL_PREFIX,
                       help="installation prefix of sac2c versions (default: `%s\')"
                       % SAC2C_DEFAULT_INSTALL_PREFIX)
    args = parser.parse_args (argv)
    prefix = os.path.expanduser (args.prefix)
    print_available_versions (prefix)

def handle_current_version (argv):
    parser = argparse.ArgumentParser (description="List current installed version of sac2c")
    parser.add_argument ("-p", "--prefix", dest="prefix", default=SAC2C_DEFAULT_INSTALL_PREFIX,
                       help="installation prefix of sac2c versions (default: `%s\')"
                       % SAC2C_DEFAULT_INSTALL_PREFIX)
    args = parser.parse_args (argv)
    prefix = os.path.expanduser (args.prefix)
    current_version (prefix)

def handle_switch (argv):
    parser = argparse.ArgumentParser (description="Switch to a different installed version of sac2c")
    parser.add_argument ("-p", "--prefix", dest="prefix", default=SAC2C_DEFAULT_INSTALL_PREFIX,
                       help="installation prefix of sac2c versions (default: `%s\')"
                       % SAC2C_DEFAULT_INSTALL_PREFIX)
    parser.add_argument ("-b", "--build-type", dest="build_type",
                       help="build type {%s} of sac2c to switch to"
                       % ",".join (list (SAC2C_BUILD_TYPE_POSTFIXES.keys())))

    parser.add_argument ("-v", "--sac2c-version", dest="sac2c_version",
                       help="version(s) of sac2c to uninstall (regexps accepted)")
    parser.add_argument ("-l", "--latest-version", dest="latest_version", action="store_true",
                       default=None, help="switch to the latest (ver 1.4 > ver 0.9) version of the sac2c compiler")
    parser.add_argument ("-r", "--recent-install", dest="recent_install", action="store_true",
                       default=None, help="switch to the recently installed version of the sac2c compiler")

    args = parser.parse_args (argv)
    prefix = os.path.expanduser (args.prefix)

    # Verify that only one of sac2c-version, latest-version, or recent-version
    # have been specified.  Otherwise produce an error.
    ver_opt_tuple = (args.latest_version,
                     args.recent_install,
                     args.sac2c_version)

    if len ([x for x in ver_opt_tuple if x is not None]) > 1:
        error ("only one of `--latest-version', `--recent-version', or '--sac2c-version' "
               "can be specified")

    if len ([x for x in ver_opt_tuple if x is not None]) == 0:
        error ("which sac2c version under `%s' should be used?"
               % prefix)

    if args.sac2c_version is not None:
        versions = glob_versions (prefix, args.sac2c_version)
        if versions == []:
            error ("sac2c version `%s' does not exist" % args.sac2c_version)
    elif args.recent_install:
        versions = glob_versions (prefix, "*")
        if versions == []:
            error ("no installations of sac2c under prefix `%s' found" % prefix)
        versions = [recent_version (prefix, versions)]
    elif args.latest_version:
        versions = glob_versions (prefix, "*")
        versions = max_version (versions)
        if versions == []:
            error ("no installations of sac2c under prefix `%s' found" % prefix)
    else:
        die ("internal-error: option resolution failed --- "
             "cannot figure out which sac2c option to use")

    build_type = None
    if args.build_type is None:
        if versions is None:
            error ("unable to determine build type, please specify `--build-type'")
        elif len (versions) > 1:
            error ("there are multiple build types for version `%s', please "
                   "set which one you want to use" % args.sac2c_version)
        else:
            build_type = versions[0][1]
    elif args.build_type not in SAC2C_BUILD_TYPE_POSTFIXES:
        error ("invalid build type `%s'" % args.build_type)
    else:
        build_type = args.build_type

    assert build_type is not None

    try:
        info ("switching sac2c to version `%s' (buildtype: `%s')" % (versions[0], build_type))
        switch_version (prefix, versions[0][0], SAC2C_BUILD_TYPE_POSTFIXES[build_type])
    except OSError as e:
        if e.errno == 13: # permission denied
            error ("you need root permission!")
        else:
            error (e.strerror)

def handle_install (argv):
    parser = argparse.ArgumentParser(description='This command is similar to the `switch\' command, '
            'except that is does not expect SAC to be actually present on the filesystem (specifically '
            'where `--prefix\' points to). If you are dealing with a previously installed version of '
            'SAC, use the `switch\' command instead! This command is useful when creating symlinks for '
            'packages, or other contexts where the actual install location of SAC does not exist. If not '
            'used with care, this command can overwrite existing symlinks and cause damage to your '
            'system.')
    parser.add_argument ('--postfix', action='store_true',
                       help='indicate instead the BTYPE is a postfix value, and not a build type')
    parser.add_argument ('version', metavar='VERSION', help='intended sac2c version to create links for')
    parser.add_argument ('buildtype', metavar='BTYPE', help='the build type of the sac2c installation (one of {%s})'
                        % ",".join (list (SAC2C_BUILD_TYPE_POSTFIXES.keys())))
    parser.add_argument ('prefix', metavar='PREFIX', help='intended install location of sac2c')
    parser.add_argument ('install', metavar='INSTALL', help='directory to place the symlinks')

    args = parser.parse_args (argv)
    prefix = os.path.expanduser (args.prefix)
    prefix = os.path.normpath (prefix) # so that we get clean paths
    install = os.path.expanduser (args.install)
    install = os.path.normpath (install) # so that we get clean paths

    if args.postfix:
        postfix = args.buildtype
    else:
        postfix = SAC2C_BUILD_TYPE_POSTFIXES.get(args.buildtype, None)
        if not postfix:
            error ("invalid build type `%s'" % args.buildtype)

    try:
        info ("installing sac2c version `%s' (buildtype: `%s')" % (args.version, args.buildtype))
        do_install (args.version, postfix, prefix, install)
    except OSError as e:
        if e.errno == 13: # permission denied
            error ("you need root permission!")
        else:
            error (e.strerror)

if __name__ == "__main__":
    commands = {'remove': handle_remove,
                'list-versions': handle_list_versions,
                'switch': handle_switch,
                'current-version': handle_current_version,
                'install': handle_install}

    parser = argparse.ArgumentParser (
        description='This is the sac2c version manager - it handles creating symbolic links to various\n'
                    'installed versions of the sac2c binaries. It is STRONGLY advised to not use this\n'
                    'script with sac2c installs done through a package manager - unintended consequences\n'
                    'could occur from this.',
        usage='%(prog)s COMMAND [ARGS]',
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument ('command', metavar='COMMAND', help='The following commands '
            'are supported:\n {%s}\n\n'
            'Use `--help\' to show usage information for each command.' % ', '.join(list (commands.keys())))
    parser.add_argument ('-v', '--version', action='version', version=__version__)

    args = parser.parse_args (sys.argv[1:2])
    if args.command in commands:
        commands[args.command] (sys.argv[2:])
    else:
        print ('Unrecognised command...')
        parser.print_help()
        exit (1)
