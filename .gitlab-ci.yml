# This is the CI/build config for the GitLab-CI system for building/testing
# the SaC compiler

# The first half of this file defines a series of templates for the primary
# pipeline stages:
stages:
    - build   # the omnibus (debug + release versions) of the compiler
    - test    # run unit-tests
    - stdlib  # build the stdlib

# The templates are generic enough that they are applicable on *all* build
# OSs (it is assumed that various tools and commands are the same across
# the board - if this is not the case things may need to be changed).

# VARIABLES
#
#  - STDLIB_URL:   the git-pull URL for the repo, defaults to `sacbase/StdLib'
#  - SAC2CP_EXEC:  location of product version of sac2c - for building stdlib
#  - SAC2CD_EXEC:  location of debug version of sac2c - for building stdlib
#
#  GitLab-CI variables:
#
#  - GIT_STRATEGY: specify whether we want to pull, fetch, or not get the repo
#                  at all. Refers to the repo to which the CI is attached.
#

# here we define specific templates for various actions:

.build-template: &build-template
    stage: build
    # here we define the commands to run
    script:
        - mkdir -p $HOME/.sac2crc
        - mkdir build && cd build
        - cmake -DBUILD_OPTIONS="-DFUNCTESTS=ON" ../cmake/cpack;
        - make -j2 2>&1 | tee build.log
        - if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "!!! ERROR detected in build !!!";
            exit 1;
          fi
        - ../ci/fail-on-warning.sh build.log
        # we need to store the .sac2crc file for sac2c to find prelude
        - mv $HOME/.sac2crc $PWD
    # ensure we capture the build blob
    artifacts:
        expire_in: 24 hrs
        untracked: true
    only:
        - merge_requests
        - web

.test-template: &test-template
    stage: test
    script:
        - cp -r build/.sac2crc $HOME
        - cd build
        - make fulltest
        - ctest -j2 --output-on-failure
    artifacts:
        expire_in: 24 hrs
        untracked: true
    only:
        - merge_requests
        - web

.build-stdlib-template: &build-stdlib-template
    stage: stdlib
    variables:
        SAC2CP_EXEC: "${CI_PROJECT_DIR}/build/sac2c-release/src/sac2c-release-build/sac2c_p"
        SAC2CD_EXEC: "${CI_PROJECT_DIR}/build/sac2c-debug/src/sac2c-debug-build/sac2c_d"
    script:
        - cp -r build/.sac2crc $HOME
        # get latest release of stdlib
        # XXX would be nice if we could use `--single-branch`, as it would
        # save on bandwidth + time. But some OSs don't have > git 1.7 (?!)
        - if [ -z ${STDLIB_URL} ]; then
            git clone --recursive https://github.com/SacBase/Stdlib.git stdlib;
            echo "Clone from SacBase/Stdlib master HEAD";
          else
            git clone --recursive ${STDLIB_URL} stdlib;
            echo "Clone from ${STDLIB_URL}";
          fi
        - cd stdlib
        - mkdir stdlib-build && cd stdlib-build
        - cmake -DSAC2C_EXEC=${SAC2CP_EXEC} ..
        - make -j2 2>&1 | tee build.log
        - if [ ${PIPESTATUS[0]} -ne 0 ]; then
            echo "!!! ERROR detected in build !!!";
            exit 1;
          fi
        - ../../ci/fail-on-warning.sh build.log
        # capture new sac2crcs
        - mv -f $HOME/.sac2crc ${CI_PROJECT_DIR}/build/.sac2crc
    # ensure we capture the build blob
    artifacts:
        expire_in: 24 hrs
        untracked: true
        paths:
            - stdlib/
    only:
        - merge_requests
        - web

# Here we define the actual jobs - we must specify each build OS separately as GitLab-CI
# does not support launch a job on all OSs as such.

### ARCHLINUX ###

build-archlinux:
    <<: *build-template
    image: sacbuild/archlinux:1.3.1

test-archlinux:
    <<: *test-template
    image: sacbuild/archlinux:1.3.1
    dependencies:
        - build-archlinux

stdlib-archlinux:
    <<: *build-stdlib-template
    image: sacbuild/archlinux:1.3.1
    dependencies:
        - test-archlinux

### CENTOS 8 ###

build-centos8:
    <<: *build-template
    image: sacbuild/centos8:1.3.1

test-centos8:
    <<: *test-template
    image: sacbuild/centos8:1.3.1
    dependencies:
        - build-centos8

stdlib-centos8:
    <<: *build-stdlib-template
    image: sacbuild/centos8:1.3.1
    dependencies:
        - test-centos8

### CENTOS 7 ###

build-centos7:
    <<: *build-template
    image: sacbuild/centos7:1.3.1

test-centos7:
    <<: *test-template
    image: sacbuild/centos7:1.3.1
    dependencies:
        - build-centos7

stdlib-centos7:
    <<: *build-stdlib-template
    image: sacbuild/centos7:1.3.1
    dependencies:
        - test-centos7

### UBUNTU 18 ###

build-ubuntu18:
    <<: *build-template
    image: sacbuild/ubuntu18:1.3.1

test-ubuntu18:
    <<: *test-template
    image: sacbuild/ubuntu18:1.3.1
    dependencies:
        - build-ubuntu18

stdlib-ubuntu18:
    <<: *build-stdlib-template
    image: sacbuild/ubuntu18:1.3.1
    dependencies:
        - test-ubuntu18

### UBUNTU 16 ###

build-ubuntu16:
    <<: *build-template
    image: sacbuild/ubuntu16:1.3.1

test-ubuntu16:
    <<: *test-template
    image: sacbuild/ubuntu16:1.3.1
    dependencies:
        - build-ubuntu16

stdlib-ubuntu16:
    <<: *build-stdlib-template
    image: sacbuild/ubuntu16:1.3.1
    dependencies:
        - test-ubuntu16

### MacOS Apple Silicon (ARM) ###

build-macosARM:
    <<: *build-template
    # ensure that we build on the correct docker container (there should
    # only be one tag listed below!)
    tags:
        - macosARM

test-macosARM:
    <<: *test-template
    # ensure that we build on the correct docker container (there should
    # only be one tag listed below!)
    tags:
        - macosARM
    dependencies:
        - build-macosARM

stdlib-macosARM:
    <<: *build-stdlib-template
    tags:
        - macosARM
    dependencies:
        - test-macosARM
