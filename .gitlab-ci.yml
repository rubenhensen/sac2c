# This is the CI/build config for the GitLab-CI system for building/testing
# the SaC compiler

# The first half of this file defines a series of templates for the primary
# pipeline stages:
stages:
    - build   # the omnibus (debug + release versions) of the compiler
    - test    # run unit-tests
    - stdlib  # build the stdlib
    - package # package both sac2c and stdlib       - only through schedule
    - release # deploy the packages to sac-home.org - only through schedule

# The templates are generic enough that they are applicable on *all* build
# OSs (it is assumed that various tools and commands are the same across
# the board - if this is not the case things may need to be changed).

# VARIABLES
#
#  - DO_SCHEDULE:  if set, we *ignore* warnings. Is useful for when we want
#                  to do packaging, as for nightly/weekly release we don't
#                  really mind.
#  - CPACK_BUILD:  specifies to CPack what type of package we want to generate
#  - RELEASE_FILE: the Glob for selecting the CPack generate package
#  - STDLIB_URL:   the git-pull URL for the repo, defaults to `sacbase/StdLib'
#  - SAC2CP_EXEC:  location of product version of sac2c - for building stdlib
#  - SAC2CD_EXEC:  location of debug version of sac2c - for building stdlib
#
#  GitLab-CI variables:
#
#  - GIT_STRATEGY: specify whether we want to pull, fetch, or not get the repo
#                  at all. Refers to the repo to which the CI is attached.
#

# TODO (hans) Trigger variables
#  - to build *only* sac2c: BUILD_SAC2C must be set,
#  - to build *only* stdlib: BUILD_STDLIB must be set,
#  - to build all: _set *both* above_
#  - to deploy packages: DO_RELEASE must be set

# here we define specific templates for various actions:

.build-template: &build-template
    stage: build
    # here we define the commands to run
    script:
        - mkdir $HOME/.sac2crc
        - mkdir build && cd build
        - cmake ../cmake/cpack
        - make -j2 2>&1 | tee build.log
        - if [ $(grep -i 'warning' build.log | wc -l) -gt 0 ]; then
            echo "+++ ${WARN_NUM} warnings detected +++";
            grep -i 'warning' build.log;
            if [ -z "${DO_SCHEDULE}" ]; then exit 1; fi;
          fi
        # we need to store the .sac2crc file for sac2c to find prelude
        - mv $HOME/.sac2crc $PWD
    # ensure we capture the build blob
    artifacts:
        expire_in: 12 hrs
        untracked: true
    only:
        # we use the trigger mechanism as this is currently the only
        # feasible way of actually having stuff build via merge-requests.
        - triggers
        - schedules
        - web
        - tags

.test-template: &test-template
    stage: test
    script:
        - cp -r build/.sac2crc $HOME
        - cd build
        - make fulltest
    artifacts:
        expire_in: 12 hrs
        untracked: true
    only:
        # we use the trigger mechanism as this is currently the only
        # feasible way of actually having stuff build via merge-requests.
        - triggers
        - schedules
        - web
        - tags

.build-stdlib-template: &build-stdlib-template
    stage: stdlib
    variables:
        SAC2CP_EXEC: "${CI_PROJECT_DIR}/build/sac2c-release/src/sac2c-release-build/sac2c_p"
        SAC2CD_EXEC: "${CI_PROJECT_DIR}/build/sac2c-debug/src/sac2c-debug-build/sac2c_d"
    script:
        - cp -r build/.sac2crc $HOME
        # get latest release of stdlib
        # XXX would be nice if we could use `--single-branch`, as it would
        # save on bandwidth + time. But some OSs don't have > git 1.7 (?!)
        - if [ -z ${STDLIB_URL} ]; then
            git clone https://github.com/SacBase/Stdlib.git stdlib;
            echo "Clone from SacBase/Stdlib master HEAD";
          else
            git clone ${STDLIB_URL} stdlib;
            echo "Clone from ${STDLIB_URL}";
          fi
        - cd stdlib
        - git submodule init
        - git submodule update
        - cd ..
        - mkdir stdlib-build && cd stdlib-build
        - cmake -DSAC2C_EXEC=${SAC2CP_EXEC} ../stdlib
        - make -j2 2>&1 | tee build.log
        - if [ $(grep -i 'warning' build.log | wc -l) -gt 0 ]; then
            echo "+++ ${WARN_NUM} warnings detected +++";
            grep -i 'warning' build.log;
            if [ -z "${DO_SCHEDULE}" ]; then exit 1; fi;
          fi
        # capture new sac2crcs
        - mv -f $HOME/.sac2crc ${CI_PROJECT_DIR}/build/.sac2crc
    # ensure we capture the build blob
    artifacts:
        expire_in: 12 hrs
        untracked: true
        paths:
            - stdlib/
    only:
        # we use the trigger mechanism as this is currently the only
        # feasible way of actually having stuff build via merge-requests.
        - triggers
        - schedules
        - web
        - tags

.package-template: &package-template
    stage: package
    script:
        - cp -r build/.sac2crc $HOME
        - cd build
        - cpack -G ${CPACK_BUILD}
        - cd ../stdlib-build
        - cpack -G ${CPACK_BUILD}
    artifacts:
        expire_in: 4 hrs
        paths:
            - build/${RELEASE_FILE}
            - stdlib-build/${RELEASE_FILE}
    only:
        - schedules
        - tags

.weekly-release-template: &weekly-release-template
    stage: release
    script:
        # skip if we don't want to ship the release
        - if [ ! -d ${HOME}/.ssh ]; then mkdir ${HOME}/.ssh; fi
        - chmod 700 ${HOME}/.ssh
        - echo "${SSH_RELEASE_KEY}" > $HOME/.ssh/release
        - chmod 600 ${HOME}/.ssh/release
        - if [ ! -d build ] || [ ! -d stdlib-build ]; then echo "Unable to find artifacts"; exit 1; fi
        - scp -p -i ${HOME}/.ssh/release -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no
          build/${RELEASE_FILE} stdlib-build/${RELEASE_FILE} ${RELEASE_URL}:${RELEASE_TOPDIR}/${INNER_PATH}
        - echo "Release has been sent, have a look at the sac-home.org download page :)"
    only:
        - schedules
        - tags

# Here we define the actual jobs - we must specify each build OS separately as GitLab-CI
# does not support launch a job on all OSs as such.

### ARCHLINUX ###

build-archlinux:
    <<: *build-template
    # ensure that we build on the correct docker container (there should
    # only be one tag listed below!)
    tags:
        - archlinux

test-archlinux:
    <<: *test-template
    # ensure that we build on the correct docker container (there should
    # only be one tag listed below!)
    tags:
        - archlinux
    dependencies:
        - build-archlinux

stdlib-archlinux:
    <<: *build-stdlib-template
    tags:
        - archlinux
    dependencies:
        - test-archlinux

package-archlinux:
    variables:
        CPACK_BUILD: "TGZ"
        RELEASE_FILE: "*.tar.gz"
    <<: *package-template
    tags:
        - archlinux
    dependencies:
        - stdlib-archlinux

release-weekly-archlinux:
    variables:
        INNER_PATH: "TGZ-weekly/Linux"
        RELEASE_FILE: "*.tar.gz"
        GIT_STRATEGY: none
    <<: *weekly-release-template
    tags:
        - archlinux
    dependencies:
        - package-archlinux

### CENTOS 7 ###

build-centos7:
    <<: *build-template
    tags:
        - centos7

test-centos7:
    <<: *test-template
    tags:
        - centos7
    dependencies:
        - build-centos7

stdlib-centos7:
    <<: *build-stdlib-template
    tags:
        - centos7
    dependencies:
        - test-centos7

package-centos7:
    variables:
        CPACK_BUILD: "RPM"
        RELEASE_FILE: "*.rpm"
    <<: *package-template
    tags:
        - centos7
    dependencies:
        - stdlib-centos7

release-weekly-centos7:
    variables:
        INNER_PATH: "RPM-weekly/RHEL7"
        RELEASE_FILE: "*.rpm"
        GIT_STRATEGY: none
    <<: *weekly-release-template
    tags:
        - centos7
    dependencies:
        - package-centos7

### CENTOS 6 ###

build-centos6:
    <<: *build-template
    tags:
        - centos6

test-centos6:
    <<: *test-template
    tags:
        - centos6
    dependencies:
        - build-centos6

stdlib-centos6:
    <<: *build-stdlib-template
    tags:
        - centos6
    dependencies:
        - test-centos6

package-centos6:
    variables:
        CPACK_BUILD: "RPM"
        RELEASE_FILE: "*.rpm"
    <<: *package-template
    tags:
        - centos6
    dependencies:
        - stdlib-centos6

release-weekly-centos6:
    variables:
        INNER_PATH: "RPM-weekly/RHEL6"
        RELEASE_FILE: "*.rpm"
        GIT_STRATEGY: none
    <<: *weekly-release-template
    tags:
        - centos6
    dependencies:
        - package-centos6

### UBUNTU 16 ###

build-ubuntu16:
    <<: *build-template
    tags:
        - ubuntu16

test-ubuntu16:
    <<: *test-template
    tags:
        - ubuntu16
    dependencies:
        - build-ubuntu16

stdlib-ubuntu16:
    <<: *build-stdlib-template
    tags:
        - ubuntu16
    dependencies:
        - test-ubuntu16

package-ubuntu16:
    variables:
        CPACK_BUILD: "DEB"
        RELEASE_FILE: "*.deb"
    <<: *package-template
    tags:
        - ubuntu16
    dependencies:
        - stdlib-ubuntu16

release-weekly-ubuntu16:
    variables:
        INNER_PATH: "DEB-weekly/Ubl16"
        RELEASE_FILE: "*.deb"
        GIT_STRATEGY: none
    <<: *weekly-release-template
    tags:
        - ubuntu16
    dependencies:
        - package-ubuntu16

### UBUNTU 14 ###

build-ubuntu14:
    <<: *build-template
    tags:
        - ubuntu14

test-ubuntu14:
    <<: *test-template
    tags:
        - ubuntu14
    dependencies:
        - build-ubuntu14

stdlib-ubuntu14:
    <<: *build-stdlib-template
    tags:
        - ubuntu14
    dependencies:
        - test-ubuntu14

package-ubuntu14:
    variables:
        CPACK_BUILD: "DEB"
        RELEASE_FILE: "*.deb"
    <<: *package-template
    tags:
        - ubuntu14
    dependencies:
        - stdlib-ubuntu14

release-weekly-ubuntu14:
    variables:
        INNER_PATH: "DEB-weekly/Ubl14"
        RELEASE_FILE: "*.deb"
        GIT_STRATEGY: none
    <<: *weekly-release-template
    tags:
        - ubuntu14
    dependencies:
        - package-ubuntu14
