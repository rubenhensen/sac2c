# FIXME (hans)
# we need to be super carefully to have actually build the compiler/libs *before*
# we call ctest/`make test` as seemingly there is no implicit dependency between
# the two stages. It is completely possible for ctest to be called after configure
# and exit cleanly (missing tests do not cause an error!).
# Issue is dealt with and reported here: https://stackoverflow.com/q/733475 and
# https://gitlab.kitware.com/cmake/cmake/issues/8774.

#  Add some boilerplate GTest definitions.
INCLUDE_DIRECTORIES (${GTEST_INCLUDE_DIR})

# As we are going to interface libsac2c.so, we want to define all the
# include paths, to avoid writing function declarations manually.
FILE (GLOB_RECURSE headers ${PROJECT_SOURCE_DIR}/src/libsac2c/*.h)
SET (dirlist "")
FOREACH (hpath ${headers})
   GET_FILENAME_COMPONENT (hdir ${hpath} PATH)
   LIST (APPEND dirlist ${hdir})
ENDFOREACH ()
LIST (REMOVE_DUPLICATES dirlist)

# All the src/libsac2c subdirs that contain *.h
INCLUDE_DIRECTORIES (${dirlist})

# All the generated files
INCLUDE_DIRECTORIES (${PROJECT_BINARY_DIR}/src/libsac2c)

# Generated global files like config, fun-attrs, etc.
INCLUDE_DIRECTORIES (${PROJECT_BINARY_DIR}/src/include)

# All paths as found via sac2c/config.cmake for sac2crc
INCLUDE_DIRECTORIES (${SAC2CRC_INCS})

# Generated dummy runtime library,includes dummy functions to satisfy linker
ADD_LIBRARY (runtimedummy STATIC "runtime_dummy.c")

# Some general variables
SET (SAC2C_TESTS_PATH "${PROJECT_SOURCE_DIR}/src/tests")

MACRO (ADD_FUNC_TEST BIN_NAME SRC_NAME)
    # Compile the test
    ADD_EXECUTABLE (${BIN_NAME} ${SRC_NAME})
    ADD_DEPENDENCIES (${BIN_NAME} sac2cShared)
    # Link against Gtest
    TARGET_LINK_LIBRARIES (${BIN_NAME} GTest::GTest GTest::Main sac2cShared)
    # Make it a part of the global testsuite so that it is executed via ctests.
    GTEST_ADD_TESTS (${BIN_NAME} "" AUTO)
ENDMACRO ()

MACRO (ADD_RUNTIME_FUNC_TEST BIN_NAME SRC_NAME LIB_TARGET EXTRA_LINKS)
    # Compile the test
    ADD_EXECUTABLE (${BIN_NAME} ${SRC_NAME})
    ADD_DEPENDENCIES (${BIN_NAME} libsac-${LIB_TARGET})
    # we get properties from the utility target that we pass to the binary properties
    GET_TARGET_PROPERTY (__libpath libsac-${LIB_TARGET} OUTPUT_NAME)
    GET_TARGET_PROPERTY (__rpath libsac-${LIB_TARGET} BUILD_RPATH)
    # pass information to the binary (additionally we also pass RPATH information explicitly,
    # this is needed in order to run the test binary
    SET_TARGET_PROPERTIES (${BIN_NAME}
        PROPERTIES
        COMPILE_DEFINITIONS "CMAKE_TESTS_PATH=\"${SAC2C_TESTS_PATH}\""
        BUILD_RPATH "${__rpath}")
    # Link against Gtest and SaC runtime library (we need to link manually as the ExternalProject does not encode this information)
    # we also link a dummy library to define functions which are expected (normally generated by sac2c)
    TARGET_LINK_LIBRARIES (${BIN_NAME} GTest::GTest GTest::Main "${__libpath}" runtimedummy ${EXTRA_LINKS})
    # Make it a part of the global testsuite so that it is executed via ctests.
    GTEST_ADD_TESTS (${BIN_NAME} "" AUTO)
ENDMACRO ()

# libsac2c tests
ADD_FUNC_TEST (string-tests string-tests.cpp)
ADD_FUNC_TEST (test-assoc-law test-assoc-law.cpp)
ADD_FUNC_TEST (test-icm-compilation test-icm-compilation.cpp)

# libsac + runtime tests
# XXX (hans) we can only create one test suite, *not* per-target, due to name-clashes
IF (${ENABLE_HWLOC})
    ADD_RUNTIME_FUNC_TEST (test-hwloc-runtime test-hwloc-runtime.cpp "seq" "hwloc")
ENDIF ()
