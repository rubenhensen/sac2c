#! @BASH@

basename=`basename "$0"`
die() {
    echo "$basename:" "$@" >&2
    exit 1
}

if test $# -lt 3; then
   echo "usage: $0 <sac2c> <prog|mod|rmod> <target> ..." >&2; exit 1
fi

sac2c=${1:?}
kind=${2:?}
target=${3:?}
shift 3

if ! test -x "$sac2c"; then
    die "$sac2c is not found or not executable"
fi

cmdline=
firstfile=
prev_arg=
outfile=
mode=ld
asm=
preproc=
tmparg=
for arg in "$@"; do
  # if the previous option needs an argument, assign it
  if test -n "$prev_arg"; then
     eval "$prev_arg=\$arg"
     prev_arg=
     continue
  fi
  if test -n "$followaction"; then
     act=$followaction
     followaction=
     case $act in
        ccarg)
            # when handling a C argument, we need check if the flag has an argument
            # such as in the case of `-MF` which expects some filename or of `--param`
            # which expects some name and value pair. If so, we append to the cmdline
            # the flag and its argument as shown in the else-branch. If instead we have
            # some C flag like `-install_name=name.so`, though this flag has an argument,
            # it is not seperate from the flag given the `=`. As such we append it to
            # cmdline as is, see the then-branch.
            if test x"$ccarg" = x; then
                cmdline+=(-Xc "$arg" -Xl "$arg")
            else
                cmdline+=(-Xc "$ccarg" -Xc "$arg" -Xl "$ccarg" -Xl "$arg")
            fi
            continue;;
        ldarg)  cmdline+=(-Xl "$arg"); continue;;
        sacarg) cmdline+=("$arg"); continue;;
     esac
  fi

  case $arg in
      -c) mode=cc ;;
      -S) mode=cc; asm=1 ;;
      -E) mode=cc; preproc=1 ;;
  esac

  case $arg in
      -g*) cmdline+=(-g -Xc "$arg" -Xl "$arg") ;;
      -O[0-3]) cmdline+=($arg -Xc "$arg" -Xl "$arg") ;;
      -o) prev_arg=outfile ;;
      -install_name*)
      if [ "$arg" == "-install_name" ]; then
         followaction=ccarg; ccarg=$arg
      else
         # install_name needs its argument to be seperate (unlike -L), otherwise
         # clang will complain.
         tmparg=${arg#-install_name}
         cmdline+=( -Xc "-install_name" -Xc "$tmparg" -Xl "-install_name" -Xl "$tmparg")
      fi
      ;;
      -save-temps) cmdline+=(-d nocleanup -Xc -save-temps -Xl -save-temps) ;;
      -i*|-MF|-MT|-MQ)    followaction=ccarg; ccarg=$arg ;;
      -W*|-d*|-pedantic*|-ansi|-std*|-S|-E|-I*|-P|-A*|-D*|-U*|-C*|-H|-M*) cmdline+=(-Xc "$arg" -Xl "$arg") ;;
      -L*|-Wl,*|-l*)      cmdline+=(-Xl "$arg");;
      -Xs)    followaction=sacarg ;;
      -Xc)    followaction=ccarg ; ccarg= ;;
      -Xl)    followaction=ldarg  ;;
      -)     ;;
      -c)    ;;
      --version|-v|-V|-qversion)  "$sac2c" -v0 -target "$target" -cc ccprog -o /dev/stdout /dev/stdin -Xc "$arg"; exit 0 ;;
      -*)    cmdline+=(-Xc "$arg") ;;

      *.c)  if test x"$firstfile" = x; then firstfile=$arg; fi; cmdline+=("$arg") ;;
      *)  cmdline+=("$arg") ;;
  esac
done
if test -n "${prev_arg:-}"; then die "argument to \`$arg' is missing"; fi


cmdline=("$sac2c" -v0 -target "$target" -noprelude -nosaclibs -cc $mode$kind ${cmdline[@]})

if test -n "$outfile"; then
   cmdline+=(-o "$outfile")
else
    if test -n "$preproc"; then
        cmdline+=(-o /dev/stdout)
    elif test $mode = ld; then
        cmdline+=(-o a.out)
    elif test x"$firstfile" != x; then
        base=`basename "$firstfile" .c`
        if test -n "$asm"; then
            cmdline+=(-o "$base".s)
        else
            cmdline+=(-o "$base"$("$sac2c" -target "$target" -v0 -COBJEXT))
        fi
    else
        die "can't determine output file name for -c/-S"
    fi
fi

exec "${cmdline[@]}"
