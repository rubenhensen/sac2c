<?xml-stylesheet href="ast2html.xsl" type="text/xsl" name="HTML" media="screen"?>
<definition version="$Id$">
  <attributetypes>
    <type name="String" ctype="char*" init="NULL"
    copy="function" />
    <type name="SharedString" ctype="char*" init="NULL"
    copy="function" />
    <type name="Namespace" ctype="namespace_t*" init="NULL"
    copy="function" />
    <type name="Integer" ctype="int" init="0" copy="literal" />
    <type name="Long" ctype="long" init="0" copy="literal" />
    <type name="Bool" ctype="bool" init="FALSE" copy="literal" />
    <type name="Float" ctype="float" init="0.0" copy="literal" />
    <type name="Double" ctype="double" init="0.0" copy="literal" />
    <type name="Char" ctype="char" init="'\0'" copy="literal" />
    <type name="OldType" ctype="types*" init="NULL"
    copy="function" persist="no" />
    <type name="Node" ctype="node*" init="NULL" copy="function" />
    <!-- a Link pointing to a node within the tree -->
    <type name="Link" ctype="node*" init="NULL" copy="hash" persist="yes" />
    <!-- a Link pointing outside of the current context, e.g. to another
         son of a module node -->
    <type name="ExtLink" ctype="node*" init="NULL" copy="hash" persist="yes" />
    <!-- a Link pointing from a N_part node to a N_code node -->
    <type name="CodeLink" ctype="node*" init="NULL" copy="hash" persist="yes" />
    <type name="FileType" ctype="file_type" init="F_unknown"
    copy="literal" />
    <type name="LUT" ctype="lut_t*" init="NULL" copy="function" persist="no" />
    <type name="Prf" ctype="prf" init="0" copy="literal" />
    <type name="Mask" ctype="long*" size="7" init="NULL"
    copy="function" />
    <type name="StatusType" ctype="statustype" init="ST_undef"
    copy="literal" />
    <type name="NodeList" ctype="nodelist*" init="NULL"
    copy="function" />
    <type name="SharedNodeList" ctype="nodelist*" init="NULL"
    copy="function" />
    <type name="DFMask" ctype="dfmask_t*" init="NULL"
    copy="function" persist="no" />
    <type name="DFMaskBase" ctype="dfmask_base_t*" init="NULL"
    copy="function" persist="no" />
    <type name="NewType" ctype="ntype*" init="NULL"
    copy="function" />
    <type name="ArgTab" ctype="argtab_t*" init="NULL"
    copy="function" />
    <type name="IndexPointer" ctype="index_info*" init="NULL"
    copy="function" />
    <type name="Shape" ctype="shape*" init="NULL"
    copy="function" />
    <type name="SimpleType" ctype="simpletype" init="T_unknown" 
    copy="literal" />
    <type name="UseFlag" ctype="useflag" init="DOLLAR"
    copy="literal" />
    <type name="AccessInfo" ctype="access_info_t*" init="NULL"
    copy="function" persist="no" />
    <type name="AccessFeature" ctype="feature_t" init="0"
    copy="literal"  />
    <type name="ShpSeg" ctype="shpseg*" init="NULL"
    copy="function" />
    <type name="IntegerPointer" ctype="int*" init="NULL"
    copy="function" />
    <type name="IntegerPointerArray" ctype="int*" size="7"
    init="NULL" copy="function" />
    <type name="Scheduling" ctype="sched_t*" init="NULL"
    copy="function" persist="no" />
    <type name="TaskSel" ctype="tasksel_t*" init="NULL"
    copy="function" persist="no" />
    <type name="NodePointer" ctype="node**" init="NULL"
    copy="function" />
    <type name="SSAPhi" ctype="ssaphit_t" init="PHIT_NONE"
    copy="literal" />
    <type name="BitField" ctype="int" init="0" copy="literal" />
    <type name="Constant" ctype="constant*" init="NULL"
    copy="function" />
    <type name="MTExecMode" ctype="mtexecmode_t" init="MUTH_ANY"
    copy="literal" />
    <type name="RCCounter" ctype="rc_counter*" init="NULL"
    copy="function" persist="no" />
    <type name="StringSet" ctype="stringset_t*" init="NULL"
    copy="function" persist="no" />
    <type name="IndexInfo" ctype="index_info*" init="NULL"
    copy="function" persist="no" />
    <type name="TypeCheckingStatus" ctype="NTC_stat" init="NTC_not_checked"
    copy="literal" persist="yes" />
  </attributetypes>
  <phases>
    <!-- id is the short id of the traversal 
         name is a descriptive name
	 default gives the default traversal mode
	   user  a user defined function
	   sons  TravSons
	   none  TravNone
	   error TravError
	 include the include file needed for the traversal
    -->
    <general>
      <traversal id="GSC" name="Generate Startup Code" default="sons" include="gen_startup_code.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Spmd" />
          <node name="Icm" />
        </travuser>
      </traversal>
      <traversal id="PRT" name="Print Syntax Tree" default="user" include="print.h" >
        <travsons>
          <node name="Vinfo" />
          <node name="SSAstack" />
          <node name="WLblock" />
          <node name="WLublock" />
          <node name="Linklist" />
          <node name="Nums" />
          <node name="CWrapper" />
          <node name="Fungroup" />
        </travsons>
      </traversal>
      <traversal id="DUP" name="Tree duplication" default="user" include="DupTree.h" />
      <traversal id="FREE" name="Free Tree" default="user" include="free_node.h" />
      <traversal id="PINL" name="Prepare inlining" default="sons" include="prepare_inlining.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Vardec" />
          <node name="Avis" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Arg" />
          <node name="Id" />
        </travuser>
      </traversal>
      <traversal id="SBT" name="Serialize Build Stack" default="user" include="serialize_buildstack.h" />
      <traversal id="SET" name="Serialize Node Traversal" default="user" include="serialize_node.h" />
      <traversal id="SEL" name="Serialize Link Traversal" default="user" include="serialize_link.h" />
      <traversal id="AFB" name="Add Fucntion Body Traversal" default="sons" include="add_function_body.h">
        <travuser>
          <node name="Fundef" />
          <node name="Return" />
          <node name="Block" />
          <node name="Arg" />
        </travuser>
      </traversal>
      <traversal id="TNT" name="ToNewTypes Traversal" default="sons" include="ToNewTypes.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Vardec" />
          <node name="Block" />
          <node name="Ap" />
        </travuser>
      </traversal>
      <traversal id="TOT" name="ToOldTypes Traversal" default="sons" include="ToOldTypes.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Block" />
          <node name="Vardec" />
          <node name="Ret" />
        </travuser>
      </traversal>
      
      <traversal id="CUD" name="Cleanup Declarations" default="sons" include="cleanup_decls.h" >
        <travuser>
          <node name="Block" />
          <node name="Fundef" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Vardec" />
        </travuser>
      </traversal>
      <traversal id="F2L" name="Fun2Lac Traversal" default="sons" include="fun2lac.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="USSAT" name="UndoSSATransform Traversal" default="sons" include="UndoSSATransform.h" >
        <travuser>
          <node name="Assign" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Block" />
          <node name="Vardec" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Cond" />
          <node name="Funcond" />
        </travuser>
      </traversal>
      <traversal id="INFDFMS" name="Infer DataFlowMask Traversal" default="sons" include="InferDFMs.h" >
        <travuser>
          <node name="Assign" />
          <node name="Do" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Arg" />
          <node name="Code" />
          <node name="Ap" />
          <node name="Id" />
          <node name="Ids" />
          <node name="With" />
          <node name="With2" />
          <node name="Cond" />
          <node name="Icm" />
          <node name="Cond" />
        </travuser>
      </traversal>
      <traversal id="CMPT" name="Compare Tree Traversal" default="CMPTunknown" prefun="CMPTnodeType" include="compare_tree.h" >
        <travuser>
          <node name="Num" />
          <node name="Char" />
          <node name="Bool" />
          <node name="Str" />
          <node name="Float" />
          <node name="Double" />
          <node name="Array" />
          <node name="Let" />
          <node name="Ap" />
          <node name="Prf" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Generator" />
          <node name="Code" />
          <node name="Withid" />
          <node name="Fold" />
          <node name="Globobj" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Return" />
          <node name="Cond" />
          <node name="With" />
          <node name="Part" />
          <node name="Do" />
          <node name="Exprs" />
          <node name="Empty" />
        </travuser>
      </traversal>
      <traversal id="CHK" name="Check the Tree" default="user" include="check.h" />
      <traversal id="CHKTST" name="Check the TreeTest" default="user" include="checktst.h" />
    </general>
    
    <phase id="setup" name="Setting up sac2c compiler environment"
      startfun="SUdoSetup" include="setup.h"
      if="true"
      breakspec="su">
    </phase>
    <phase id="scanparse" name="Loading SAC source file"
      startfun="NULL" include=".h"
      if="true"
      breakspec="sp">
      <traversal id="HM" name="Handle Mops" default="sons" include="handle_mops.h" >
        <travuser>
          <node name="SPMop" />
        </travuser>
      </traversal>
      <traversal id="HD" name="Handle Dots" default="sons" include="handle_dots.h">
        <travuser>
          <node name="SPId" />
          <node name="With" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Dot" />
          <node name="SPAp" />
          <node name="Prf" />
          <node name="Assign" />
          <node name="SetWL" />
          <node name="SPId" />
        </travuser>
      </traversal>
      <traversal id="RSP" name="Resolve pragmas" default="sons" include="resolvepragma.h">
        <travuser>
          <node name="Arg" />
          <node name="Fundef" />
          <node name="Module" />
          <node name="Ret" />
        </travuser>
      </traversal>
    </phase>
    <phase id="simplify" name="Simplifying source code" 
      startfun="NULL" include=".h"
      if="true"
      breakspec="si">
      <traversal id="W2D" name="While2do" default="sons" include="while2do.h" >
	<travuser>
	  <node name="While" />
	</travuser>
      </traversal>
      <traversal id="HCE" name="Handle conditional expressions" 
                 default="sons" include="handle_condexpr.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Code" />
	  <node name="Cond" />
	  <node name="Do" />
	  <node name="Funcond" />
	  <node name="With" />
	</travuser>
      </traversal>
      <traversal id="FLAT" name="Flatten" default="sons" include="flatten.h" >
        <travuser>
          <node name="Assign" />
          <node name="Module" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Exprs" />
          <node name="SPAp" />
          <node name="Block" />
          <node name="Cond" />
          <node name="Do" />
          <node name="Array" />
          <node name="Return" />
          <node name="SPId" />
          <node name="Arg" />
          <node name="Prf" />
          <node name="With" />
          <node name="Withid" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Code" />
        </travuser>
      </traversal>
      <traversal id="L2F" name="Lac2Fun Traversal" default="sons" include="lac2fun.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Do" />
	  <node name="Fundef" />
	  <node name="Cond" />
	</travuser>
      </traversal>
      <traversal id="SSAT" name="SSA Transform Traversal" default="sons" include="SSATransform.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Ap" />
	  <node name="Fundef" />
	  <node name="Cond" />
          <node name="Block" />
          <node name="Code" />
          <node name="Let" />
          <node name="Icm" />
          <node name="Arg" />
          <node name="Vardec" />
          <node name="Id" />
          <node name="With" />
          <node name="With2" />
          <node name="Part" />
          <node name="Withid" />
          <node name="Funcond" />
          <node name="Return" />
          <node name="Ids" />
	</travuser>
      </traversal>
    </phase>
    <phase id="module" name="Processing use statements"
      startfun="NULL" include=".h"
      if="true"
      breakspec="mo">
      <traversal id="RSA" name="Resolve All Flags" default="sons" include="resolveall.h" >
        <travuser>
	  <node name="Use" />
	  <node name="Import" />
	  <node name="Provide" />
	  <node name="Export" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="GDP" name="Gather Dependencies" default="sons" include="gatherdependencies.h">
        <travuser>
	  <node name="Use" />
	  <node name="Import" />
	  <node name="Fundef" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	  <node name="Avis" />
	  <node name="Arg" />
	  <node name="Ret" />
	  <node name="Vardec" />
	  <node name="SPId" />
	  <node name="Fold" />
	  <node name="Cast" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="ANS" name="Annotate Namespaces" default="sons" include="annotatenamespace.h">
        <travuser>
	  <node name="Symbol" />
	  <node name="Use" />
	  <node name="Import" />
	  <node name="Export" />
	  <node name="Provide" />
	  <node name="Fundef" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	  <node name="While" />
	  <node name="Do" />
	  <node name="SPAp" />
	  <node name="SPMop" />
	  <node name="Avis" />
	  <node name="Arg" />
	  <node name="Ret" />
	  <node name="Vardec" />
	  <node name="SPIds" />
	  <node name="SPId" />
	  <node name="Let" />
	  <node name="With" />
	  <node name="Fold" />
	  <node name="Module" />
	  <node name="Cast" />
	</travuser>
      </traversal>
      <traversal id="USS" name="Use Symbols" default="sons" include="usesymbols.h" >
        <travuser>
	  <node name="Typedef" />
	  <node name="Fold" />
	  <node name="Avis" />
	  <node name="SPAp" />
	  <node name="SPId" />
	  <node name="SPMop" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="IMP" name="Import Symbols" default="sons" include="importsymbols.h" >
        <travuser>
	  <node name="Module" />
	  <node name="Import" />
	  <node name="Export" />
	  <node name="Use" />
	  <node name="Provide" />
	  <node name="Symbol" />
        </travuser>
      </traversal>
    </phase>
    <phase id="objinit" name="Generating generic types and functions"
      startfun="OIdoObjInit" include="objinit.h"
      if="true"
      breakspec="oi">
    </phase>
    <phase id="typecheck" name="Running type inference system"
      startfun="NTCdoNewTypeCheck" include="new_typecheck.h"
      if="true"
      breakspec="tc">
      <traversal id="INSVD" name="Insert Vardecs" default="sons" include="insert_vardec.h" >
	<travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="SPAp" />
          <node name="SPId" />
          <node name="SPIds" />
          <node name="With" />
          <node name="Let" />
          <node name="Part" />
          <node name="Code" />
          <node name="Do" />
	</travuser>
      </traversal>
      <traversal id="CRTWRP" name="Create Wrappers" default="sons" include="create_wrappers.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="SPAp" />
          <node name="Genarray" />
          <node name="Fold" />
        </travuser>  
      </traversal>
      <traversal id="NTC" name="New Type Inference" default="sons" include="new_typecheck.h" >
        <travuser> 
          <node name="Module" />
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Block" />
          <node name="Vardec" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Funcond" />
          <node name="Let" />
          <node name="Return" />
          <node name="Ap" />
          <node name="Prf" />
          <node name="Array" />
          <node name="Cast" />
          <node name="Exprs" />
          <node name="Id" />
          <node name="Globobj" />
          <node name="Num" />
          <node name="Bool" />
          <node name="Char" />
          <node name="Double" />
          <node name="Float" />
          <node name="With" />
          <node name="Generator" />
          <node name="Part" />
          <node name="Withid" />
          <node name="Code" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
        </travuser>
      </traversal>
      <traversal id="SWR" name="Split Wrappers" default="sons" include="split_wrappers.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="With" />
          <node name="Genarray" />
          <node name="Fold" />
        </travuser>
      </traversal>
      <traversal id="CWC" name="Create Wrapper Code" default="sons" include="create_wrapper_code.h" >
        <travuser>
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="DFC" name="Dispatch Funcalls" default="sons" include="dispatchfuncalls.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="With" />
          <node name="Genarray" />
          <node name="Fold" />
        </travuser>
      </traversal>
      <traversal id="RST" name="Resolve Symbol Types" default="sons" include="resolvesymboltypes.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Ret" />
          <node name="Avis" />
          <node name="Typedef" />
          <node name="Cast" />
        </travuser>
      </traversal>
      <traversal id="NT2OT" name="Convert from new to old types and do some cleanup" default="sons" include="new2old.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Avis" />
          <node name="Block" />
          <node name="Vardec" />
          <node name="Cast" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Cond" />
          <node name="Funcond" />
          <node name="Fold" />
          <node name="Part" />
          <node name="Withid" />
        </travuser>
      </traversal>
      <traversal id="PF" name="Annotate Function Calls " default="sons" include="annotate_fun_calls.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Fundef" />
        </travuser>  
      </traversal>
    </phase>
    <phase id="export" name="Exporting symbols"
      startfun="NULL" include=".h"
      if="true"
      breakspec="ex">
      <traversal id="EXP" name="Export Symbols" default="sons" include="export.h">
        <travuser>
	  <node name="Use" />
	  <node name="Import" />
	  <node name="Provide" />
	  <node name="Export" />
	  <node name="Symbol" />
	  <node name="Fundef" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="SER" name="Serialize Module" default="sons" include="serialize.h">
        <travuser>
	  <node name="Fundef" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	</travuser>
      </traversal>
    </phase>
    <phase id="state" name="Resolving state system"
      startfun="NULL" include=".h"
      if="true"
      breakspec="st">
      <traversal id="OBJINI" name="Object Initialisation" default="sons" include="objinit.h">
        <travsons>
          <node name="Module" />
          <node name="Objdef" />
        </travsons>
      </traversal>
      <traversal id="OAN" name="Object Analysis" default="sons" include="objanalysis.h">
        <travsons>
          <node name="Module" />
          <node name="Globobj" />
          <node name="Fundef" />
          <node name="Ap" />
        </travsons>
      </traversal>
    </phase>
    <phase id="wlenhance" name="Enhancement of With-Loops"
      startfun="NULL" include=".h"
      if="true"
      breakspec="we">
      <traversal id="WLE" name="With-Loop Enhancement" default="sons" include="WLEnhancement.h" >
      </traversal>
      <traversal id="EA" name="Explicit Accumulate" default="sons" include="ExplicitAccumulate.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="With" />
          <node name="Code" />
        </travuser>
      </traversal>
      <traversal id="WLDP" name="With-Loop Default Partition" default="sons" include="wldefaultpartition.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="With" />
          <node name="Part" />
          <node name="Genarray" />
          <node name="Modarray" />
         </travuser>
      </traversal>
      <traversal id="WLPG" name="With-Loop Partition Generation" default="sons" include="WLPartitionGeneration.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Ap" />
          <node name="With" />
        </travuser>
      </traversal>
      <traversal id="WLA" name="With-Loop Analysis" default="sons" include="wlanalysis.h" >
        <travuser>
          <node name="With" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Genarray" />
         </travuser>
      </traversal>
    </phase>
    <phase id="sacopt" name="Running SAC optimizations"
      startfun="NULL" include=".h"
      if="true"
      breakspec="op">
      <traversal id="PPI" name="Prepare Inline" default="sons" include="prepareinline.h">
        <travuser>
	  <node name="Fundef" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="DFR" name="Dead Function Removal" default="sons" include="DeadFunctionRemoval.h" >
        <travuser>
	  <node name="Module" />
	  <node name="Fundef" />
	  <node name="Ap" />
	  <node name="Fold" />
	</travuser>
      </traversal>
      <traversal id="AE" name="Array Elimination" default="sons" include="ArrayElimination.h" >
        <travuser>
          <!-- <node name="Fundef" /> -->
          <!-- <node name="Assign" /> -->
          <!-- <node name="Cond" /> -->
          <!-- <node name="Do" /> -->
          <!-- <node name="With" /> -->
          <!-- <node name="Prf" /> -->
          <!-- <node name="Ap" /> -->
        </travuser>
      </traversal>
      <traversal id="APC" name="Array Padding Collect" default="sons" include="pad_collect.h" >
        <travuser>
          <!-- <node name="Fundef" /> -->
          <!-- <node name="Let" /> -->
          <!-- <node name="Prf" /> -->
          <!-- <node name="Ap" /> -->
          <!-- <node name="With" /> -->
          <!-- <node name="Genarray" /> -->
          <!-- <node name="Modarray" /> -->
          <!-- <node name="Fold" /> -->
          <!-- <node name="Code" /> -->
          <!-- <node name="Id" /> -->
          <!-- <node name="Array" /> -->
        </travuser>
      </traversal>
      <traversal id="APT" name="Array Padding Transform" default="sons" include="pad_transform.h" >
        <travuser>
          <!-- <node name="Fundef" /> -->
          <!-- <node name="Arg" /> -->
          <!-- <node name="Block" /> -->
          <!-- <node name="Let" /> -->
          <!-- <node name="Vardec" /> -->
          <!-- <node name="Assign" /> -->
          <!-- <node name="Array" /> -->
          <!-- <node name="With" /> -->
          <!-- <node name="Genarray" /> -->
          <!-- <node name="Modarray" /> -->
          <!-- <node name="Fold" /> -->
          <!-- <node name="Code" /> -->
          <!-- <node name="Id" /> -->
          <!-- <node name="Ap" /> -->
          <!-- <node name="Prf" /> -->
        </travuser>
      </traversal>
      <traversal id="AL" name="AssociativeLaw" default="sons" include="AssociativeLaw.h" >
	<travuser>
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Prf" />
	</travuser>
      </traversal>
      <traversal id="CF" name="Constant Folding" default="sons" include="SSAConstantFolding.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Let" />
          <node name="Ap" />
          <node name="Array" />
          <node name="Prf" />
          <node name="Code" />
          <node name="Funcond" />
        </travuser>
	<travnone>
	  <node name="Ids" />
	  <node name="Arg" />
	</travnone>
      </traversal>
      <traversal id="CSE" name="Common Subexpression Elimination" default="sons" include="SSACSE.h" >
	<travuser>
	  <node name="Fundef" />
          <node name="Arg" />
	  <node name="Block" />
	  <node name="Vardec" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Code" />
	  <node name="Cond" />
	  <node name="With" />
	  <node name="Ap" />
          <node name="Ids" />
	  <node name="Id" />
	  <node name="Return" />
	</travuser>
      </traversal>
      <traversal id="CVP" name="Constant Variable Propagation" default="sons" include="ConstVarPropagation.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Code" />
	  <node name="Cond" />
	  <node name="With" />
	  <node name="Genarray" />
	  <node name="Modarray" />
	  <node name="Fold" />
	  <node name="Ap" />
	  <node name="Prf" />
	  <node name="Exprs" />
	  <node name="Id" />
	  <node name="Return" />
	  <node name="Array" />
	  <node name="Funcond" />
	  <node name="Arg" />
	  <node name="Ids" />
	</travuser>
      </traversal>
    <traversal id="DCR" name="Dead Code Removal" default="sons" include="deadcoderemoval.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Ret" />
	  <node name="Vardec" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Id" />
	  <node name="Ids" />
	  <node name="Code" />
	  <node name="Cond" />
	  <node name="Withid" />
	  <node name="Ap" />
	  <node name="Return" />
	</travuser>
      </traversal>
      <traversal id="DDEPEND" name="Detect Dependencies" default="sons" include="detectdependencies.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Prf" />
	  <node name="Id" />
	  <node name="With" />
          <node name="Code" />
	</travuser>
      </traversal>
      <traversal id="DL" name="DistributiveLaw" default="sons" include="DistributiveLaw.h" >
	<travuser>
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Prf" />
	  <node name="Ap" />
	</travuser>
      </traversal>
      <traversal id="ESD" name="ElimSubDiv" default="sons" include="ElimSubDiv.h" >
	<travuser>
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Prf" />
	</travuser>
      </traversal>
      <traversal id="ILI" name="InferLoopInvariants" default="sons" include="SSAInferLI.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Ap" />
	</travuser>
      </traversal>
      <traversal id="INL" name="Inline Traversal" default="sons" include="inlining.h" >
	<travuser>
	  <node name="Module" />
	  <node name="Assign" />
	  <node name="Fundef" />
	  <node name="Let" />
	  <node name="Ap" />
	</travuser>
      </traversal>
      <traversal id="LINL" name="LAC Inline Traversal" default="sons" include="lacinlining.h" >
	<travuser>
	  <node name="Module" />
	  <node name="Assign" />
	  <node name="Fundef" />
	  <node name="Let" />
	  <node name="Ap" />
	</travuser>
      </traversal>
      <traversal id="LIR" name="Loop Invariants Traversal" default="sons" include="SSALIR.h" >
	<travuser>
	  <node name="Ids" />
	  <node name="Assign" />
	  <node name="Fundef" />
          <node name="Arg" />
          <node name="Vardec" />
          <node name="Block" />
          <node name="Let" />
          <node name="Id" />
          <node name="Ap" />
          <node name="Cond" />
          <node name="Return" />
          <node name="With" />
          <node name="Withid" />
          <node name="Exprs" />
	</travuser>
      </traversal>
      <traversal id="LIRMOV" name="Loop Inveriants Move Traversal" default="sons" include="SSALIR.h" >
	<travuser>
	  <node name="Id" />
	  <node name="Withid" />
	  <node name="Assign" />
          <node name="Block" />
          <node name="Let" />
          <node name="Ids" />
	</travuser>
      </traversal>
      <traversal id="LUR" name="Loop Unrolling Traversal" default="sons" include="SSALUR.h" >
	<travuser>
	  <node name="Ap" />
	  <node name="Assign" />
	  <node name="Fundef" />
	  <node name="With" />
	</travuser>
      </traversal>
      <traversal id="OPT" name="Optimize Traversal" default="sons" include="optimize.h" >
	<travuser>
	  <node name="Module" />
	  <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="TS" name="Print Type Statistics" default="sons" include="type_statistics.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Vardec" />
        </travuser>
      </traversal>
      <traversal id="RDEPEND" name="Resolve Dependencies" default="sons" include="resolvedependencies.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Prf" />
   	</travuser>
      </traversal>
      <traversal id="RC" name="Remove Cast" default="sons" include="rmcasts.h" >
        <travuser>
          <node name="Cast" />
          <node name="Avis" />
          <node name="Ret" />
        </travuser>
      </traversal>
      <traversal id="SISI" name="Signature Simplification" default="sons" include="signature_simplification.h" >
	<travuser>
	  <node name="Assign" />
          <node name="Fundef" />
	  <node name="Block" />
	  <node name="Let" />
	  <node name="Return" />
	  <node name="Ret" />
          <node name="Ap" />
          <node name="Ids" />
          <node name="Id" />
          <node name="Exprs" />
	  <node name="Arg" />
	  <node name="Module" />
   	</travuser>
      </traversal>
      <traversal id="TDEPEND" name="Tag Dependencies" default="sons" include="tagdependencies.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Id" />
	  <node name="With" />
   	</travuser>
      </traversal>
      <traversal id="TUP" name="Type Upgrade" default="sons" include="type_upgrade.h" >
	<travuser>
	  <node name="Assign" />
          <node name="Fundef" />
          <node name="Cond" />
          <node name="Funcond" />
	  <node name="Block" />
	  <node name="With" />
	  <node name="Let" />
	  <node name="Return" />
	  <node name="Code" />
	  <node name="Generator" />
	  <node name="Part" /> 
          <node name="Ap" />
          <node name="Ids" />
          <node name="Fold" />
          <node name="Modarray" />
          <node name="Genarray" />
          <node name="Num" />
          <node name="Double" />
          <node name="Char" />
          <node name="Bool" />
          <node name="Prf" />
          <node name="Array" />
          <node name="Id" />
          <node name="Exprs" />
   	</travuser>
      </traversal>
      <traversal id="UESD" name="UndoElimSubDiv" default="sons" include="UndoElimSubDiv.h" >
        <travuser>
	  <node name="Block" />
          <node name="Let" />
	  <node name="Assign" />
	  <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="WLI" name="With-Loop-Interference" default="sons" include="SSAWLI.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Ap" />
	  <node name="Id" />
          <node name="Let" />
          <node name="Cond" />
	  <node name="With" />
	  <node name="Modarray" />
	  <node name="Part" />
	  <node name="Generator" />
          <node name="Code" />
	</travuser>
      </traversal>
     <traversal id="WLF" name="With-Loop-Folding" default="sons" include="SSAWLF.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Id" />
          <node name="Let" />
	  <node name="With" />
          <node name="Code" />
	</travuser>
      </traversal>
      <traversal id="WLFS" name="With-Loop-Fusion" default="sons" include="WithloopFusion.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Ap" />
	  <node name="Id" />
	  <node name="With" />
	  <node name="Genarray" />
	  <node name="Modarray" />
	  <node name="Fold" />
	  <node name="Part" />
	  <node name="Generator" />
	</travuser>
      </traversal>
      <traversal id="WLS" name="With-Loop Scalarization" default="sons" include="wls.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Fundef" />
          <node name="With" />
        </travuser>
      </traversal>
      <traversal id="WLSC" name="With-Loop Scalarization Check traversal" default="sons" include="wls.h">
        <travuser>
          <node name="Block" />
          <node name="Code" />
          <node name="Default" />
          <node name="Id" />
          <node name="Part" />
          <node name="With" />
          <node name="Withid" />
          <node name="Generator" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
        </travuser>
      </traversal>
      <traversal id="WLSW" name="With-Loop Scalarization Withloopification traversal" default="sons" include="wls.h">
        <travuser>
          <node name="Code" />
          <node name="Id" />
          <node name="Let" />
          <node name="Part" />
          <node name="With" />
          <node name="Withid" />
        </travuser>
      </traversal>
      <traversal id="WLSB" name="With-Loop Scalarization Build traversal" default="sons" include="wls.h">
        <travuser>
          <node name="Code" />
          <node name="Generator" />
          <node name="Part" />
          <node name="With" />
          <node name="Withid" />
          <node name="Genarray" />
          <node name="Modarray" />
        </travuser>
      </traversal>
      <traversal id="IVE" name="Index Vector Elimination" default="sons" include="index.h">
        <travuser>
        </travuser>
      </traversal>
      <traversal id="IVEI" name="IVE - Use Inference" default="sons" include="index_infer.h">
        <travuser>
          <node name="Assign" />
          <node name="Prf" />
          <node name="Id" />
        </travuser>
      </traversal>
    </phase>
    <phase id="wltrans" name="Transforming with-loop representation"
      startfun="NULL" include=".h"
      if="true"
      breakspec="wt">
    <traversal id="WLTRA" name="With-Loop Transformation traversal" default="sons" include="wltransform.h">
        <travuser>
          <node name="Assign" />
          <node name="Code" />
          <node name="Let" />
          <node name="With" />
        </travuser>
      </traversal>
    </phase>
    <phase id="alloc" name="Introducing explicit allocation instructions"
      startfun="NULL" include=".h"
      if="true"
      breakspec="al">
      <traversal id="EMAA" name="Alias analysis" default="none" include="aliasanalysis.h" >
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Assign" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Fold" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Icm" />
          <node name="Id" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="With" />
          <node name="With2" />
          <node name="Vardec" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="EMLR" name="Loop reuse" default="none" include="loopreuseopt.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Fundef" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Let" />
          <node name="With" />
          <node name="With2" />
          <node name="Cond" />
          <node name="Code" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="EMLRO" name="Loop reuse optimization" default="none" include="loopreuseopt.h">
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Fundef" />
          <node name="Id" />
          <node name="Prf" />
        </travuser>
        <travsons>
          <node name="Exprs" />
          <node name="Module" />
          <node name="Let" />
          <node name="Assign" />
          <node name="With" />
          <node name="With2" />
          <node name="Cond" />
          <node name="Code" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="ASD" name="AUD SCL distinction" 
                 default="sons" include="audscldist.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Ap" />
          <node name="Cond" />
          <node name="Do" />
          <node name="Let" />
        </travuser>
      </traversal>
      <traversal id="EMAL" name="Allocation" default="none" include="alloc.h" >
        <travuser>
          <node name="Num" />
          <node name="Char" />
          <node name="Bool" />
          <node name="Float" />
          <node name="Double" />

          <node name="Ap" />
          <node name="Array" />
          <node name="Assign" />
          <node name="Code" />
          <node name="Fold" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Icm" />
          <node name="Id" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="With" />
          <node name="With2" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Cond" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="EMDR" name="Data reuse" default="none" include="datareuse.h" >
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Prf" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="With" />
          <node name="With2" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="EMEC" name="Explicit Copy" default="none" include="explicitcopy.h" >
        <travuser>
          <node name="Assign" />
          <node name="Fundef" />
          <node name="Prf" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Let" />
          <node name="With" />
          <node name="With2" />
          <node name="Cond" />
          <node name="Code" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="EMFRC" name="Filter Reuse Candidates" default="sons" include="filterrc.h" >
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Fold" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Id" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="With" />
          <node name="With2" />
        </travuser>
        <travnone>
          <node name="Objdef" />
        </travnone>   
      </traversal>
      <traversal id="EMIA" name="Interface Analysis" default="none" include="interfaceanalysis.h" >
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Assign" />
          <node name="Block" />
          <node name="Cond" />
          <node name="Fold" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Id" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Ret" />
          <node name="Return" />
          <node name="Vardec" />
          <node name="With" />
          <node name="With2" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Exprs" />
        </travsons>
      </traversal>
      <traversal id="EMRB" name="Reuse branching" default="none" include="reusebranching.h" >
        <travuser>
          <node name="Assign" />
          <node name="Code" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Ids" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="With" />
          <node name="With2" />
          <node name="Withid" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Let" />
          <node name="Cond" />
          <node name="Block" />
          <node name="Fold" />
        </travsons>
      </traversal>
      <traversal id="EMRI" name="Reuse inference" default="none" include="reuse.h" >
        <travuser>
          <node name="Arg" />
          <node name="Assign" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Fundef" />
          <node name="Icm" />
          <node name="Let" />
          <node name="Prf" />
          <node name="With2" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="With" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="REUSE" name="Reuse With Arrays" default="sons" include="ReuseWithArrays.h">
        <travuser>
          <node name="Fundef" />
          <node name="Let" />
          <node name="Id" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="With2" />
        </travuser>
      </traversal>
      <traversal id="EMSR" name="Static Reuse" default="none" include="staticreuse.h" >
        <travuser>
          <node name="Prf" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="With" />
          <node name="With2" />
          <node name="Code" />
          <node name="Block" />
          <node name="Cond" />
        </travsons>
      </traversal>
      <traversal id="EMIP" name="Inplace Computation" default="sons" include="inplacecomp.h">
        <travuser>
          <node name="Ap" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Prf" />
        </travuser>
        <travnone>
          <node name="Objdef" />
        </travnone>
      </traversal>
      <traversal id="EMIPH" name="Inplace Computation helper" default="sons" include="inplacecomp.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Id" />
        </travuser>
        <travnone>
          <node name="Objdef" />
        </travnone>
      </traversal>
    </phase>
    <phase id="concurrent" name="Generating annotations for MT 2"
      startfun="NULL" include=".h"
      if="true"
      breakspec="co">
      <traversal id="CONC" name="Build SPMD Regions (MT2)" default="sons" include="concurrent.h">
        <travuser>
          <node name="Fundef" />
          <node name="Module" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="SPMDI" name="SPMD Init" default="sons" include="spmd_init.h">
        <travuser>
          <node name="Assign" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="SPMDEMM" name="SPMD Explicit Memory Management" default="sons" include="spmd_emm.h">
        <travuser>
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
          <node name="Spmd" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="SPMDL" name="SPMD Lift" default="sons" include="spmd_lift.h">
        <travuser>
          <node name="Id" />
          <node name="Ids" />
          <node name="Let" />
          <node name="Spmd" />
          <node name="With2" />
          <node name="Withid" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="SCHED" name="Schedule" default="sons" include="schedule.h">
        <travuser>
          <node name="WLsegVar" />
          <node name="Sync" />
          <node name="With2" />
          <node name="WLseg" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="SYNCI" name="SYNC-Block Init" default="sons" include="sync_init.h">
        <travuser>
          <node name="Assign" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="SYNCO" name="Synchronisation Optimization" default="sons" include="sync_opt.h">
        <travuser>
          <node name="Assign" />
          <node name="Sync" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="SPMDDN" name="SPMD Delete Nested Traversal"  default="sons" include="spmd_trav.h">
        <travuser>
          <node name="Spmd" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="SPMDPM" name="SPMD Produce Masks" default="sons" include="spmd_trav.h">
        <travuser>
          <node name="Assign" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
    </phase>
    <phase id="multithread" name="Generating annotations for MT3"
      startfun="NULL" include=".h"
      if="true"
      breakspec="mt">
      <traversal id="MUTH" name="Build Multithread (MT3)" default="sons" include="multithread.h">
        <travuser>
          <node name="Assign" />
          <node name="Fundef" />
          <node name="Module" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="TEM" name="Tag Executionmode" default="sons" include="tag_executionmode.h">
        <travuser>
          <node name="Ap" />
          <node name="Array" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
          <node name="With2" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="CRWIW" name="Create Withinwith Replication" default="sons" include="create_withinwith.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Fundef" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="PEM" name="Propagate Executionmode" default="sons" include="propagate_executionmode.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Fundef" />
          <node name="With2" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="CDFG" name="Create Dataflowgraph" default="sons" include="create_dataflowgraph.h">
        <travuser>
          <node name="Assign" />
          <node name="Block" />
          <node name="Id" />
          <node name="Withid" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="ASMRA" name="Assignments Rearrange" default="sons" include="assignments_rearrange.h">
        <travuser>
          <node name="Block" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="CRECE" name="Create Cells" default="sons" include="create_cells.h">
        <travuser>
          <node name="Assign" />
          <node name="Block" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="CEGRO" name="Cell Growth" default="sons" include="cell_growth.h">
        <travuser>
          <node name="Assign" />
          <node name="Block" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="REPFUN" name="Replicate Functions" default="sons" include="replicate_functions.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="EX" />
          <node name="Fundef" />
          <node name="Module" />
          <node name="MT" />
          <node name="ST" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="CONCEL" name="Consolidate Cells" default="sons" include="consolidate_cells.h">
        <travuser>
          <node name="EX" />
          <node name="Fundef" />
          <node name="MT" />
          <node name="ST" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
    </phase>
    <phase id="refcnt" name="Introducing explicit allocation instructions" 
      startfun="NULL" include=".h" if="true" breakspec="rc">
      <traversal id="RCI" name="Reference Counting Inference" default="sons" include="referencecounting.h" >
        <travuser>
          <node name="Ap" />
          <node name="Array" />
          <node name="Assign" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Fold" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Icm" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="Return" />
          <node name="With" />
          <node name="With2" />
          <node name="Withid" />
        </travuser>
        <travnone>
          <node name="Objdef" />
          <node name="Arg" />
          <node name="Vardec" />
        </travnone>
      </traversal>
      <traversal id="RCM" name="Reference counting minimization" default="sons" include="rcminimize.h" >
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Assign" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Let" />
          <node name="Prf" />
          <node name="Return" />
        </travuser>
        <travnone>
          <node name="Objdef" />
          <node name="Withid" />
        </travnone>
      </traversal>
      <traversal id="EMRCO" name="Reference counting optimizations" default="none" include="rcopt.h" >
        <travuser>
          <node name="Assign" />
          <node name="Block" />
          <node name="Fold" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Cond" />
          <node name="With" />
          <node name="With2" />
          <node name="Code" />
        </travsons>
      </traversal>
      <traversal id="EMRE" name="Reuse elimination" default="none" include="reuseelimination.h" >
        <travuser>
          <node name="Assign" />
          <node name="Block" />
          <node name="Cond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="Vardec" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="With" />
          <node name="With2" />
          <node name="Fold" />
          <node name="Code" />
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
    </phase>
    <phase id="precompile" name="Preparing C code generation" 
      startfun="NULL" include=".h"
      if="true"
      breakspec="pc">
      <traversal id="REC" name="Remove External Code" default="sons" include="remove_external_code.h" >
        <travuser>
	  <node name="Fundef" />
	</travuser>
      </traversal>
      <traversal id="SLS" name="Set Linksign" default="sons" include="setlinksign.h" >
        <travuser>
	  <node name="Module" />
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Ret" />
	</travuser>
      </traversal>
      <traversal id="MMV" name="MarkMemVals" default="sons" include="markmemvals.h" >
        <travuser>
          <node name="Block" />
          <node name="Code" />
          <node name="Do" />
          <node name="Fold" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Id" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="Spmd" />
          <node name="Vardec" />
          <node name="With" />
          <node name="With2" />
          <node name="WLseg" />
          <node name="WLsegVar" />
        </travuser>
      </traversal>
      <traversal id="FPC" name="Function Precompilation" default="sons" include="functionprecompile.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Ret" />
          <node name="Arg" />
        </travuser>
      </traversal>
      <traversal id="TCP" name="Type Conversions" default="sons" include="typeconv_precompile.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Ap" />
        </travuser>
      </traversal>
      <traversal id="RID" name="Rename Identifiers" default="sons" include="renameidentifiers.h">
        <travuser>
	  <node name="Module" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Vardec" />
	  <node name="Return" />
	  <node name="Ap" />
	  <node name="Icm" />
	  <node name="WLseg" />
	  <node name="WLsegVar" />
	  <node name="Avis" />
	</travuser>
      </traversal>
    </phase>
    <phase id="compile" name="Generating C code" 
      startfun="NULL" include=".h"
      if="true"
      breakspec="cp">
      <traversal id="COMP" name="Compile" default="sons" include="compile.h">
        <travuser>
          <node name="Ap" />
          <node name="Array" />
          <node name="Assign" />
          <node name="Block" />
          <node name="Cond" />
          <node name="Fundef" />
          <node name="Id" />
          <node name="Let" />
          <node name="Do" />
          <node name="Module" />
          <node name="Objdef" />
          <node name="Prf" />
          <node name="Return" />
          <node name="Typedef" />
          <node name="Vardec" />

          <node name="Num" />
          <node name="Char" />
          <node name="Bool" />
          <node name="Float" />
          <node name="Double" />

          <node name="With" />
          <node name="Withid" />
          <node name="Part" />
          <node name="Generator" />
          <node name="With2" />
          <node name="WLseg" />
          <node name="WLsegVar" />
          <node name="WLblock" />
          <node name="WLublock" />
          <node name="WLstride" />
          <node name="WLstrideVar" />
          <node name="WLgrid" />
          <node name="WLgridVar" />
          <node name="Code" />

          <node name="Spmd" />
          <node name="Sync" />
        </travuser>
        <travnone>
          <node name="Icm">
            <description>
              Using TRAVsons, COMPid would be applied to ICM_ARG1.
            </description>
          </node>
        </travnone>
        <traverror>
          <node name="Cast">
            <description>
              Node is already eliminated.
            </description>
          </node>
          <node name="While">
            <description>
              Node is already eliminated.
            </description>
          </node>
          <node name="Funcond">
            <description>
              Node is already eliminated.
            </description>
          </node>
        </traverror>
      </traversal>
    </phase>
    <phase id="invokecc" name="Invoking C compiler"
      startfun="NULL" include=".h"
      if="true"
      breakspec="cc">
    </phase>
    <phase id="createlib" name="Creating SAC library"
      startfun="NULL" include=".h"
      if="true"
      breakspec="cl">
    </phase>
    <phase id="final" name="Unknown compiler phase"
      startfun="NULL" include=".h"
      if="true"
      breakspec="su">
    </phase>
   </phases>
  <nodesets>
    <nodeset name="Expr">
      <target>
        <node name="Num" />
        <node name="Double" />
        <node name="Float" />
        <node name="Char" />
        <node name="Bool" />
        <node name="Id" />
        <node name="SPId" />
        <node name="With" />
        <node name="Array" />
        <node name="Ap" />
        <node name="SPAp" />
        <node name="Prf" />
        <node name="Funcond" />
	<node name="Cast" />
	<node name="SPMop" />
	<node name="SetWL" />
	<node name="Dot" />
	<node name="Str" />
        <node name="Icm" />
      </target>
    </nodeset>
    <nodeset name="Instr">
      <target>
        <node name="Let" />
        <node name="Cond" />
        <node name="Return" />
        <node name="Do" />
        <node name="Annotate" />
        <node name="While" />
        <node name="Icm" />
      </target>
    </nodeset>
    <nodeset name="Interface">
      <target>
        <node name="Import" />
	<node name="Export" />
	<node name="Use" />
	<node name="Provide" />
      </target>
    </nodeset>
    <nodeset name="WithOp">
      <target>
        <node name="Genarray" />
	<node name="Modarray" />
	<node name="Fold" />
      </target>
    </nodeset>
  </nodesets>
  <syntaxtree version="1.0">
<!--

  N_module :

-->
    <node name="Module">
      <description>node for a module declaration</description>
      <sons>
        <son name="Imports" mandatory="no">
          <description>symbols imported and exported by the module</description>
          <target>
            <set name="Interface" />
          </target>
        </son>
        <son name="Types" mandatory="no">
          <description>types defined within the
            module</description>
          <target>
            <node name="Typedef" />
          </target>
        </son>
        <son name="Objs" mandatory="no">
          <target>
            <node name="Objdef" />
          </target>
        </son>
        <son name="Funs" mandatory="no">
          <target>
            <node name="Fundef" />
          </target>
        </son>
        <son name="FunDecs" mandatory="no">
          <target>
            <node name="Fundef" />
          </target>
        </son>
        <son name="CWrapper" default="NULL" mandatory="no">
          <target>
            <node name="CWrapper" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Namespace" mandatory="no">
          <type name="Namespace" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="FileType" mandatory="yes">
          <type name="FileType" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Classtype" mandatory="no">
          <type name="NewType" />
          <phases>
            <range from="sp" to="objinit"/>
          </phases>
        </attribute>
        <attribute name="WrapperFuns" mandatory="yes">
          <type name="LUT" />
          <phases>
            <range from="crtwrp" to="cwc" />
          </phases>
        </attribute>
        <attribute name="FoldFuns" mandatory="yes">
          <type name="Link">
            <target>
              <node name="Fundef" />
            </target>
          </type>
          <phases>
            <range from="comp" to="final" />
          </phases>
        </attribute>
        <attribute name="Dependencies" mandatory="yes">
          <type name="StringSet" />
          <phases>
            <range from="ans" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_typedef :

-->
    <node name="Typedef">
      <description>definition of a user defined type</description>
      <sons>
        <son name="Next" mandatory="no">
          <target>
            <node name="Typedef" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" mandatory="yes">
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Ns" mandatory="no">
          <type name="Namespace" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="NType" mandatory="yes">
          <type name="NewType" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Pragma" mandatory="no">
          <type name="Node">
            <target>
              <node name="Pragma" />
            </target>
          </type>
          <phases>
            <range from="imp" to="exp" />
          </phases>
        </attribute>
        <attribute name="CopyFun" mandatory="no">
          <type name="String" />
          <phases>
            <range from="pragma" to="final" />
          </phases>
        </attribute>
        <attribute name="FreeFun" mandatory="no">
          <type name="String" />
          <phases>
            <range from="pragma" to="final" />
          </phases>
        </attribute>
        <attribute name="Icm" mandatory="no">
          <type name="Node">
            <target>
              <node name="Icm" />
            </target>
          </type>
          <phases>
            <range from="comp" to="final" />
          </phases>
        </attribute>
        <attribute name="SymbolName" mandatory="no">
          <type name="String" />
          <phases>
            <range from="exp" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsExported" />
        <flag name="IsProvided" />
        <flag name="IsLocal" default="TRUE"/>
        <flag name="IsUnique" />
      </flags>
    </node>
<!--

  N_objdef :

-->
    <node name="Objdef">
      <sons>
        <son name="Expr" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="Objdef" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Type" mandatory="yes">
          <type name="NewType" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Ns" mandatory="yes">
          <type name="Namespace" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Name" mandatory="yes">
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="LinkName" default="NULL" mandatory="no">
          <type name="String" />
          <phases>
            <range from="pragma" to="final" />
          </phases>
        </attribute>
        <attribute name="VarName" mandatory="no">
          <type name="String" />
          <phases>
            <!-- <phase name="objdects" /> TODO -->
          </phases>
        </attribute>
        <attribute name="Pragma" mandatory="yes">
          <type name="Node" >
            <target>
              <node name="Pragma" />
            </target>
          </type>
          <phases>
            <range from="sp" to="final" />
          </phases>
        </attribute>
        <attribute name="Arg" mandatory="yes">
          <type name="Link">
            <target>
              <node name="Id" />
            </target>
          </type>
          <phases>
            <phase name="obj" />
          </phases>
        </attribute>
        <attribute name="Icm" mandatory="no">
          <type name="Link">
            <target>
              <node name="Icm" />
            </target>
          </type>
          <phases>
            <range from="comp" to="final" />
          </phases>
        </attribute>
        <attribute name="SymbolName" mandatory="no">
          <type name="String" />
          <phases>
            <range from="exp" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsExported" />
        <flag name="IsProvided" />
        <flag name="IsLocal" default="TRUE"/>
        <flag name="IsExtern" />
      </flags>
    </node>
<!--

  N_fundef :

-->
    <node name="Fundef">
      <sons>
        <son name="Rets" mandatory="no">
          <target>
            <node name="Ret" />
          </target>
        </son>
        <son name="Args" mandatory="no">
          <target>
            <node name="Arg" />
          </target>
        </son>
        <son name="Body" mandatory="yes">
          <target>
            <node name="Block" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="Fundef" />
          </target>
        </son>
        <son name="Objects" default="NULL" mandatory="no" >
          <target>
            <node name="Linklist" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" mandatory="yes">
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Ns" mandatory="yes">
          <type name="Namespace" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="SymbolName" default="NULL" mandatory="no">
          <type name="String" />
          <phases>
            <range from="exp" to="final" />
          </phases>
        </attribute>
        <attribute name="LinkName" default="NULL" mandatory="no">
          <type name="String" />
          <phases>
            <range from="pragma" to="final" />
          </phases>
        </attribute>
        <attribute name="WrapperType" default="NULL" mandatory="yes">
          <type name="NewType" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="FunNo" default="0" mandatory="no">
          <type name="Integer" />
          <phases>
            <!-- <phase name="annotatefuncalls" /> TODO -->
          </phases>
        </attribute>
        <attribute name="Pragma" default="NULL" mandatory="no">
          <type name="Node" >
            <target>
              <node name="Pragma" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Types" mandatory="no" >
          <type name="OldType" />
          <phases>
            <range from="tot" to="final" />
          </phases>
        </attribute>
        <attribute name="Specs" mandatory="no">
          <type name="Integer" />
          <phases>
            <phase name="tc" />
          </phases>
        </attribute>
        <attribute name="Return" mandatory="yes">
          <type name="Link">
            <target>
              <node name="Return" />
            </target>
          </type>
          <phases>
            <range from="tc" to="comp" />
          </phases>
        </attribute>
        <attribute name="Impl" mandatory="no">
          <type name="ExtLink">
            <target>
              <node name="Fundef" />
            </target>
          </type>
          <phases>
            <phase name="tc" />
          </phases>
        </attribute>
	<attribute name="SpecNs" mandatory="no">
	  <type name="Namespace" />
	  <phases>
	    <phase name="tc" />
	  </phases>
	</attribute>
        <attribute name="Icm" mandatory="yes">
          <type name="Node">
            <target>
              <node name="Icm" />
            </target>
          </type>
          <phases>
            <range from="comp" to="final" />
          </phases>
        </attribute>
        <attribute name="VarNo" mandatory="no">
          <type name="Integer" />
          <phases>
            <range from="sacopt" to="final"/>
          </phases>
          <description>
            Deprecated. TODO: This should be eliminated.
          </description>
        </attribute>
        <attribute name="TCStat" mandatory="no">
          <type name="TypeCheckingStatus" />
          <phases>
            <phase name="tc" />
          </phases>
        </attribute>
        <attribute name="DFM_Base" mandatory="no">
          <type name="DFMaskBase" />
          <phases>
          </phases>
        </attribute>
        <attribute name="ArgTab" mandatory="yes">
          <type name="ArgTab" />
          <phases>
            <range from="fpc" to="comp" />
          </phases>
        </attribute>
        <attribute name="LiftedFrom" mandatory="no">
          <description>only for ST_spmdfun</description>
          <type name="Link">
            <target>
              <node name="Fundef" />
            </target>
          </type>
          <phases>
            <range from="spmdlift" to="comp" />
          </phases>
        </attribute>
        <attribute name="Worker" mandatory="no">
          <description>only for ST_spmdfun</description>
          <type name="Link">
            <target>
              <unknown />
            </target>
          </type>
          <phases>
            <unknown />
          </phases>
        </attribute>
        <attribute name="Companion" mandatory="no">
          <description>only for ST_spmdfun</description>
          <type name="Link">
            <target>
              <node name="Fundef" />
            </target>
          </type>
          <phases>
            <range from="repfun" to="final" /> 
		  </phases>
        </attribute>
        <attribute name="ExecMode" mandatory="no">
          <type name="MTExecMode"/>
          <phases>
            <!-- <range from="BuildMultithread" to="crece"/> TODO -->
          </phases>
        </attribute>
        <attribute name="FunGroup" default="NULL" mandatory="yes">
          <type name="Link" >
            <target>
              <node name="Fungroup" />
            </target>
          </type>
          <phases>
            <range from="tc" to="final" />
          </phases>
        </attribute>
        <attribute name="AkvId" default="0" mandatory="yes">
          <description>Identifier for function instances with akv-arguments 
            (used for function naming in renameidentifiers.c)</description>
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="InlineCounter" default="0" mandatory="yes">
          <description>Counter for how many times the function has been recursively
            inlined.</description>
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsExported" />
        <flag name="IsProvided" />
        <flag name="WasImported" />
        <flag name="WasUsed" />
        <flag name="IsLocal" default="TRUE" />
        <flag name="IsNeeded" />
        <flag name="IsFoldfun" />
        <flag name="IsCondfun" />
        <flag name="IsDoFun" />
        <flag name="IsSpmdfun" />
        <flag name="IsWrapperfun" />
        <flag name="IsZombie" />
        <flag name="IsClassConversionFun" />
        <flag name="IsExtern" />
        <flag name="IsInline" />
        <flag name="IsInlineCompleted" />
        <flag name="IsLacInline" />
        <flag name="AllowsInfix" />
        <flag name="HasDotArgs" />
        <flag name="HasDotRets" />
        <flag name="IsSpecialisation" />
        <flag name="WasOptimized" default="TRUE">
          <description>TRUE if function should be accounted for next optimization cycle again</description>
        </flag>
      </flags>
    </node>
<!--

  N_arg :

-->
    <node name="Arg">
      <sons>
        <son name="Avis" mandatory="yes">
		  <target>
			<node name="Avis" />
		  </target>
		</son>
        <son name="Next" mandatory="no">
          <target>
            <node name="Arg" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Type"  default="NULL" mandatory="yes">
          <type name="OldType" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="VarNo" mandatory="yes">
          <type name="Integer" />
          <phases>
            <range from="sacopt" to="final" />
          </phases>
          <description>
            Deprecated. TODO: This should be eliminated.
          </description>
        </attribute>
        <attribute name="TypeString" mandatory="yes">
          <type name="String" />
          <phases>
            <phase name="rid" />
          </phases>
        </attribute>
        <attribute name="Objdef" mandatory="no">
          <type name="Link">
            <target>
              <node name="Objdef" />
            </target>
          </type>
          <phases>
            <!-- <range from="obj-handling" to="precompile" /> TODO -->
          </phases>
          <description>
            Deprecated. TODO: This should be eliminated.
          </description>
        </attribute>
        <attribute name="ActChn" mandatory="no">
          <type name="Link">
            <target>
              <node name="Vinfo" />
            </target>
          </type>
          <phases>
            <phase name="ive" />
          </phases>
        </attribute>
        <attribute name="ColChn" mandatory="no">
          <type name="Link">
            <target>
              <node name="Vinfo" />
            </target>
          </type>
          <phases>
            <phase name="ive" />
          </phases>
        </attribute>
        <attribute name="Fundef" mandatory="no">
          <type name="ExtLink">
            <target>
              <node name="Fundef" />
            </target>
          </type>
          <phases>
            <phase name="ive" />
          </phases>
        </attribute>
	<attribute name="Linksign" mandatory="no" >
	  <type name="Integer" />
	  <phases>
	    <range from="pragma" to="final" />
	  </phases>
	</attribute>
      </attributes>
      <flags>
        <flag name="IsReadonly" />
        <flag name="IsReference" />
        <flag name="WasReference" />
        <flag name="IsArtificial" />
        <flag name="IsPadded" />
        <flag name="IsAliasing" default="TRUE" />
        <flag name="IsRefcounted" default="TRUE" />
        <flag name="HasLinksignInfo" />
	<flag name="IsInUse" default="FALSE" >
	  <description> Used to mark unused function arguments in DeadCodeRemoval. Marked arguments are removed in signature simplification.
	  </description>
        </flag>	  
      </flags>
    </node>
<!--

  N_block :

-->
    <node name="Block">
      <sons>
        <son name="Instr" mandatory="yes">
          <target>
            <node name="Assign" />
            <node name="Empty" />
          </target>
        </son>
        <son name="Vardec" mandatory="no">
          <target>
            <node name="Vardec" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="CacheSim" default="NULL" mandatory="yes">
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="SPMD_Prolog_ICMs" mandatory="yes">
          <type name="Link">
            <target>
              <node name="Fundef" />
            </target>
          </type>
          <phases>
            <phase name="comp" />
          </phases>
        </attribute>
        <attribute name="Scheduler_Init" mandatory="yes">
          <type name="Link">
            <target>
              <node name="Assign" />
            </target>
          </type>
          <phases>
            <phase name="comp" />
          </phases>
        </attribute>
        <attribute name="SSACounter" mandatory="no">
          <type name="Node">
            <target>
              <node name="SSAcnt" />
            </target>
          </type>
          <phases>
            <phase name="ssa" />
            <phase name="ssa2" />
            <phase name="ssawc" />
          </phases>
        </attribute>
        <attribute name="Dataflowgraph" mandatory="no">
          <type name="Node">
            <target>
              <node name="Dataflowgraph" />
            </target>
          </type>
          <phases>
            <range from="cdfg" to="concel" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_vardec :

-->
    <node name="Vardec">
      <sons>
        <son name="Avis" mandatory="yes">
          <target>
            <node name="Avis" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="Vardec" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Type" default="NULL" mandatory="yes">
          <type name="OldType" />
          <phases>
            <range from="tot" to="final" />
          </phases>
        </attribute>
        <attribute name="Objdef" mandatory="no">
          <type name="ExtLink">
            <target>
              <node name="Objdef" />
            </target>
          </type>
          <phases>
            <!-- <range from="inl" to="precompile" /> TODO -->
          </phases>
        </attribute>
        <attribute name="ActChn" mandatory="no">
          <type name="Node">
            <target>
              <node name="Vinfo" />
            </target>
          </type>
          <phases>
            <phase name="ive" />
          </phases>
        </attribute>
        <attribute name="ColChn" mandatory="no">
          <type name="Node">
            <target>
              <node name="Vinfo" />
            </target>
          </type>
          <phases>
            <phase name="ive" />
          </phases>
        </attribute>
        <attribute name="VarNo" mandatory="yes">
          <type name="Integer" />
          <phases>
            <range from="sacopt" to="final" />
          </phases>
          <description>
            Deprecated. TODO: This should be eliminated.
          </description>
        </attribute>
        <attribute name="Icm" mandatory="no">
          <type name="Node">
            <target>
              <node name="Icm" />
            </target>
          </type>
          <phases>
            <range from="comp" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsPadded" />
        <flag name="HasBeenEliminated" >
	  <description>Used in ArrayElimination to mark vardecs that are not used anymore. These are later freed by DCR</description>
	</flag>
      </flags>
    </node>
<!--

  N_assign :

-->
    <node name="Assign">
      <sons>
        <son name="Instr" mandatory="yes">
          <target>
            <set name="Instr" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="Assign" />
          </target>
        </son>
      </sons>
      <attributes>
	<attribute name="ExecMode" mandatory="no">
	  <type name="Integer" />
	  <phases>
	    <!-- <range from="BuildMultithread" to="crece" /> TODO -->
	  </phases>
	</attribute>
	<attribute name="CellId" mandatory="yes">
	  <type name="Integer" />
	  <phases>
	    <range from="asmra" to="crece" />
	  </phases>
	</attribute>
        <attribute name="Visited_With" mandatory="no">
          <type name="Link">
            <target>
              <node name="With" />
            </target>
          </type>
          <phases>
            <phase name="wlf" />
          </phases>
        </attribute>
        <attribute name="Tag" mandatory="no">
          <type name="Link">
            <target>
              <node name="With" />
            </target>
          </type>
          <phases>
            <phase name="wlf" />
          </phases>
        </attribute>
        <attribute name="Dataflownode" mandatory="no">
          <type name="Node">
            <target>
              <node name="Dataflownode" />
            </target>
          </type>
          <phases>
            <range from="cdfg" to="concel" />
          </phases>
        </attribute>
        <attribute name="Index" mandatory="yes">
          <type name="IndexInfo" />
          <phases>
            <phase name="wlf" />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsUnused" />
      </flags>
    </node>
<!--

  N_let :

-->
    <node name="Let">
      <sons>
        <son name="Ids" mandatory="no">
          <target>
            <node name="Ids" />
            <node name="SPIds" />
          </target>
        </son>
        <son name="Expr" mandatory="yes">
	  <target>
	    <set name="Expr" />
	  </target>
	</son>
      </sons>
      <attributes>
        <attribute name="LIRFlag" mandatory="yes">
          <type name="Integer" />
          <phases>
            <phase name="lir" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_cast :

-->
    <node name="Cast">
      <sons>
        <son name="Expr" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="NType" mandatory="yes">
          <type name="NewType" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_return :

-->
    <node name="Return">
      <sons>
        <son name="Exprs" mandatory="yes">
          <target>
            <node name="Exprs" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Reference" mandatory="no">
          <description>List of artificial return values which
            correspond to reference parameters</description>
          <type name="Link">
            <target>
              <set name="Expr" />
            </target>
          </type>
          <phases>
            <!-- <range from="precompile" to="final" /> TODO -->
          </phases>
        </attribute>
        <attribute name="CRet" mandatory="yes">
          <type name="Link">
            <target>
              <set name="Expr" />
            </target>
          </type>
          <phases>
           <!--  <range from="precompile" to="final" /> TODO -->
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_cond :

-->
    <node name="Cond">
      <sons>
        <son name="Cond" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
        <son name="Then" mandatory="yes">
          <target>
            <node name="Block" />
          </target>
        </son>
        <son name="Else" mandatory="yes">
          <target>
            <node name="Block" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="In_Mask" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun" />
            <phase name="lac2fun2" />
          </phases>
        </attribute>
        <attribute name="Out_Mask" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun" />
            <phase name="lac2fun2" />
          </phases>
        </attribute>
        <attribute name="Local_Mask" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun" />
            <phase name="lac2fun2" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_do :

-->
    <node name="Do">
      <sons>
        <son name="Cond" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
        <son name="Body" mandatory="yes">
          <target>
            <node name="Block" />
          </target>
        </son>
        <son name="Skip" mandatory="no" default="NULL" >
          <target>
            <node name="Block" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Label" mandatory="yes">
          <type name="String" />
          <phases>
            <range from="fun2lac2" to="final" />
          </phases>
        </attribute>
        <attribute name="In_Mask" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun" />
            <phase name="lac2fun2" />
          </phases>
        </attribute>
        <attribute name="Out_Mask" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun" />
            <phase name="lac2fun2" />
          </phases>
        </attribute>
        <attribute name="Local_Mask" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun" />
            <phase name="lac2fun2" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_while :

-->
    <node name="While">
      <sons>
        <son name="Cond" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
        <son name="Body" mandatory="yes">
          <target>
            <node name="Block" />
          </target>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_annotate :

-->
    <node name="Annotate">
      <sons></sons>
      <attributes>
        <attribute name="Tag" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="FunNumber" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="FunApNumber" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Fun" default="NULL" mandatory="yes">
          <type name="Link">
	    <target>
	      <node name="Fundef" />
	    </target>
	  </type>
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_ap :

-->
    <node name="Ap">
      <sons>
        <son name="Args" mandatory="no">
          <target>
            <node name="Exprs" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Fundef" mandatory="yes">
          <type name="ExtLink">
            <target>
              <node name="Fundef" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="ArgTab" mandatory="yes">
          <type name="ArgTab" />
          <phases>
            <range from="fpc" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="ConsiderInline" default="TRUE" />
        <flag name="IsRecursiveDoFunCall" default="FALSE" />
      </flags>
    </node>
<!--

  N_mop :

-->
    <node name="SPMop">
      <sons>
        <son name="Ops" mandatory="yes" >
	  <target>
	    <node name="Exprs"/>
	  </target>
	</son>
        <son name="Exprs" mandatory="no">
          <target>
            <node name="Exprs" />
          </target>
        </son>
      </sons>
      <attributes> </attributes>
      <flags>
        <flag name="IsFixed" />
      </flags>
    </node>
<!--

  N_exprs :

-->
    <node name="Exprs">
      <sons>
        <son name="Expr" mandatory="yes">
          <target>
            <set name="Expr" />
            <node name="Exprs" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="Exprs" />
          </target>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_funcond :

-->
    <node name="Funcond">
      <sons>
        <son name="If" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
        <son name="Then" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
        <son name="Else" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_array :

-->
    <node name="Array">
      <sons>
        <son name="AElems" mandatory="no">
          <target>
            <node name="Exprs" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Shape" mandatory="yes">
          <type name="Shape" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="String" default="NULL" mandatory="no">
          <description>In case of constant character arrays defined
            as strings, this attribute holds the original
            definition. TODO: This should be eliminated as soon as possible.
          </description>
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags>
      </flags>
    </node>
<!--

  N_vinfo :

-->
    <node name="Vinfo">
      <sons>
        <son name="Next" mandatory="no">
          <target>
            <node name="Vinfo" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Flag" mandatory="yes">
          <type name="UseFlag" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Shape" mandatory="no">
          <type name="Shape" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Dollar" mandatory="no">
          <type name="Link">
            <target>
              <node name="Vinfo" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Vardec" default="NULL" mandatory="no">
          <type name="Link">
            <target>
              <node name="Vardec" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_id :

-->
    <node name="Id">
      <sons></sons>
      <attributes>
        <attribute name="Avis" mandatory="yes" >
          <type name="Link" >
            <target>
              <node name="Avis" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="WL" mandatory="yes">
          <type name="Link">
            <target>
              <unknown />
            </target>
          </type>
          <phases>
            <phase name="wlf" />
          </phases>
        </attribute>
        <attribute name="ICMtext" default="NULL" mandatory="no">
          <type name="String" />
          <phases>
            <range from="comp" to="final" />
          </phases>
          <description>
            Deprecated. Still used in the compiler backend until major redesign of backend node structure.
          </description>
        </attribute>
        <attribute name="NT_Tag" default="NULL" mandatory="no">
          <type name="String" />
          <phases>
            <range from="comp" to="final" />
          </phases>
          <description>
            Deprecated. Still used in the compiler backend until major redesign of backend node structure.
          </description>
        </attribute>
      </attributes>
      <flags>
      </flags>
    </node>
<!--

  N_num :

-->
    <node name="Num">
      <sons></sons>
      <attributes>
        <attribute name="Val" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_char :

-->
    <node name="Char">
      <sons></sons>
      <attributes>
        <attribute name="Val" mandatory="yes">
          <type name="Char" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_float :

-->
    <node name="Float">
      <sons></sons>
      <attributes>
        <attribute name="Val" mandatory="yes">
          <type name="Float" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_double :

-->
    <node name="Double">
      <sons></sons>
      <attributes>
        <attribute name="Val" mandatory="yes">
          <type name="Double" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_bool :

-->
    <node name="Bool">
      <sons></sons>
      <attributes>
        <attribute name="Val" mandatory="yes">
          <type name="Bool" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_str :

-->
    <node name="Str">
      <sons></sons>
      <attributes>
        <attribute name="String" mandatory="yes">
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_prf :

-->
    <node name="Prf">
      <sons>
        <son name="Args" mandatory="no">
          <target>
            <node name="Exprs" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Prf" mandatory="yes">
          <type name="Prf" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_dot :

-->
    <node name="Dot">
      <sons></sons>
      <attributes>
        <attribute name="Num" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_setwl :

-->
    <node name="SetWL">
      <sons>
        <son name="Vec" mandatory="yes">
          <target>
            <node name="Exprs" />
	    <node name="SPId" />
          </target>
        </son>
        <son name="Expr" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_empty :

-->
    <node name="Empty">
      <sons></sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_icm :

-->
    <node name="Icm">
      <sons>
        <son name="Args" mandatory="no">
          <target>
            <node name="Exprs" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" mandatory="yes">
          <type name="SharedString" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Indent_Before" default="0" mandatory="yes">
          <description>the default value has to be
            fixed!</description>
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Indent_After" default="0" mandatory="yes">
          <description>the default value has to be
          fixed!</description>
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Fundef" mandatory="yes">
          <description>please delete me!</description>
          <type name="Link">
            <target>
              <node name="Fundef" />
            </target>
          </type>
          <phases>
            <range from="comp" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsEndOfStatement" />
      </flags>
    </node>
<!--

  N_pragma :

-->
    <node name="Pragma">
      <sons>
        <son name="ReadOnly" default="NULL" mandatory="no">
	  <target>
	    <node name="Nums" />
	  </target>
	</son>
	<son name="Refcounting" default="NULL" mandatory="no">
	  <target>
	    <node name="Nums" />
	  </target>
	</son>
	<son name="Effect" default="NULL" mandatory="no">
	  <target>
	    <node name="Exprs" />
	  </target>
	</son>
	<son name="Touch" default="NULL" mandatory="no">
	  <target>
	    <node name="Exprs" />
	  </target>
	</son>
	<son name="LinkSign" default="NULL" mandatory="no">
	  <target>
	    <node name="Nums" />
	  </target>
	</son>
      </sons>
      <attributes>
        <attribute name="LinkName" default="NULL" mandatory="no">
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="LinkMod" default="NULL" mandatory="no">
          <type name="StringSet" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="LinkObj" default="NULL" mandatory="no">
          <type name="StringSet" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="WLComp_APS" default="NULL" mandatory="no">
          <type name="Link">
            <target>
              <node name="Exprs" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="APL" default="NULL" mandatory="no">
          <type name="Link">
            <target>
              <node name="Ap" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="NumParams" default="0" mandatory="no">
          <type name="Integer" />
          <phases>
            <all/>
          </phases>
        </attribute>
        <attribute name="InitFun" mandatory="no">
          <type name="String" />
          <phases>
            <!-- <range from="imp" to="readsib" /> TODO -->
          </phases>
        </attribute>
        <attribute name="CopyFun" mandatory="no">
          <type name="String" />
          <phases>
            <!-- <range from="import" to="readsib" /> TODO -->
          </phases>
        </attribute>
        <attribute name="FreeFun" mandatory="no">
          <type name="String" />
          <phases>
            <!-- <range from="import" to="readsib" /> TODO -->
          </phases>
        </attribute>
       </attributes>
      <flags></flags>
    </node>
<!--

  N_cseinfo :

-->
    <node name="CSEinfo">
      <description>This node is not located in the AST, it is only
      used internally by CSE.</description>
      <sons>
        <son name="Next" mandatory="no">
          <target>
            <node name="CSEinfo" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Layer" mandatory="yes">
          <type name="Link">
            <target>
              <node name="CSEinfo" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Let" mandatory="yes">
          <type name="Link">
            <target>
              <node name="Let" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_ssacnt :

-->
    <node name="SSAcnt">
      <sons>
        <son name="Next" mandatory="no">
          <target>
            <node name="SSAcnt" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Count" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="BaseId" mandatory="yes">
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_ssastack :

-->
    <node name="SSAstack">
      <sons>
        <son name="Next" mandatory="no">
          <target>
            <node name="SSAstack" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Avis" mandatory="yes">
          <type name="Link">
            <target>
              <node name="Avis" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="InUse" />
      </flags>
    </node>
<!--

  N_avis :

-->
    <node name="Avis">
      <sons></sons>
      <attributes>
        <attribute name="Decl" default="NULL" mandatory="yes">
          <type name="Link">
            <target>
              <node name="Vardec" />
              <node name="Arg" />
              <node name="Objdef" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Name" mandatory="yes">
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Type" mandatory="no">
          <type name="NewType" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="SSACount" mandatory="no">
          <type name="Link">
            <target>
              <node name="SSAcnt" />
            </target>
          </type>
          <phases>
            <phase name="ssa" />
            <phase name="ssa2" />
            <phase name="ssawc" />
          </phases>
        </attribute>
        <attribute name="SSAAssign" mandatory="yes">
          <type name="Link">
            <target>
              <node name="Assign" />
            </target>
          </type>
          <phases>
            <range from="ssa" to="ussa" />
            <range from="ssa2" to="ussa2" />
          </phases>
        </attribute>
        <attribute name="SSAstack" mandatory="no">
          <type name="Node">
            <target>
              <node name="SSAstack" />
            </target>
          </type>
          <phases>
            <phase name="ssa" />
            <phase name="ssa2" />
            <phase name="ssawc" />
          </phases>
        </attribute>
        <attribute name="UseChn" mandatory="no">
          <type name="Node">
            <target>
              <node name="Vinfo" />
            </target>
          </type>
          <phases>
            <range from="ivei" to="ive" />
          </phases>
        </attribute>
        <attribute name="SSAThen" mandatory="no">
          <type name="Link">
            <target>
              <node name="Avis" />
            </target>
          </type>
          <phases>
            <phase name="ssa" />
            <phase name="ssa2" />
            <phase name="ssawc" />
          </phases>
        </attribute>
        <attribute name="SSAElse" mandatory="no">
          <type name="Link">
            <target>
              <node name="Avis" />
            </target>
          </type>
          <phases>
            <phase name="ssa" />
            <phase name="ssa2" />
            <phase name="ssawc" />
          </phases>
        </attribute>
        <attribute name="NeedCount" mandatory="no">
          <type name="Integer" />
          <phases>
            <phase name="lir" />
          </phases>
        </attribute>
        <attribute name="Subst" mandatory="no">
          <type name="Link">
            <target>
              <node name="Avis" />
            </target>
          </type>
          <phases>
            <phase name="cse" />
            <phase name="lir" />
            <phase name="ussa" />
            <phase name="ussa2" />
          </phases>
        </attribute>
        <attribute name="DefDepth" mandatory="no">
          <type name="Integer" />
          <phases>
            <phase name="lir" />
          </phases>
        </attribute>
        <attribute name="LirMove" mandatory="no">
          <type name="BitField" />
          <phases>
            <phase name="lir" />
          </phases>
        </attribute>
        <attribute name="ExpResult" mandatory="no">
          <type name="Bool" />
          <phases>
            <phase name="lir" />
          </phases>
        </attribute>
        <attribute name="AliasMask" mandatory="no">
          <type name="DFMask" />
          <phases>
            <phase name="ia" />
          </phases>
          <description>
            Used by by Interface Analsysis in order to obtain the transitive hull of variable aliases.
          </description>
        </attribute>
      </attributes>
      <flags>
        <flag name="SSAUndoFLag" />
        <flag name="SSADefined" />
        <flag name="SSALPINV" />
        <flag name="IsAlias" default="TRUE" >
          <description>
            Set by the Alias Analysis traversel, AVIS_ISALIAS denotes whether there can be more than one identifier for a given data object.
          </description>
        </flag>
        <flag name="IsUnique" />
        <flag name="IsDead" >
          <description>
            Used by MarkMemVals traversal in order to indicate which VARDECS are no longer needed and can thus be eliminated.
          </description>
        </flag>
      </flags>
    </node>
<!--

  N_spmd :

-->
    <node name="Spmd">
      <sons>
        <son name="Region" mandatory="yes">
          <target>
            <node name="Block" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="In" default="NULL" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Out" default="NULL" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="InOut" default="NULL" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Local" default="NULL" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Shared" default="NULL" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Fundef" default="NULL" mandatory="yes">
          <type name="ExtLink">
            <target>
              <node name="Fundef" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="ICM_Begin" mandatory="yes">
          <type name="Node">
            <target>
              <node name="Icm" />
            </target>
          </type>
          <phases>
            <range from="comp" to="final" />
          </phases>
        </attribute>
        <attribute name="ICM_Parallel" mandatory="yes">
          <type name="Node">
            <target>
              <node name="Block" />
            </target>
          </type>
          <phases>
            <range from="comp" to="final" />
          </phases>
        </attribute>
        <attribute name="ICM_AltSeq" mandatory="yes">
          <type name="Node">
            <target>
              <node name="Icm" />
            </target>
          </type>
          <phases>
            <range from="comp" to="final" />
          </phases>
        </attribute>
        <attribute name="ICM_Sequential" mandatory="yes">
          <type name="Node">
            <target>
              <node name="Block" />
            </target>
          </type>
          <phases>
            <range from="comp" to="final" />
          </phases>
        </attribute>
        <attribute name="ICM_End" mandatory="yes">
          <type name="Node">
            <target>
              <node name="Icm" />
            </target>
          </type>
          <phases>
            <range from="comp" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_sync :

-->
    <node name="Sync">
      <sons>
        <son name="Region" mandatory="yes">
          <target>
            <node name="Block" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="FoldCount" default="0" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="In" default="NULL" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Out" default="NULL" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="InOut" default="NULL" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="OutRep" default="NULL" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Local" default="NULL" mandatory="yes">
          <type name="DFMask" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags>
         <flag name="First">
          <description>Flag whether the sync-region is the first
          one of the current SMPD-region</description>
         </flag>
         <flag name="Last">
          <description>Flag whether the sync-region is the last one
          of the current SMPD-region</description>
        </flag>
      </flags>
    </node>
<!--

  N_mt :

-->
    <node name="MT">
      <sons>
        <son name="Region" mandatory="yes">
          <target>
            <node name="Block" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Fundef" mandatory="yes">
          <type name="ExtLink">
            <target>
              <node name="Fundef" />
            </target>
          </type>
          <phases>
            <unknown />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_ex :

-->
    <node name="EX">
      <sons>
        <son name="Region" mandatory="yes">
          <target>
            <node name="Block" />
          </target>
        </son>
      </sons>
      <attributes>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_st :

-->
    <node name="ST">
      <sons>
        <son name="Region" mandatory="yes">
          <target>
            <node name="Block" />
          </target>
        </son>
      </sons>
      <attributes>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_with :

-->
    <node name="With">
      <sons>
        <son name="Part" mandatory="yes">
          <target>
            <node name="Part" />
          </target>
        </son>
        <son name="Code" mandatory="yes">
          <target>
            <node name="Code" />
          </target>
        </son>
        <son name="WithOp" mandatory="yes">
          <target>
            <set name="WithOp" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Parts" default="-1" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Pragma" mandatory="yes">
          <type name="Node" >
            <target>
              <node name="Pragma" />
            </target>
          </type>
          <phases>
            <range from="sp" to="wltra" />
          </phases>
        </attribute>
        <attribute name="In_Mask" mandatory="no">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun"/>
          </phases>
        </attribute>
        <attribute name="Out_Mask" mandatory="no">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun"/>
          </phases>
        </attribute>
        <attribute name="Local_Mask" mandatory="no">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun"/>
          </phases>
        </attribute>
        <attribute name="Referenced" mandatory="yes">
          <type name="Integer" />
          <phases>
            <phase name="wlf" />
          </phases>
        </attribute>
        <attribute name="Referenced_Fold" mandatory="yes">
          <type name="Integer" />
          <phases>
            <phase name="wlf" />
          </phases>
        </attribute>
        <attribute name="References_Folded" mandatory="yes">
          <type name="Integer" />
          <phases>
            <phase name="wlf" />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsFoldable" />
	<flag name="IsDependent" />
      </flags>
    </node>
<!--

  N_part :

-->
    <node name="Part">
      <sons>
        <son name="WithId" mandatory="yes">
          <target>
            <node name="Withid" />
          </target>
        </son>
        <son name="Generator" mandatory="yes">
          <target>
            <node name="Generator" />
            <node name="Default" />
          </target>
        </son>
        <son name="Next" default="NULL" mandatory="no">
          <target>
            <node name="Part" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Code" mandatory="yes">
          <description>if present, the used counter for the code
          needs to be increased</description>
          <type name="CodeLink">
            <target>
              <node name="Code" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsCopy" />
      </flags>
    </node>
<!--

  N_withid :

-->
    <node name="Withid">
      <sons>
        <son name="Vec" mandatory="yes">
	  <target>
	    <node name="Ids" />
	    <node name="SPIds" />
            <node name="Id" />
	  </target>
          <description>After explicit allocation (EMAL), Vec points to an N_id node.</description>
	</son>
        <son name="Ids" mandatory="no">
	  <target>
	    <node name="Ids" />
	    <node name="SPIds" />
            <node name="Exprs" />
	  </target>
          <description>After explicit allocation (EMAL), Ids points to an N_exprs-list of N_id nodes.
          </description>
	</son>
      </sons>
      <attributes>
      </attributes>
      <flags>
        <flag name="VecNeeded" />
      </flags>
    </node>
<!--

  N_generator :

-->
    <node name="Generator">
      <sons>
        <son name="Bound1" mandatory="yes">
          <target>
            <set name="Expr" />
	    <node name="Dot" />
          </target>
        </son>
        <son name="Bound2" mandatory="yes">
          <target>
            <set name="Expr" />
	    <node name="Dot" />
          </target>
        </son>
        <son name="Step" mandatory="no">
          <target>
            <set name="Expr" />
          </target>
        </son>
        <son name="Width" mandatory="no">
          <target>
            <set name="Expr" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Op1" mandatory="yes">
          <type name="Prf" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Op2" mandatory="yes">
          <type name="Prf" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Op1_Orig" default="Op1" mandatory="yes">
          <type name="Prf" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Op2_Orig" default="Op2" mandatory="yes">
          <type name="Prf" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_default :

-->
    <node name="Default">
      <sons></sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_code :

-->
    <node name="Code">
      <sons>
        <son name="CBlock" mandatory="no">
          <target>
            <node name="Block" />
          </target>
        </son>
        <son name="CExprs" mandatory="yes">
          <target>
            <node name="Exprs" />
          </target>
        </son>
        <son name="Next" default="NULL" mandatory="no">
          <target>
            <node name="Code" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Used" default="0" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Id" mandatory="no">
          <type name="Integer" />
          <phases>
            <phase name="final" /> <!-- TODO misc phase? -->
          </phases>
        </attribute>
        <attribute name="Use" mandatory="no">
          <type name="Link">
            <target>
              <node name="Vinfo" />
            </target>
          </type>
          <phases>
            <phase name="ive" />
          </phases>
        </attribute>
        <attribute name="WLAA_Info" mandatory="yes">
          <type name="AccessInfo" />
          <phases>
            <range from="wlaa" to="final" />
          </phases>
        </attribute>
        <attribute name="TSI_TileShp" mandatory="no">
          <type name="ShpSeg" />
          <phases>
            <range from="tsi" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="Visited" />
        <flag name="HasResolveableDependencies" />
	<flag name="IsDummyCode" />
      </flags>
    </node>
<!--

  N_with2 :

-->
    <node name="With2">
      <sons>
        <son name="WithId" mandatory="yes">
          <target>
            <node name="Withid" />
          </target>
        </son>
        <son name="Segs" mandatory="yes">
          <target>
            <node name="WLseg" />
            <node name="WLsegVar" />
          </target>
        </son>
        <son name="Code" mandatory="yes">
          <target>
            <node name="Code" />
          </target>
        </son>
        <son name="WithOp" mandatory="yes">
          <target>
            <set name="WithOp" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Dims" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Pragma" default="NULL" mandatory="yes">
          <type name="Node" >
            <target>
              <node name="Pragma" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="In_Mask" mandatory="no">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun"/>
          </phases>
        </attribute>
        <attribute name="Out_Mask" mandatory="no">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun"/>
          </phases>
        </attribute>
        <attribute name="Local_Mask" mandatory="no">
          <type name="DFMask" />
          <phases>
            <phase name="lac2fun"/>
          </phases>
        </attribute>
        <attribute name="ReUse" mandatory="no">
          <type name="DFMask" />
          <phases>
            <phase name="rci" />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="MT" />
	<flag name="NeedsOffset" />
	<flag name="CalcParallel" />
      </flags>
    </node>
<!--

  N_genarray :

-->
    <node name="Genarray">
      <description>withloop operation</description>
      <sons>
        <son name="Shape" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
        <son name="Default" mandatory="no">
          <target>
            <set name="Expr" />
          </target>
        </son>
        <son name="Mem" default="NULL" mandatory="no">
          <target>
            <node name="Id" />
          </target>
        </son>
        <son name="Next" default="NULL" mandatory="no">
          <target>
            <set name="WithOp" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="SPEXPR" mandatory="yes">
          <type name="Link">
          </type>
          <phases>
            <phase name="sp" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_modarray :

-->
    <node name="Modarray">
      <description>withloop operation</description>
      <sons>
        <son name="Array" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
        <son name="Mem" default="NULL" mandatory="no">
          <target>
            <node name="Id" />
          </target>
        </son>
        <son name="Next" default="NULL" mandatory="no">
          <target>
            <set name="WithOp" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="SPEXPR" mandatory="yes">
          <type name="Link">
          </type>
          <phases>
            <phase name="sp" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_fold :

-->
    <node name="Fold">
      <description>withloop operation</description>
      <sons>
        <son name="Neutral" mandatory="yes">
          <target>
            <set name="Expr" />
          </target>
        </son>
        <son name="Next" default="NULL" mandatory="no">
          <target>
            <set name="WithOp" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Fun" default="NULL" mandatory="yes">
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Ns" default="NULL" mandatory="yes">
          <type name="Namespace" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Prf" default="0" mandatory="yes">
          <type name="Prf" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Fundef" mandatory="yes">
          <type name="ExtLink">
            <target>
              <node name="Fundef" />
            </target>
          </type>
          <phases>
            <range from="tc" to="final" />
          </phases>
        </attribute>
        <attribute name="SPEXPR" mandatory="yes">
          <type name="Link">
          </type>
          <phases>
            <phase name="sp" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_wlseg :

-->
    <node name="WLseg">
      <sons>
        <son name="Contents" mandatory="yes">
          <target>
            <node name="WLblock" />
            <node name="WLublock" />
            <node name="WLstride" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="WLseg" />
            <node name="WLsegVar" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Dims" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Idx_Min" default="NULL" mandatory="yes">
          <type name="IntegerPointer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Idx_Max" default="NULL" mandatory="yes">
          <type name="IntegerPointer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="UBV" default="NULL" mandatory="yes">
          <type name="IntegerPointer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Blocks" default="0" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="BV" default="NULL" mandatory="yes">
          <type name="IntegerPointerArray" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="SV" default="NULL" mandatory="yes">
          <type name="IntegerPointer" />
          <phases>
            <range from="wltra" to="final" />
          </phases>
        </attribute>
        <attribute name="HomSV" mandatory="yes">
          <type name="IntegerPointer" />
          <phases>
            <range from="wltra" to="final" />
          </phases>
        </attribute>
        <attribute name="Scheduling" mandatory="yes">
          <type name="Scheduling" />
          <phases>
            <range from="wltra" to="final" />
          </phases>
        </attribute>
        <attribute name="TaskSel" mandatory="yes">
          <type name="TaskSel" />
          <phases>
            <range from="wltra" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_wlsegvar :

-->
    <node name="WLsegVar">
      <sons>
        <son name="Contents" mandatory="yes">
          <target>
            <node name="WLstride" />
            <node name="WLstrideVar" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="WLseg" />
            <node name="WLsegVar" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Dims" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Idx_Min" default="NULL" mandatory="yes">
          <type name="NodePointer">
            <description>wird bei der correct-type function ausgelassen, da nicht klar war, wie mit dem Arraytyp umgegangen werden soll </description>
            <target>
              <node name="Num" />
              <node name="Id" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Idx_Max" default="NULL" mandatory="yes">
          <type name="NodePointer">
            <description>wird bei der correct-type function ausgelassen, da nicht klar war, wie mit dem Arraytyp umgegangen werden soll</description>
            <target>
              <node name="Num" />
              <node name="Id" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Scheduling" mandatory="yes">
          <type name="Scheduling" />
          <phases>
            <range from="wltra" to="final" />
          </phases>
        </attribute>
        <attribute name="TaskSel" mandatory="yes">
          <type name="TaskSel" />
          <phases>
            <range from="wltra" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_wlblock :

-->
    <node name="WLblock">
      <sons>
        <son name="NextDim" mandatory="no">
          <target>
            <node name="WLblock" />
          </target>
        </son>
        <son name="Contents" mandatory="no">
          <target>
            <node name="WLublock" />
            <node name="WLstride" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="WLblock" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Dim" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Bound1" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Bound2" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Step" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_wlublock :

-->
    <node name="WLublock">
      <sons>
        <son name="NextDim" mandatory="no">
          <target>
            <node name="WLublock" />
          </target>
        </son>
        <son name="Contents" mandatory="no">
          <target>
            <node name="WLstride" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="WLublock" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Dim" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Bound1" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Bound2" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Step" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_wlstride :

-->
    <node name="WLstride">
      <sons>
        <son name="Contents" mandatory="yes">
          <target>
            <node name="WLgrid" />
            <node name="WLgridVar" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="WLstride" />
            <node name="WLstrideVar" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Dim" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Bound1" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Bound2" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Step" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Part" mandatory="yes">
          <type name="Link">
            <target>
              <node name="Part" />
            </target>
          </type>
          <phases>
            <range from="wltra" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="DoUnroll" />
        <flag name="IsModified">
          <description>
            Used in wltransform.
          </description>
        </flag>
      </flags>
    </node>
<!--

  N_wlstridevar :

-->
    <node name="WLstrideVar">
      <sons>
        <son name="Bound1" mandatory="yes">
          <target>
            <node name="Num" />
            <node name="Id" />
          </target>
        </son>
        <son name="Bound2" mandatory="yes">
          <target>
            <node name="Num" />
            <node name="Id" />
          </target>
        </son>
        <son name="Step" mandatory="yes">
          <target>
            <node name="Num" />
            <node name="Id" />
          </target>
        </son>
        <son name="Contents" mandatory="yes">
          <target>
            <node name="WLgrid" />
            <node name="WLgridVar" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="WLstride" />
            <node name="WLstrideVar" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Dim" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_wlgrid :

-->
    <node name="WLgrid">
      <sons>
        <son name="NextDim" mandatory="no">
          <target>
            <node name="WLblock" />
            <node name="WLublock" />
            <node name="WLstride" />
            <node name="WLstrideVar" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="WLgrid" />
            <node name="WLgridVar" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Dim" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Bound1" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Bound2" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Code" mandatory="no">
          <type name="Link">
            <target>
              <node name="Code" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsFitted" />
        <flag name="DoUnroll" />
        <flag name="IsNoOp" />
        <flag name="IsModified">
          <description>
            Used in wltransform.
          </description>
        </flag>
      </flags>
    </node>
<!--

  N_wlgridvar :

-->
    <node name="WLgridVar">
      <sons>
        <son name="Bound1" mandatory="yes">
          <target>
            <node name="Num" />
            <node name="Id" />
          </target>
        </son>
        <son name="Bound2" mandatory="yes">
          <target>
            <node name="Num" />
            <node name="Id" />
          </target>
        </son>
        <son name="NextDim" mandatory="no">
          <target>
            <node name="WLstride" />
            <node name="WLstrideVar" />
          </target>
        </son>
        <son name="Next" mandatory="no">
          <target>
            <node name="WLgrid" />
            <node name="WLgridVar" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Dim" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Code" mandatory="no">
	  <type name="Link">
            <target>
              <node name="Code" />
            </target>
	  </type>
	  <phases>
	    <all />
	  </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsFitted" />
        <flag name="DoUnroll" />
        <flag name="IsNoOp" />
      </flags>
    </node>
<!--

  N_cwrapper :

-->
    <node name="CWrapper">
      <sons>
        <son name="Next" mandatory="no">
          <target>
            <node name="CWrapper" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Funs" mandatory="yes">
          <type name="NodeList" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Name" mandatory="yes">
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Ns" mandatory="yes">
          <type name="Namespace" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="ArgCount" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="ResCount" mandatory="yes">
          <type name="Integer" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_dataflownode :

-->
    <node name="Dataflownode">
      <sons></sons>
      <attributes>
	<attribute name="Graph" mandatory="yes">
	  <type name="Link">
	    <target>
	      <node name="Dataflowgraph"/>
	    </target>
	  </type>
	  <phases>
	    <all />
	  </phases>
	</attribute>
	<attribute name="Assign" mandatory="no">
	  <type name="Link">
	    <target>
	      <node name="Assign" />
	    </target>
	  </type>
	  <phases>
	    <all />
	  </phases>
	</attribute>
	<attribute name="Name" mandatory="no">
	  <type name="String" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
        <attribute name="Dependent" default="NULL" mandatory="no">
	  <type name="NodeList" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
        <attribute name="UsedNodes" default="NULL" mandatory="no">
	  <type name="NodeList" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
	<attribute name="RefCount" default="1" mandatory="yes">
	  <type name="Integer" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
	<attribute name="ExecMode" default="MUTH_ANY" mandatory="yes">
	  <type name="MTExecMode" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
	<attribute name="DFGThen" default="NULL" mandatory="no">
	  <type name="Link">
	    <target>
	      <node name="Block" />
	    </target>
	  </type>
	  <phases>
	    <all />
	  </phases>
	</attribute>
	<attribute name="DFGElse" default="NULL" mandatory="no">
	  <type name="Link">
	    <target>
	      <node name="Block" />
	    </target>
	  </type>
	  <phases>
	    <all />
	  </phases>
	</attribute>
	<attribute name="RefLeft" mandatory="yes">
	  <type name="Integer" />
	  <phases>
	    <phase name="AssignmentsRearrange" />
	  </phases>
	</attribute>
      </attributes>
      <flags>
        <flag name="IsUsed" />
      </flags>
    </node>
<!--

  N_dataflowgraph :

-->
    <node name="Dataflowgraph">
      <sons></sons>
      <attributes>
        <attribute name="Members" default="NULL" mandatory="yes">
	  <type name="NodeList" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
	<attribute name="Source" default="NULL" mandatory="yes">
	  <type name="Node">
	    <target>
	      <node name="Dataflownode"/>
	    </target>
	  </type>
	  <phases>
	    <all />
	  </phases>
	</attribute>
	<attribute name="Sink" default="NULL" mandatory="yes">
	  <type name="Node">
	    <target>
	      <node name="Dataflownode"/>
	    </target>
	  </type>
	  <phases>
	    <all />
	  </phases>
	</attribute>
	<attribute name="MyHomeDFN" default="NULL" mandatory="no">
	  <type name="Node">
	    <target>
	      <node name="Dataflownode"/>
	    </target>
	  </type>
	  <phases>
	    <all />
	  </phases>
	</attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_import :

-->
    <node name="Import">
      <sons>
        <son name="Next" mandatory="no">
	  <target>
	    <set name="Interface" />
	  </target>
	</son>
	<son name="Symbol" mandatory="no">
	  <target>
	    <node name="Symbol" />
	  </target>
	</son>
      </sons>
      <attributes>
        <attribute name="Mod" mandatory="yes">
	  <type name="String" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_export :

-->
    <node name="Export">
      <sons>
        <son name="Next" mandatory="no">
	  <target>
	    <set name="Interface" />
	  </target>
	</son>
	<son name="Symbol" mandatory="no">
	  <target>
	    <node name="Symbol" />
	  </target>
	</son>
      </sons>
      <attributes>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_use :

-->
    <node name="Use">
      <sons>
        <son name="Next" mandatory="no">
	  <target>
	    <set name="Interface" />
	  </target>
	</son>
	<son name="Symbol" mandatory="no">
	  <target>
	    <node name="Symbol" />
	  </target>
	</son>
      </sons>
      <attributes>
        <attribute name="Mod" mandatory="yes">
	  <type name="String" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_provide :

-->
    <node name="Provide">
      <sons>
        <son name="Next" mandatory="no">
	  <target>
	    <set name="Interface" />
	  </target>
	</son>
	<son name="Symbol" mandatory="no">
	  <target>
	    <node name="Symbol" />
	  </target>
	</son>
      </sons>
      <attributes>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_symbol :

-->
    <node name="Symbol">
      <sons>
        <son name="Next" mandatory="no">
	  <target>
	    <node name="Symbol" />
	  </target>
	</son>
      </sons>
      <attributes>
        <attribute name="Id" mandatory="yes">
	  <type name="String" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_linklist :

-->
    <node name="Linklist">
      <sons>
        <son name="Next" mandatory="no">
          <target>
            <node name="Linklist" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Link" mandatory="yes" >
          <type name="ExtLink" >
            <target>
              <node name="Objdef" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_ret :

-->
    <node name="Ret">
      <sons>
        <son name="Next" mandatory="no">
	  <target>
	    <node name="Ret" />
	  </target>
	</son>
      </sons>
      <attributes>
        <attribute name="Type" mandatory="yes">
	  <type name="NewType" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
        <attribute name="CorrespondingArg" mandatory="no" default="NULL">
	  <type name="Link" >
            <target>
              <node name="Arg" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Linksign" mandatory="no" >
          <type name="Integer" />
          <phases>
            <range from="pragma" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsAliasing" default="TRUE" />
        <flag name="IsArtificial" />
        <flag name="IsRefcounted" default="TRUE" />
        <flag name="HasLinksignInfo" />
        <flag name="IsCReturn" />
        <flag name="WasRemoved" default="FALSE" />
      </flags>
    </node>
<!--

  N_ids :

-->
    <node name="Ids">
      <sons>
        <son name="Next" mandatory="no">
          <target>
            <node name="Ids" />
          </target>
        </son>
      </sons>
      <attributes>
        <attribute name="Avis" mandatory="yes" >
          <type name="Link">
            <target>
              <node name="Avis" />
            </target>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Use" mandatory="yes" >
          <type name="Link">
            <target>
              <node name="Vinfo" />
            </target>
          </type>
          <phases>
            <phase name="ive" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_nums :

-->
    <node name="Nums">
      <sons>
        <son name="Next" mandatory="no">
	  <target>
	    <node name="Nums" />
	  </target>
	</son>
      </sons>
      <attributes>
        <attribute name="Val" mandatory="yes">
	  <type name="Integer" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
      </attributes>
      <flags>
      </flags>
    </node>
<!--

  N_globobj :

-->
    <node name="Globobj">
      <sons>
      </sons>
      <attributes>
        <attribute name="Objdef" mandatory="yes">
	  <type name="ExtLink" >
            <target>
              <node name="Objdef" />
            </target>
          </type>
	  <phases>
	    <all />
	  </phases>
	</attribute>
      </attributes>
      <flags>
      </flags>
    </node>
<!--

  N_spid :

-->
    <node name="SPId">
      <sons></sons>
      <attributes>
        <attribute name="Ns" mandatory="no">
	  <type name="Namespace" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
        <attribute name="Name" mandatory="yes">
	  <type name="String" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_spids :

-->
    <node name="SPIds">
      <sons>
        <son name="Next" mandatory="no">
	  <target>
	    <node name="SPIds" />
	  </target>
	</son>
      </sons>
      <attributes>
        <attribute name="Name" mandatory="yes">
	  <type name="String" />
	  <phases>
	    <all />
	  </phases>
	</attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_spap :

-->
    <node name="SPAp">
      <sons>
        <son name="Id" mandatory="yes" >
	  <target>
	    <node name="SPId" />
	  </target>
	</son>
        <son name="Args" mandatory="no">
          <target>
            <node name="Exprs" />
          </target>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_error :

-->
    <node name="Error">
      <sons>
		<son name="Next" mandatory="no" >
          <target>
            <node name="Error" />
          </target>
		</son>
      </sons>
      <attributes>
        <attribute name="message" mandatory="yes">
          <type name="String" />
          <phases>
            <all />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>

<!--

  N_fungroup :

-->
    <node name="Fungroup">
      <sons></sons>
      <attributes>
        <attribute name="Funlist" mandatory="yes">
          <description>Pointerlist to all function instances</description>
          <type name="Link">
            <target>
              <node name="Linklist" />
            </target>
          </type>
          <phases>
            <range from="tc" to="final" />
          </phases>
        </attribute>
        <attribute name="SpecCounter" default="0" mandatory="yes">
          <description>Number of specialized function instances</description>
          <type name="Integer" />
          <phases>
            <range from="tc" to="final" />
          </phases>
        </attribute>
        <attribute name="RefCounter" default="0" mandatory="yes">
          <description>Number of all (known) function instances</description>
          <type name="Integer" />
          <phases>
            <range from="tc" to="final" />
          </phases>
        </attribute>
        <attribute name="InlCounter" default="0" mandatory="yes" >
          <description>Number of inlined function instances</description>
          <type name="Integer" />
          <phases>
            <range from="tc" to="final" />
          </phases>
        </attribute>
        <attribute name="AkvCounter" default="0" mandatory="yes" >
          <description>
            Used in type_upgrade for counting created function instances with
            AKV-arguments
          </description>
          <type name="Integer" />
          <phases>
            <range from="tc" to="final" />
          </phases>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
  </syntaxtree>
</definition>
<!-- Keep this comment at the end of the file
Local variables:
mode: xml
sgml-omittag:nil
sgml-shorttag:nil
sgml-namecase-general:nil
sgml-general-insert-case:lower
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:2
sgml-indent-data:t
sgml-parent-document:nil
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
