<?xml version="1.0"?>

<!--
  $Log$
  Revision 1.4  2005/01/21 13:45:48  jhb
  some little things

  Revision 1.3  2005/01/18 14:08:52  jhb
  added enums and fix some bugs

  Revision 1.2  2005/01/11 13:32:08  jhb
  changed some little things

  Revision 1.1  2004/11/23 11:29:56  sah
  Initial revision

  Revision 1.1  2004/11/19 13:54:26  jhb
  Initial revision

  Revision 1.1 2004/09/29 15:15:00 jhb
  Initial revision
-->

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
version="1.0">

  <xsl:output method="text" indent="no"/>
  <xsl:strip-space elements="*"/>

  <!-- This stylesheet generates a check.c file implementing all functions
 needed to check a node -->

 <xsl:variable name="newline">
<xsl:text>
</xsl:text>
 </xsl:variable>

<xsl:param name="nodeup"/>
<xsl:param name="nodelo"/>
<xsl:param name="sonatt"/>

<xsl:template match="/">

  <xsl:text>
/**
 * @file check.c
 *
 * Functions needed by free traversal.
 * 
 * THIS FILE HAS BEEN GENERATED USING 
 * $Id$.
 * DO NOT EDIT THIS FILE. EDIT THE AST SPEC IN ast.xml INSTEAD!
 *
 * ALL CHANGES MADE TO THIS FILE WILL BE OVERWRITTEN!
 *
 */

#define NEW_INFO
#include "globals.h"
#include "tree_basic.h"
#include "traverse.h"
#include "dbug.h"
#include "print.h"
#include "check_lib.h"
#include "check.h"
#include "types.h"


struct INFO
{
};

static info *MakeInfo()
{
  info *result;

  DBUG_ENTER("MakeInfo");

  result = ILIDmalloc(sizeof(info));

  DBUG_RETURN(result);
} 

static info *FreeInfo(info *info)
{
  DBUG_ENTER("FreeInfo");

  info = ILIBfree(info);

  DBUG_RETURN(info);
}

</xsl:text>

  <xsl:value-of select="$newline"/>
  <xsl:apply-templates select="//syntaxtree/node" mode="function">
    <xsl:sort select="@name"/>
  </xsl:apply-templates>
  <xsl:value-of select="$newline"/>
  <!--
  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'enum{ '"/> 
  <xsl:apply-templates select="//syntaxtree/node" mode="enum_node">
    <xsl:sort select="@name"/>
  </xsl:apply-templates>
  <xsl:value-of select="'}; '"/>
  <xsl:value-of select="$newline"/>

  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'enum{ '"/> 
  <xsl:apply-templates select="//syntaxtree/node/sons/son" mode="enum_son">
    <xsl:sort select="@name"/>
  </xsl:apply-templates>
  <xsl:value-of select="'}; '"/>
  <xsl:value-of select="$newline"/>

  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'enum{ '"/> 
  <xsl:apply-templates select="//syntaxtree/node/attributes/attribute" 
                       mode="enum_attribute">
    <xsl:sort select="@name"/>
  </xsl:apply-templates>
  <xsl:value-of select="'}; '"/>
  <xsl:value-of select="$newline"/>
-->

  </xsl:template>


<xsl:template match="node" mode="function">
   
  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'node *CHK'"/>
  <xsl:apply-templates select="@name" mode="lowercase"/>
  <xsl:value-of select="'( node *arg_node, info *arg_info)'"/>
  <xsl:value-of select="$newline"/>   
  <xsl:value-of select="'{'"/>
  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'  DBUG_ENTER'"/>
  <xsl:value-of select="'( &quot;CHK'"/>
  <xsl:apply-templates select="@name" mode="lowercase"/>
  <xsl:value-of select="'&quot;);'"/>
  <xsl:value-of select="$newline"/>
  
  <xsl:apply-templates select="./sons/son" mode="check">
  <xsl:sort select="@name"/>
  </xsl:apply-templates>

  <xsl:apply-templates select="./attributes/attribute">
    <xsl:sort select="@name"/>
  </xsl:apply-templates>

  <xsl:apply-templates select="./sons/son" mode="trav">
  <xsl:sort select="@name"/>
  </xsl:apply-templates>

  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'  DBUG_RETURN( arg_node);'"/>
  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'}'"/>
  <xsl:value-of select="$newline"/>

</xsl:template>



<xsl:template match="node" mode="enum_node">


  <xsl:value-of select="@name"/>
  <xsl:value-of select="', '"/>
   
</xsl:template>


<xsl:template match="node" mode="enum_son">

  <xsl:value-of select="@name"/>
  <xsl:value-of select="', '"/>
   
</xsl:template>


<xsl:template match="node" mode="enum_attribute">

  <xsl:value-of select="@name"/>
  <xsl:value-of select="', '"/>
   
</xsl:template>





<!-- ckeck the sons -->
<xsl:template match="son" mode="check">

  <xsl:if test="string-length(@mandatory) &gt; 2">
   <xsl:value-of select="$newline"/>
   <xsl:value-of select="'  // this son is mandatory = '"/>
   <xsl:value-of select="@mandatory"/>
   <xsl:value-of select="$newline"/>
   <xsl:value-of select="'  CHKexistChild( '"/>
   <xsl:apply-templates select="../../@name" mode="uppercase"/>
   <xsl:value-of select="'_'"/>
   <xsl:apply-templates select="@name" mode="uppercase"/>
   <xsl:value-of select="'( '"/>
   <xsl:value-of select="'arg_node'"/>
   <xsl:value-of select="')'"/>
   <xsl:value-of select="', '"/>
   <xsl:value-of select="'arg_node'"/>
   <xsl:value-of select="', '"/>
   <xsl:value-of select="$newline"/>
   <xsl:value-of select="'                 '"/>
   <xsl:value-of select="'&quot;'"/>
   <xsl:value-of select="'mandatory son '"/>
   <xsl:apply-templates select="../../@name" mode="uppercase"/>
   <xsl:value-of select="'_'"/>
   <xsl:apply-templates select="@name" mode="uppercase"/>
   <xsl:value-of select="' is NULL'"/>
   <xsl:value-of select="'&quot;'"/>
   <xsl:value-of select="');'"/>
   <xsl:value-of select="$newline"/>
  </xsl:if>

</xsl:template>


<!-- trav to the sons -->
<xsl:template match="son" mode="trav">

  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'  if ( '"/>
  <xsl:apply-templates select="../../@name" mode="uppercase"/>
  <xsl:value-of select="'_'"/>
  <xsl:apply-templates select="@name" mode="uppercase"/>
  <xsl:value-of select="'( arg_node) != NULL)'"/>

  <xsl:value-of select="' {'"/>
  <xsl:value-of select="$newline"/>

  <xsl:text>    </xsl:text>
  <xsl:apply-templates select="../../@name" mode="uppercase"/>
  <xsl:value-of select="'_'"/>
  <xsl:apply-templates select="@name" mode="uppercase"/>
  <xsl:value-of select="'( arg_node) = TRAVdo( '"/>

  <xsl:apply-templates select="../../@name" mode="uppercase"/>
  <xsl:value-of select="'_'"/>
  <xsl:apply-templates select="@name" mode="uppercase"/>
  <xsl:value-of select="'( arg_node), arg_info);'"/>
  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'  }'"/>
  <xsl:value-of select="$newline"/>

</xsl:template>


<xsl:template match="attribute">

  <xsl:if test="string-length(@mandatory) &gt; 2">
   <xsl:value-of select="$newline"/>
   <xsl:value-of select="'  // this attribute is mandatory = '"/>
   <xsl:value-of select="@mandatory"/>
   <xsl:value-of select="$newline"/>
   <xsl:value-of select="'  CHKexistAttribute( '"/>
   <xsl:apply-templates select="../../@name" mode="uppercase"/>
   <xsl:value-of select="'_'"/>
   <xsl:apply-templates select="@name" mode="uppercase"/>
   <xsl:value-of select="'( '"/>
   <xsl:value-of select="'arg_node'"/>
   <xsl:value-of select="')'"/>
   <xsl:value-of select="', '"/>
   <xsl:value-of select="'arg_node'"/>
   <xsl:value-of select="', '"/>
   <xsl:value-of select="$newline"/>
   <xsl:value-of select="'                     '"/>
   <xsl:value-of select="'&quot;'"/>
   <xsl:value-of select="'mandatory attribute '"/>
   <xsl:apply-templates select="../../@name" mode="uppercase"/>
   <xsl:value-of select="'_'"/>
   <xsl:apply-templates select="@name" mode="uppercase"/>
   <xsl:value-of select="' is NULL'"/>
   <xsl:value-of select="'&quot;'"/>
   <xsl:value-of select="');'"/>
   <xsl:value-of select="$newline"/>
 </xsl:if> 

  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'  CHKrightType( '"/>
  <xsl:apply-templates select="../../@name" mode="uppercase"/>
  <xsl:value-of select="'_'"/>
  <xsl:apply-templates select="@name" mode="uppercase"/>
  <xsl:value-of select="'( '"/>
  <xsl:value-of select="'arg_node'"/>
  <xsl:value-of select="')'"/>
  <xsl:value-of select="', '"/>
  <xsl:value-of select="'arg_node'"/>
  <xsl:value-of select="', '"/>
  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'                     '"/>
  <xsl:value-of select="'&quot;'"/>
  <xsl:apply-templates select="type/@name" mode="uppercase"/>
  <xsl:value-of select="'&quot;'"/>
  <xsl:value-of select="', '"/>
  <xsl:value-of select="$newline"/>
  <xsl:value-of select="'                     '"/>
  <xsl:value-of select="'&quot;'"/>
  <xsl:value-of select="'attribute '"/>
  <xsl:apply-templates select="../../@name" mode="uppercase"/>
  <xsl:value-of select="'_'"/>
  <xsl:apply-templates select="@name" mode="uppercase"/>
  <xsl:value-of select="' hasnt the right type'"/>
  <xsl:value-of select="'&quot;'"/>
  <xsl:value-of select="');'"/>
  <xsl:value-of select="$newline"/>

</xsl:template>


<xsl:template match="@name" mode="uppercase">
  <xsl:value-of select="translate(., 'abcdefghijklmnopqrstuvwxyz',
'ABCDEFGHIJKLMNOPQRSTUVWXYZ')"/>
</xsl:template>

<xsl:template match="@name" mode="lowercase">
  <xsl:value-of select="translate(., 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
'abcdefghijklmnopqrstuvwxyz')"/>
</xsl:template>

</xsl:stylesheet>