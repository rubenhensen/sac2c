/******************************************************************************
 *
 * If you wish to add a new primitive to the compiler, you
 * likely ended up here. Here's a recipe for doing that.
 *
 * 1. Add an entry for the primitive to the table below.
 * 2. Add a function for the primitive to typecheck/ct_prf.c/h.
 * 3. Add a COMPprf... function for the primitive to codegen/compile.c
 *    and a ccode entry in this table, below.
 * 4. Add an entry for the primitive to memory/alloc.c
 *
 * 5. Add entries for the primitive to scanparse/prf.def if the
 *    primitive is intended to be allowed within SAC source code,
 *    and it is being treated as a normal function call. In case you
 *    need a special treatement, like conversion to a specific AST, then
 *    adjust scanparse/parser.c handle_function_call and friends.
 *
 * 6. Add a function COxxx to constants/constants.h and write
 *    appropriate evaluation of xxx when all its
 *    arguments are constant.
 *    When doing so, you likely have to add entries to the following:
 *     - zipcv.c
 *     - zipcv.h
 *     - globals.mac
 *     - globals.c
 *
 * 7. Run-time: add code to src/runtime/essentials_h/prf.h for
 *    the run-time execution code.
 *
 * 8. Do a make clean on BOTH sac2c and the stdlib, or you will
 *    see VERY strange things happening. I think this is due to
 *    assumptions about PRF_PRF values.
 *
 ******************************************************************************/

#ifndef PRFname
#define PRFname(name)
#endif

#ifndef PRFarg_encoding
#define PRFarg_encoding(arg_encoding)
#endif

#ifndef PRFarity
#define PRFarity(arity)
#endif

#ifndef PRFccode
#define PRFccode(ccode)
#endif

#ifndef PRFntc_fun
#define PRFntc_fun(ntc_fun)
#endif

#ifndef PRFco_fun
#define PRFco_fun(co_fun)
#endif

#ifndef PRFcomp_fun
#define PRFcomp_fun(comp_fun)
#endif

#ifndef PRFcf_scs_fun
#define PRFcf_scs_fun(cf_scs_fun)
#endif

#ifndef PRFcf_sccf_fun
#define PRFcf_sccf_fun(cf_sccf_fun)
#endif

#ifndef PRFcf_saa_fun
#define PRFcf_saa_fun(cf_saa_fun)
#endif

#ifndef PRFmakedim_fun
#define PRFmakedim_fun(makedim_fun)
#endif

#ifndef PRFmakeshp_fun
#define PRFmakeshp_fun(makeshp_fun)
#endif

#ifndef PRFalloc_fun
#define PRFalloc_fun(alloc_fun)
#endif

#ifndef PRFnum_dataflow_returns
#define PRFnum_dataflow_returns(ndf_rets)
#endif

#ifndef PRFshape_oracle_fun
#define PRFshape_oracle_fun(shape_oracle_fun)
#endif

#ifndef PRFicc_fun
#define PRFicc_fun(icc_fun)
#endif

/**
 * Function, indicating a number of return values. Normally
 * we use function TEone, TEtwo, etc, which are defined in
 * typecheck/type_errors.c
 */
#ifndef PRFte_fun
#define PRFte_fun(te_fun)
#endif

#ifndef PRFunused2
#define PRFunused2(unused2)
#endif

#ifndef PRFunused3
#define PRFunused3(unused3)
#endif

#define PRF(name, arg_encoding, arity, ccode, ntc_fun, co_fun, comp_fun, cf_scs_fun,     \
            cf_sccf_fun, cf_saa_fun, makedim_fun, makeshp_fun, alloc_fun, ndf_rets,      \
            shape_oracle_fun, icc_fun, te_fun, unused2, unused3)                         \
    PRFname (name) PRFarg_encoding (arg_encoding) PRFarity (arity) PRFccode (ccode)      \
      PRFntc_fun (ntc_fun) PRFco_fun (co_fun) PRFcomp_fun (comp_fun)                     \
        PRFcf_scs_fun (cf_scs_fun) PRFcf_sccf_fun (cf_sccf_fun)                          \
          PRFcf_saa_fun (cf_saa_fun) PRFmakedim_fun (makedim_fun)                        \
            PRFmakeshp_fun (makeshp_fun) PRFalloc_fun (alloc_fun)                        \
              PRFnum_dataflow_returns (ndf_rets) PRFshape_oracle_fun (shape_oracle_fun)  \
                PRFicc_fun (icc_fun) PRFte_fun (te_fun) PRFunused2 (unused2)             \
                  PRFunused3 (unused3)

/******************************************************************************
 *
 *  Outline of prf info table:
 *
 *   name                     arg_encoding
 *   arity                    ccode
 *   ntc_fun                  co_fun                   comp_fun
 *   cf_scs_fun               cf_sccf_fun              cf_saa_fun
 *   makedim_fun              make_shp_fun             alloc_fun
 *   num_dataflow_returns     shape_oracle_fun         icc_fun
 *   tc_fun
 *
 *  Explanation of table entries:
 *
 *   name           name of function, used to create enum type
 *   arg_encoding   shape class of arguments
 *                  PA_A = array, PA_V = vector, PA_S = scalar,
 *                  PA_x = no more arguments
 *   arity          arity as natural number (0 indicates variable arity)
 *                  For those of you who find "arity" an irritating term,
 *                  this is the number of arguments to the function, or
 *                  its valence.
 *   ccode          function symbol used by the code generator (compile)
 *   ntc_fun        function used for type inference
 *   co_fun         function used for constant folding (constants module)
 *   comp_fun       function used for code generation
 *   cf_scs_fun     function used for symbolic constant simplification
 *   cf_sccf_fun    function used for structural constant folding
 *   cf_saa_fun     function used for symbolic array attribute-based
 *                  constant folding
 *   cf_makedim_fun function used for creating dim expression
 *                  (symbolic array attribs)
 *   cf_makeshp_fun function used for creating shp expression
 *                  (symbolic array attribs)
 *   alloc_fun      function used for creating alloc statement
 *                  (not yet implemented)
 *   num_dataflow_returns     number of arguments that are returned
 *                  by this function (conformity constraints)
 *   shape_oracle_fun         function that provides the propagation vectors
 *                            (shape oracle)  AND WHAT THE F*CK IS THAT??
 *   icc_fun        function used to insert conformity checks
 *
 *   te_fn          I think this is the number of results created by the
 *                  function.
 *
 ******************************************************************************/

/******************************************************************************
 *
 * Primitive compiler operations
 *
 ******************************************************************************/

#ifndef PRF_INTERNAL_ONLY

/******************************************************************************
 *
 * Built-in type conversion operations
 *
 ******************************************************************************/

PRF (tobool_S, (PA_S, PA_x, PA_x), 1, TOBOOL, NTCCTprf_tobool_S, COtobool, COMPprfOp_S,
     SCSprf_tobool_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
     ICCnone, TEone, NULL, NULL),

  PRF (toc_S, (PA_S, PA_x, PA_x), 1, TOC, NTCCTprf_toc_S, COtoc, COMPprfOp_S,
       SCSprf_toc_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (tob_S, (PA_S, PA_x, PA_x), 1, TOB, NTCCTprf_tob_S, COtob, COMPprfOp_S,
       SCSprf_tob_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (tos_S, (PA_S, PA_x, PA_x), 1, TOS, NTCCTprf_tos_S, COtos, COMPprfOp_S,
       SCSprf_tos_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (toi_S, (PA_S, PA_x, PA_x), 1, TOI, NTCCTprf_toi_S, COtoi, COMPprfOp_S,
       SCSprf_toi_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (tol_S, (PA_S, PA_x, PA_x), 1, TOL, NTCCTprf_tol_S, COtol, COMPprfOp_S,
       SCSprf_tol_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (toll_S, (PA_S, PA_x, PA_x), 1, TOLL, NTCCTprf_toll_S, COtoll, COMPprfOp_S,
       SCSprf_toll_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (toub_S, (PA_S, PA_x, PA_x), 1, TOUB, NTCCTprf_toub_S, COtoub, COMPprfOp_S,
       SCSprf_toub_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (tous_S, (PA_S, PA_x, PA_x), 1, TOUS, NTCCTprf_tous_S, COtous, COMPprfOp_S,
       SCSprf_tous_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (toui_S, (PA_S, PA_x, PA_x), 1, TOUI, NTCCTprf_toui_S, COtoui, COMPprfOp_S,
       SCSprf_toui_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (toul_S, (PA_S, PA_x, PA_x), 1, TOUL, NTCCTprf_toul_S, COtoul, COMPprfOp_S,
       SCSprf_toul_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (toull_S, (PA_S, PA_x, PA_x), 1, TOULL, NTCCTprf_toull_S, COtoull, COMPprfOp_S,
       SCSprf_toull_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (tof_S, (PA_S, PA_x, PA_x), 1, TOF, NTCCTprf_tof_S, COtof, COMPprfOp_S,
       SCSprf_tof_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (tod_S, (PA_S, PA_x, PA_x), 1, TOD, NTCCTprf_tod_S, COtod, COMPprfOp_S,
       SCSprf_tod_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

/******************************************************************************
 *
 * Boolean operations
 *
 ******************************************************************************/

  PRF (not_S, (PA_S, PA_x, PA_x), 1, NOT, NTCCTprf_log_op_S, COnot, COMPprfOp_S, NULL,
       NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS, ICCnone, TEone, NULL,
       NULL),

  PRF (not_V, (PA_V, PA_x, PA_x), 1, NOT, NTCCTprf_log_op_V, COnot, COMPprfOp_V, NULL,
       NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVV, ICCnone, TEone, NULL,
       NULL),

  PRF (and_SxS, (PA_S, PA_S, PA_x), 2, AND, NTCCTprf_log_op_SxS, COand, COMPprfOp_SxS,
       SCSprf_and_SxS, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVSxS,
       ICCnone, TEone, NULL, NULL),

  PRF (and_SxV, (PA_S, PA_V, PA_x), 2, AND, NTCCTprf_log_op_SxV, COand, COMPprfOp_SxV,
       SCSprf_and_SxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV,
       ICCnone, TEone, NULL, NULL),

  PRF (and_VxS, (PA_V, PA_S, PA_x), 2, AND, NTCCTprf_log_op_VxS, COand, COMPprfOp_VxS,
       SCSprf_and_VxS, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS,
       ICCnone, TEone, NULL, NULL),

  PRF (and_VxV, (PA_V, PA_V, PA_x), 2, AND, NTCCTprf_log_op_VxV, COand, COMPprfOp_VxV,
       SCSprf_and_VxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxV,
       ICCsameShape, TEone, NULL, NULL),

  PRF (or_SxS, (PA_S, PA_S, PA_x), 2, OR, NTCCTprf_log_op_SxS, COor, COMPprfOp_SxS,
       SCSprf_or_SxS, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVSxS,
       ICCnone, TEone, NULL, NULL),

  PRF (or_SxV, (PA_S, PA_V, PA_x), 2, OR, NTCCTprf_log_op_SxV, COor, COMPprfOp_SxV,
       SCSprf_or_SxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV,
       ICCnone, TEone, NULL, NULL),

  PRF (or_VxS, (PA_V, PA_S, PA_x), 2, OR, NTCCTprf_log_op_VxS, COor, COMPprfOp_VxS,
       SCSprf_or_VxS, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS,
       ICCnone, TEone, NULL, NULL),

  PRF (or_VxV, (PA_V, PA_V, PA_x), 2, OR, NTCCTprf_log_op_VxV, COor, COMPprfOp_VxV,
       SCSprf_or_VxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxV,
       ICCsameShape, TEone, NULL, NULL),

  /* Subscript a SIMD vector represented by a scalar type.
     NOTE:  Current implementation will only work for float vectors.  */
  PRF (simd_sel_SxS, (PA_S, PA_S, PA_x), 2, XXX, NTCCTprf_simd_sel_SxS, COsimd_sel_SxS,
       COMPsimd_sel_SxS, SCSprf_simd_sel_SxS, NULL /*SCCFprf_sel*/, NULL, SAAdim_is_0,
       SAAshp_of_arg2, NULL, 0, PPIgetPVSxS, NULL /* FIXME */, TEone, NULL, NULL),

  PRF (simd_modarray, (PA_S, PA_S, PA_S), 3, XXX, NTCCTprf_simd_modarray, NULL,
       COMPsimd_modarray, NULL, NULL, NULL, SAAdim_of_arg1, SAAshp_of_arg1, NULL, 0, NULL,
       NULL, TEone, NULL, NULL),

  /* SIMD Primitive operations.  */
  PRF (add_SMxSM, (PA_S, PA_V, PA_V), 3, SIMD_ADD, NTCCTprf_ari_op_SMxSM, COsimd_add,
       COMPprfOp_SMxSM, SCSprf_add_SMxSM, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL,
       0, PPIgetPVVxV, ICCnone, TEone, NULL, NULL),

  PRF (sub_SMxSM, (PA_S, PA_V, PA_V), 3, SIMD_SUB, NTCCTprf_ari_op_SMxSM, COsimd_sub,
       COMPprfOp_SMxSM, SCSprf_sub_SMxSM, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL,
       0, PPIgetPVVxV, ICCnone, TEone, NULL, NULL),

  PRF (mul_SMxSM, (PA_S, PA_V, PA_V), 3, SIMD_MUL, NTCCTprf_ari_op_SMxSM, COsimd_mul,
       COMPprfOp_SMxSM, SCSprf_add_SMxSM, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL,
       0, PPIgetPVVxV, ICCnone, TEone, NULL, NULL),

  PRF (div_SMxSM, (PA_S, PA_V, PA_V), 3, SIMD_DIV, NTCCTprf_ari_op_SMxSM, COsimd_div,
       COMPprfOp_SMxSM, SCSprf_div_SMxSM, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL,
       0, PPIgetPVVxV, ICCnone, TEone, NULL, NULL),

  /*   This is a simd selecton.  */
  PRF (simd_sel_VxA, (PA_S, PA_V, PA_A), 3, XXX, NTCCTprf_simd_sel_VxA, COsimd_sel,
       COMPsimd_prfSel, SCSprf_simd_sel_VxA, NULL /*SCCFprf_sel*/, NULL, SAAdim_is_1,
       SAAshp_for_simd_sel, NULL, 0, PPIgetPVVxV, ICCsimd_sel, TEone, NULL, NULL),

  /*******************************************************************************
   * Standard arithmetic operations
   */

  PRF (add_SxS, (PA_S, PA_S, PA_x), 2, ADD, NTCCTprf_ari_op_SxS, COadd, COMPprfOp_SxS,
       SCSprf_add_SxS, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVSxS,
       ICCnone, TEone, NULL, NULL),

  PRF (add_SxV, (PA_S, PA_V, PA_x), 2, ADD, NTCCTprf_ari_op_SxV, COadd, COMPprfOp_SxV,
       SCSprf_add_SxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV,
       ICCnone, TEone, NULL, NULL),

  PRF (add_VxS, (PA_V, PA_S, PA_x), 2, ADD, NTCCTprf_ari_op_VxS, COadd, COMPprfOp_VxS,
       SCSprf_add_VxS, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS,
       ICCnone, TEone, NULL, NULL),

  PRF (add_VxV, (PA_V, PA_V, PA_x), 2, ADD, NTCCTprf_ari_op_VxV, COadd, COMPprfOp_VxV,
       SCSprf_add_VxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxV,
       ICCsameShape, TEone, NULL, NULL),

  PRF (sub_SxS, (PA_S, PA_S, PA_x), 2, SUB, NTCCTprf_ari_op_SxS, COsub, COMPprfOp_SxS,
       SCSprf_sub, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVSxS,
       ICCnone, TEone, NULL, NULL),

  PRF (sub_SxV, (PA_S, PA_V, PA_x), 2, SUB, NTCCTprf_ari_op_SxV, COsub, COMPprfOp_SxV,
       SCSprf_sub_SxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV,
       ICCnone, TEone, NULL, NULL),

  PRF (sub_VxS, (PA_V, PA_S, PA_x), 2, SUB, NTCCTprf_ari_op_VxS, COsub, COMPprfOp_VxS,
       SCSprf_sub, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS, ICCnone,
       TEone, NULL, NULL),

  PRF (sub_VxV, (PA_V, PA_V, PA_x), 2, SUB, NTCCTprf_ari_op_VxV, COsub, COMPprfOp_VxV,
       SCSprf_sub_VxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxV,
       ICCsameShape, TEone, NULL, NULL),

  PRF (mul_SxS, (PA_S, PA_S, PA_x), 2, MUL, NTCCTprf_ari_op_SxS, COmul, COMPprfOp_SxS,
       SCSprf_mul_SxS, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVSxS,
       ICCnone, TEone, NULL, NULL),

  PRF (mul_SxV, (PA_S, PA_V, PA_x), 2, MUL, NTCCTprf_ari_op_SxV, COmul, COMPprfOp_SxV,
       SCSprf_mul_SxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV,
       ICCnone, TEone, NULL, NULL),

  PRF (mul_VxS, (PA_V, PA_S, PA_x), 2, MUL, NTCCTprf_ari_op_VxS, COmul, COMPprfOp_VxS,
       SCSprf_mul_VxS, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS,
       ICCnone, TEone, NULL, NULL),

  PRF (mul_VxV, (PA_V, PA_V, PA_x), 2, MUL, NTCCTprf_ari_op_VxV, COmul, COMPprfOp_VxV,
       SCSprf_mul_VxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxV,
       ICCsameShape, TEone, NULL, NULL),

  PRF (div_SxS, (PA_S, PA_S, PA_x), 2, DIV, NTCCTprf_ari_op_SxS, COdiv, COMPprfOp_SxS,
       SCSprf_div_XxS, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVSxS,
       ICCnone, TEone, NULL, NULL),

  PRF (div_SxV, (PA_S, PA_V, PA_x), 2, DIV, NTCCTprf_ari_op_SxV, COdiv, COMPprfOp_SxV,
       SCSprf_div_SxX, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV,
       ICCnone, TEone, NULL, NULL),

  PRF (div_VxS, (PA_V, PA_S, PA_x), 2, DIV, NTCCTprf_ari_op_VxS, COdiv, COMPprfOp_VxS,
       SCSprf_div_XxS, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS,
       ICCnone, TEone, NULL, NULL),

  PRF (div_VxV, (PA_V, PA_V, PA_x), 2, DIV, NTCCTprf_ari_op_VxV, COdiv, COMPprfOp_VxV,
       SCSprf_div_VxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxV,
       ICCsameShape, TEone, NULL, NULL),

  PRF (mod_SxS, (PA_S, PA_S, PA_x), 2, MOD, NTCCTprf_int_op_SxS, COmod, COMPprfOp_SxS,
       SCSprf_mod_SxS, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVSxS,
       ICCnone, TEone, NULL, NULL),

  PRF (mod_SxV, (PA_S, PA_V, PA_x), 2, MOD, NTCCTprf_int_op_SxV, COmod, COMPprfOp_SxV,
       SCSprf_mod, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV, ICCnone,
       TEone, NULL, NULL),

  PRF (mod_VxS, (PA_V, PA_S, PA_x), 2, MOD, NTCCTprf_int_op_VxS, COmod, COMPprfOp_VxS,
       SCSprf_mod, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS, ICCnone,
       TEone, NULL, NULL),

  PRF (mod_VxV, (PA_V, PA_V, PA_x), 2, MOD, NTCCTprf_int_op_VxV, COmod, COMPprfOp_VxV,
       SCSprf_mod, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxV,
       ICCsameShape, TEone, NULL, NULL),

  PRF (aplmod_SxS, (PA_S, PA_S, PA_x), 2, APLMOD, NTCCTprf_int_op_SxS, COaplmod,
       COMPprfOp_SxS, SCSprf_aplmod, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0,
       PPIgetPVSxS, ICCnone, TEone, NULL, NULL),

  PRF (aplmod_SxV, (PA_S, PA_V, PA_x), 2, APLMOD, NTCCTprf_int_op_SxV, COaplmod,
       COMPprfOp_SxV, SCSprf_aplmod_SxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL, 0,
       PPIgetPVSxV, ICCnone, TEone, NULL, NULL),

  PRF (aplmod_VxS, (PA_V, PA_S, PA_x), 2, APLMOD, NTCCTprf_int_op_VxS, COaplmod,
       COMPprfOp_VxS, SCSprf_aplmod, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0,
       PPIgetPVVxS, ICCnone, TEone, NULL, NULL),

  PRF (aplmod_VxV, (PA_V, PA_V, PA_x), 2, APLMOD, NTCCTprf_int_op_VxV, COaplmod,
       COMPprfOp_VxV, SCSprf_aplmod, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0,
       PPIgetPVVxV, ICCsameShape, TEone, NULL, NULL),

  /*******************************************************************************
   * Further arithmetic operations
   */

  PRF (neg_S, (PA_S, PA_x, PA_x), 1, NEG, NTCCTprf_ari_op_S, COneg, COMPprfOp_S,
       SCSprf_neg_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (neg_V, (PA_V, PA_x, PA_x), 1, NEG, NTCCTprf_ari_op_V, COneg, COMPprfOp_V,
       SCSprf_neg_V, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVV, ICCnone,
       TEone, NULL, NULL),

  PRF (abs_S, (PA_S, PA_x, PA_x), 1, ABS, NTCCTprf_ari_op_S, COabs, COMPprfOp_S,
       SCSprf_abs_S, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVS,
       ICCnone, TEone, NULL, NULL),

  PRF (abs_V, (PA_V, PA_x, PA_x), 1, ABS, NTCCTprf_ari_op_V, COabs, COMPprfOp_V,
       SCSprf_abs_V, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVV, ICCnone,
       TEone, NULL, NULL),

  PRF (min_SxS, (PA_S, PA_S, PA_x), 2, MIN, NTCCTprf_ari_op_SxS, COmin, COMPprfOp_SxS,
       SCSprf_min_SxS, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVSxS,
       ICCnone, TEone, NULL, NULL),

  PRF (min_SxV, (PA_S, PA_V, PA_x), 2, MIN, NTCCTprf_ari_op_SxV, COmin, COMPprfOp_SxV,
       NULL, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV, ICCnone,
       TEone, NULL, NULL),

  PRF (min_VxS, (PA_V, PA_S, PA_x), 2, MIN, NTCCTprf_ari_op_VxS, COmin, COMPprfOp_VxS,
       NULL, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS, ICCnone,
       TEone, NULL, NULL),

  PRF (min_VxV, (PA_V, PA_V, PA_x), 2, MIN, NTCCTprf_ari_op_VxV, COmin, COMPprfOp_VxV,
       SCSprf_min_VxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxV,
       ICCsameShape, TEone, NULL, NULL),

  PRF (max_SxS, (PA_S, PA_S, PA_x), 2, MAX, NTCCTprf_ari_op_SxS, COmax, COMPprfOp_SxS,
       SCSprf_max_SxS, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVSxS,
       ICCnone, TEone, NULL, NULL),

  PRF (max_SxV, (PA_S, PA_V, PA_x), 2, MAX, NTCCTprf_ari_op_SxV, COmax, COMPprfOp_SxV,
       NULL, NULL, NULL, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV, ICCnone,
       TEone, NULL, NULL),

  PRF (max_VxS, (PA_V, PA_S, PA_x), 2, MAX, NTCCTprf_ari_op_VxS, COmax, COMPprfOp_VxS,
       NULL, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS, ICCnone,
       TEone, NULL, NULL),

  PRF (max_VxV, (PA_V, PA_V, PA_x), 2, MAX, NTCCTprf_ari_op_VxV, COmax, COMPprfOp_VxV,
       SCSprf_max_VxV, NULL, NULL, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxV,
       ICCsameShape, TEone, NULL, NULL),

  /*******************************************************************************
   * Relational operations
   */

  PRF (eq_SxS, (PA_S, PA_S, PA_x), 2, EQ, NTCCTprf_rel_op_SxS, COeq, COMPprfOp_SxS,
       SCSprf_eq_SxS, NULL, SAACFprf_eq_SxS, SAAdim_is_0, SAAshp_is_empty, NULL, 0,
       PPIgetPVSxS, ICCnone, TEone, NULL, NULL),

  PRF (eq_SxV, (PA_S, PA_V, PA_x), 2, EQ, NTCCTprf_rel_op_SxV, COeq, COMPprfOp_SxV,
       SCSprf_eq_SxV, NULL, SAACFprf_eq_SxV, SAAdim_is_1, SAAshp_of_arg2, NULL, 0,
       PPIgetPVSxV, ICCnone, TEone, NULL, NULL),

  PRF (eq_VxS, (PA_V, PA_S, PA_x), 2, EQ, NTCCTprf_rel_op_VxS, COeq, COMPprfOp_VxS,
       SCSprf_eq_VxS, NULL, SAACFprf_eq_VxS, SAAdim_is_1, SAAshp_of_arg1, NULL, 0,
       PPIgetPVVxS, ICCnone, TEone, NULL, NULL),

  PRF (eq_VxV, (PA_V, PA_V, PA_x), 2, EQ, NTCCTprf_rel_op_VxV, COeq, COMPprfOp_VxV,
       SCSprf_eq_VxV, NULL, SAACFprf_eq_VxV, SAAdim_is_1, SAAshp_of_arg1, NULL, 0,
       PPIgetPVVxV, ICCsameShape, TEone, NULL, NULL),

  PRF (neq_SxS, (PA_S, PA_S, PA_x), 2, NE, NTCCTprf_rel_op_SxS, COneq, COMPprfOp_SxS,
       SCSprf_neq_SxS, NULL, SAACFprf_neq_SxS, SAAdim_is_0, SAAshp_is_empty, NULL, 0,
       PPIgetPVSxS, ICCnone, TEone, NULL, NULL),

  PRF (neq_SxV, (PA_S, PA_V, PA_x), 2, NE, NTCCTprf_rel_op_SxV, COneq, COMPprfOp_SxV,
       SCSprf_neq_SxV, NULL, SAACFprf_neq_SxV, SAAdim_is_1, SAAshp_of_arg2, NULL, 0,
       PPIgetPVSxV, ICCnone, TEone, NULL, NULL),

  PRF (neq_VxS, (PA_V, PA_S, PA_x), 2, NE, NTCCTprf_rel_op_VxS, COneq, COMPprfOp_VxS,
       SCSprf_neq_VxS, NULL, SAACFprf_neq_VxS, SAAdim_is_1, SAAshp_of_arg1, NULL, 0,
       PPIgetPVVxS, ICCnone, TEone, NULL, NULL),

  PRF (neq_VxV, (PA_V, PA_V, PA_x), 2, NE, NTCCTprf_rel_op_VxV, COneq, COMPprfOp_VxV,
       SCSprf_neq_VxV, NULL, SAACFprf_neq_VxV, SAAdim_is_1, SAAshp_of_arg1, NULL, 0,
       PPIgetPVVxV, ICCsameShape, TEone, NULL, NULL),

  PRF (le_SxS, (PA_S, PA_S, PA_x), 2, LE, NTCCTprf_rel_op_SxS, COle, COMPprfOp_SxS,
       SCSprf_lege, NULL, SAACFprf_le_SxS, SAAdim_is_0, SAAshp_is_empty, NULL, 0,
       PPIgetPVSxS, ICCnone, TEone, NULL, NULL),

  PRF (le_SxV, (PA_S, PA_V, PA_x), 2, LE, NTCCTprf_rel_op_SxV, COle, COMPprfOp_SxV, NULL,
       NULL, SAACFprf_le_SxV, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV, ICCnone,
       TEone, NULL, NULL),

  PRF (le_VxS, (PA_V, PA_S, PA_x), 2, LE, NTCCTprf_rel_op_VxS, COle, COMPprfOp_VxS, NULL,
       NULL, SAACFprf_le_VxS, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS, ICCnone,
       TEone, NULL, NULL),

  PRF (le_VxV, (PA_V, PA_V, PA_x), 2, LE, NTCCTprf_rel_op_VxV, COle, COMPprfOp_VxV,
       SCSprf_lege, NULL, SAACFprf_le_VxS, SAAdim_is_1, SAAshp_of_arg1, NULL, 0,
       PPIgetPVVxV, ICCsameShape, TEone, NULL, NULL),

  PRF (lt_SxS, (PA_S, PA_S, PA_x), 2, LT, NTCCTprf_rel_op_SxS, COlt, COMPprfOp_SxS,
       SCSprf_nlege, NULL, SAACFprf_lt_SxS, SAAdim_is_0, SAAshp_is_empty, NULL, 0,
       PPIgetPVSxS, ICCnone, TEone, NULL, NULL),

  PRF (lt_SxV, (PA_S, PA_V, PA_x), 2, LT, NTCCTprf_rel_op_SxV, COlt, COMPprfOp_SxV, NULL,
       NULL, SAACFprf_lt_SxV, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV, ICCnone,
       TEone, NULL, NULL),

  PRF (lt_VxS, (PA_V, PA_S, PA_x), 2, LT, NTCCTprf_rel_op_VxS, COlt, COMPprfOp_VxS, NULL,
       NULL, SAACFprf_lt_VxS, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS, ICCnone,
       TEone, NULL, NULL),

  PRF (lt_VxV, (PA_V, PA_V, PA_x), 2, LT, NTCCTprf_rel_op_VxV, COlt, COMPprfOp_VxV,
       SCSprf_nlege, NULL, SAACFprf_lt_VxV, SAAdim_is_1, SAAshp_of_arg1, NULL, 0,
       PPIgetPVVxV, ICCsameShape, TEone, NULL, NULL),

  PRF (ge_SxS, (PA_S, PA_S, PA_x), 2, GE, NTCCTprf_rel_op_SxS, COge, COMPprfOp_SxS,
       SCSprf_lege, NULL, SAACFprf_ge_SxS, SAAdim_is_0, SAAshp_is_empty, NULL, 0,
       PPIgetPVSxS, ICCnone, TEone, NULL, NULL),

  PRF (ge_SxV, (PA_S, PA_V, PA_x), 2, GE, NTCCTprf_rel_op_SxV, COge, COMPprfOp_SxV, NULL,
       NULL, SAACFprf_ge_SxV, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV, ICCnone,
       TEone, NULL, NULL),

  PRF (ge_VxS, (PA_V, PA_S, PA_x), 2, GE, NTCCTprf_rel_op_VxS, COge, COMPprfOp_VxS, NULL,
       NULL, SAACFprf_ge_VxS, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS, ICCnone,
       TEone, NULL, NULL),

  PRF (ge_VxV, (PA_V, PA_V, PA_x), 2, GE, NTCCTprf_rel_op_VxV, COge, COMPprfOp_VxV,
       SCSprf_lege, NULL, SAACFprf_ge_VxV, SAAdim_is_1, SAAshp_of_arg1, NULL, 0,
       PPIgetPVVxV, ICCsameShape, TEone, NULL, NULL),

  PRF (gt_SxS, (PA_S, PA_S, PA_x), 2, GT, NTCCTprf_rel_op_SxS, COgt, COMPprfOp_SxS,
       SCSprf_nlege, NULL, SAACFprf_gt_SxS, SAAdim_is_0, SAAshp_is_empty, NULL, 0,
       PPIgetPVSxS, ICCnone, TEone, NULL, NULL),

  PRF (gt_SxV, (PA_S, PA_V, PA_x), 2, GT, NTCCTprf_rel_op_SxV, COgt, COMPprfOp_SxV, NULL,
       NULL, SAACFprf_gt_SxV, SAAdim_is_1, SAAshp_of_arg2, NULL, 0, PPIgetPVSxV, ICCnone,
       TEone, NULL, NULL),

  PRF (gt_VxS, (PA_V, PA_S, PA_x), 2, GT, NTCCTprf_rel_op_VxS, COgt, COMPprfOp_VxS, NULL,
       NULL, SAACFprf_gt_VxS, SAAdim_is_1, SAAshp_of_arg1, NULL, 0, PPIgetPVVxS, ICCnone,
       TEone, NULL, NULL),

  PRF (gt_VxV, (PA_V, PA_V, PA_x), 2, GT, NTCCTprf_rel_op_VxV, COgt, COMPprfOp_VxV,
       SCSprf_nlege, NULL, SAACFprf_gt_VxV, SAAdim_is_1, SAAshp_of_arg1, NULL, 0,
       PPIgetPVVxV, ICCsameShape, TEone, NULL, NULL),

  /*******************************************************************************
   * Array operations
   */

  PRF (dim_A, (PA_A, PA_x, PA_x), 1, XXX, NTCCTprf_dim_A, COdim, COMPprfDim, NULL, NULL,
       SAACFprf_dim, SAAdim_is_0, SAAshp_is_empty, NULL, 0, PPIgetPVDim, ICCnone, TEone,
       NULL, NULL),

  /* For distributed memory backend: Is array distributed? */
  PRF (isDist_A, (PA_A, PA_x, PA_x), 1, XXX, NTCCTprf_isDist_A, COisDist, COMPprfIsDist,
       NULL, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, NULL, ICCnone, TEone,
       NULL, NULL),

  /*
   * For distributed memory backend:
   * If array distributed: Number of elements owned by every node but the last
   * (The last node owns the remaining elements.)
   */
  PRF (firstElems_A, (PA_A, PA_x, PA_x), 1, XXX, NTCCTprf_firstElems_A, COfirstElems,
       COMPprfFirstElems, NULL, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, NULL,
       ICCnone, TEone, NULL, NULL),

  /*
   * For distributed memory backend:
   * Returns the first element index that is local to the current node.
   * If the array is not distributed that is equal to 0.
   */
  PRF (localFrom_A, (PA_A, PA_x, PA_x), 1, XXX, NTCCTprf_localFrom_A, COlocalFrom,
       COMPprfLocalFrom, NULL, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, NULL,
       ICCnone, TEone, NULL, NULL),

  /*
   * For distributed memory backend:
   * Returns the number of elements that are local to the current node.
   * If the array is not distributed that is equal to the size of the array.
   */
  PRF (localCount_A, (PA_A, PA_x, PA_x), 1, XXX, NTCCTprf_localCount_A, NULL,
       COMPprfLocalCount, NULL, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, NULL,
       ICCnone, TEone, NULL, NULL),

  /*
   * For distributed memory backend:
   * If array distributed: Offset of array within DSM memory segment
   */
  PRF (offs_A, (PA_A, PA_x, PA_x), 1, XXX, NTCCTprf_offs_A, COoffs, COMPprfOffs, NULL,
       NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, NULL, ICCnone, TEone, NULL,
       NULL),

  PRF (shape_A, (PA_A, PA_x, PA_x), 1, XXX, NTCCTprf_shape_A, COshape, COMPprfShape,
       SCSprf_shape, NULL, SAACFprf_shape, SAAdim_is_1, SAAshp_for_shape, NULL, 0,
       PPIgetPVShape, ICCnone, TEone, NULL, NULL),

  PRF (reshape_VxA, (PA_V, PA_A, PA_x), 2, XXX, NTCCTprf_reshape_VxA, COreshape,
       COMPprfReshape, SCSprf_reshape, SCCFprf_reshape, SAACFprf_reshape,
       SAAdim_is_arg1_0, SAAshp_is_arg1, NULL, 0, PPIgetPVReshape, ICCreshape, TEone,
       NULL, NULL),

  PRF (sel_VxA, (PA_V, PA_A, PA_x), 2, XXX, NTCCTprf_sel_VxA, COsel, COMPprfSel,
       SCSprf_sel_VxA, SCCFprf_sel, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0,
       PPIgetPVSel, ICCsel, TEone, NULL, NULL),

  /*
   * Checks whether all elements in the given vector are truthy. This function
   * may be used by users of SaC, but is only intended to be used on small
   * vectors, such as shapes. Internally, this function is used to compare two
   * shape-components of type patterns.
   */
  PRF (all_V, (PA_V, PA_x, PA_x), 1, XXX, NTCCTprf_all_V, COall, COMPprfAll,
       SCSprf_all_V, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL,
       0, NULL, NULL, TEone, NULL, NULL),

  PRF (zero_A, (PA_A, PA_x, PA_x), 1, XXX, NTCCTprf_zero_A, NULL, NULL,
       SCSprf_zero_A, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL,
       0, NULL, NULL, TEone, NULL, NULL),

  /*
   * Special version of sel_VxA to mark local reads for the
   * distributed memory backend.
   * Exists only until the parser, then it is converted to
   * sel_VxA with the PRF_DISTMEMISLOCALREAD flag set.
   */
  PRF (sel_VxA_distmem_local, (PA_V, PA_A, PA_x), 2, XXX, NTCCTprf_sel_VxA, COsel,
       COMPprfSel, SCSprf_sel_VxA, SCCFprf_sel, NULL, SAAdim_is_0, SAAshp_is_empty, NULL,
       0, PPIgetPVSel, ICCsel, TEone, NULL, NULL),

  PRF (sel_VxIA, (PA_V, PA_A, PA_x), 2, XXX, NTCCTprf_sel_VxIA, NULL, COMPprfSelI, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (modarray_AxVxS, (PA_A, PA_V, PA_S), 3, XXX, NTCCTprf_modarray_AxVxS,
       COmodarray_AxVxS, COMPprfModarray_AxVxS, NULL, SCCFprf_modarray_AxVxS, NULL,
       SAAdim_of_arg1, SAAshp_of_arg1, NULL, 0, PPIgetPVModarray, ICCprfModarray, TEone,
       NULL, NULL),

  PRF (cat_VxV, (PA_V, PA_V, PA_x), 2, XXX, NTCCTprf_cat_VxV, COcat, COMPprfCat, NULL,
       SCCFprf_cat_VxV, NULL, SAAdim_is_1, SAAshp_for_cat, NULL, 0, PPIgetPVVxV, ICCnone,
       TEone, NULL, NULL),

  PRF (take_SxV, (PA_S, PA_V, PA_x), 2, XXX, NTCCTprf_take_SxV, COtake, COMPprfTake, NULL,
       SCCFprf_take_SxV, SAACFprf_take_SxV, SAAdim_is_1, SAAshp_for_take, NULL, 0,
       PPIgetPVTakeAndDrop, ICCvalMatchLen, TEone, NULL, NULL),

  PRF (drop_SxV, (PA_S, PA_V, PA_x), 2, XXX, NTCCTprf_drop_SxV, COdrop, COMPprfDrop, NULL,
       SCCFprf_drop_SxV, SAACFprf_drop_SxV, SAAdim_is_1, SAAshp_for_drop, NULL, 0,
       PPIgetPVTakeAndDrop, ICCvalMatchLen, TEone, NULL, NULL),

  /*
   * Hide Functions
   */
  PRF (hideValue_SxA, (PA_S, PA_A, PA_x), 2, HIDE, NTCCTprf_hideValue_SxA, NULL,
       COMPprfSecond, NULL, NULL, NULL, SAAdim_of_arg2, SAAshp_of_arg2, NULL, 0,
       PPIgetPVSel, ICCnone, TEone, NULL, NULL),

  PRF (hideShape_SxA, (PA_S, PA_A, PA_x), 2, HIDE, NTCCTprf_hideShape_SxA, NULL,
       COMPprfSecond, NULL, NULL, NULL, SAAdim_of_arg2, NULL, NULL, 0, PPIgetPVSel,
       ICCnone, TEone, NULL, NULL),

  PRF (hideDim_SxA, (PA_S, PA_A, PA_x), 2, HIDE, NTCCTprf_hideDim_SxA, NULL,
       COMPprfSecond, NULL, NULL, NULL, NULL, NULL, NULL, 0, PPIgetPVSel, ICCnone, TEone,
       NULL, NULL),

#endif /* PRF_INTERNAL_ONLY */

/*******************************************************************************
 *******************************************************************************
 *
 *  B) Internally used operations:
 *
 *******************************************************************************
 *******************************************************************************/

#ifndef PRF_EXTERNAL_ONLY

  /******************************************************************************
   * With-loop generator
   */

  PRF (wl_lt, (PA_x, PA_x, PA_x), 2, XXX, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
       NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (wl_le, (PA_x, PA_x, PA_x), 2, XXX, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL,
       NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /******************************************************************************
   * Shape selection optimization (WLPG):
   */

  PRF (idx_shape_sel, (PA_x, PA_x, PA_x), 2, XXX, NTCCTprf_idx_shape_sel, NULL,
       COMPprfIdxShapeSel, SCSprf_idx_shape_sel, NULL, SAACFprf_idx_shape_sel,
       SAAdim_is_0, SAAshp_is_empty, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Index vector elimination (IVE)
   */

  PRF (idx_sel, (PA_x, PA_x, PA_x), 2, XXX, NTCCTprf_idx_selS, COidxSel, COMPprfIdxSel,
       NULL, SCCFprf_idx_sel, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, NULL, NULL,
       TEone, NULL, NULL),

  PRF (idx_modarray_AxSxS, (PA_x, PA_x, PA_x), 3, XXX, NTCCTprf_modarray_AxSxS,
       COidx_modarray_AxSxS, COMPprfIdxModarray_AxSxS, NULL, SCCFprf_idx_modarray_AxSxS,
       NULL, SAAdim_of_arg1, SAAshp_of_arg1, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (idx_modarray_AxSxA, (PA_x, PA_x, PA_x), 3, XXX, NTCCTprf_modarray_AxSxA,
       COidx_modarray_AxSxA, COMPprfIdxModarray_AxSxA, NULL, NULL, NULL, SAAdim_of_arg1,
       SAAshp_of_arg1, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (idxs2offset, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_idxs2offset, NULL,
       COMPprfIdxs2Offset, NULL, SCCFprf_idxs2offset, NULL, SAAdim_is_0, SAAshp_is_empty,
       NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (vect2offset, (PA_x, PA_x, PA_x), 2, XXX, NTCCTprf_vect2offset, COvect2offset,
       COMPprfVect2Offset, NULL, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0, NULL,
       NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Fold-WL explicit accumulation:
   */

  PRF (accu, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfNoop, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEn, NULL, NULL),

  PRF (syncin, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfSyncIn, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (syncout, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfSyncOut, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Foldfix-WL explicit break:
   */

  PRF (wl_break, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfWLBreak, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Side effects in with-loops:
   */

  PRF (prop_obj_in, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfPropObjIn,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEn, NULL, NULL),

  PRF (prop_obj_out, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_id, NULL, COMPprfPropObjOut,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEn, NULL, NULL),

  /*******************************************************************************
   * With-loop unrolling (WLUR)
   */

  PRF (modarray_AxVxA, (PA_A, PA_V, PA_A), 3, XXX, NTCCTprf_modarray_AxVxA,
       COmodarray_AxVxA, COMPprfModarray_AxVxA, NULL, SCCFprf_modarray_AxVxA, NULL,
       SAAdim_of_arg1, SAAshp_of_arg1, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Extended Memory Reuse (EMR)
   */

   PRF (EMR_noop, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_id, NULL, COMPprfNoop, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),


  /*******************************************************************************
   * Low-level backend representations
   */

  PRF (size_A, (PA_A, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfSize, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Memory management:
   */

  PRF (genarray, (PA_x, PA_x, PA_x), 2, XXX, NTCCTprf_dummy, NULL, COMPprfGenarray, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (alloc, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfAlloc, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (reuse, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, NULL, NULL, NULL, NULL,
       NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (alloc_or_reuse, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfAllocOrReuse, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (alloc_or_reshape, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfAllocOrReshape, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (alloc_or_resize, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfAllocOrResize, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (resize, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfResize, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (isreused, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfIsReused, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (wl_assign, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfWLAssign, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (suballoc, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfSuballoc, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (fill, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, NULL, NULL, NULL, NULL,
       NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (copy, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfCopy, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (noop, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfNoop, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (inc_rc, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfIncRC, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (dec_rc, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfDecRC, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (free, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfFree, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (restorerc, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfRestorerc,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (2norc, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprf2norc, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (2asyncrc, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprf2asyncrc, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),
  /*******************************************************************************
   * Uniqueness conversion operations
   */

  PRF (to_unq, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_id, NULL, COMPprfToUnq, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (from_unq, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_id, NULL, COMPprfFromUnq, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Nested conversion operations
   */

  PRF (enclose, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_enclose, NULL, COMPprfEnclose, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (disclose, (PA_x, PA_x, PA_x), 3, XXX, NTCCTprf_disclose, NULL, COMPprfDisclose,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Symbolic array attribute operations (SAA)
   */

  PRF (saabind, (PA_x, PA_x, PA_x), 3, XXX, NTCCTprf_saabind, NULL, NULL, NULL, NULL,
       SAACFprf_saabind, SAAdim_is_arg1, SAAshp_is_arg2, NULL, 0, NULL, NULL, TEone, NULL,
       NULL),

  /*******************************************************************************
   * Type conversion and assertion operations
   */

  /**
   * Returns a temporary dummy value, with the given type. Used by unused
   * argument removal to temporarily replace actual arguments in function
   * applications by dummy values, until they can be removed.
   * Because this value is only used temporarily, and will be removed in
   * precompile/dummy_definition_removal, we must ensure that we do not
   * allocate or reference count this prf.
   * Not indended to be used externally.
   */
  PRF (UAR_dummy_type, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_id, NULL,
       COMPprfTypeError, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL,
       TEone, NULL, NULL),

  PRF (type_conv, (PA_x, PA_x, PA_x), 2, XXX, NTCCTprf_type_conv, NULL,
       COMPprfTypeConv, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL,
       TEone, NULL, NULL),

  PRF (type_fix, (PA_x, PA_x, PA_x), 2, XXX, NTCCTprf_type_fix, NULL,
       COMPprfTypeConv, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL,
       TEone, NULL, NULL),

  PRF (type_error, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_id, NULL,
       COMPprfTypeError, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL,
       TEn, NULL, NULL),

  /**
   * This primitive function behaves similarly to F_type_error, however it
   * handles the specific case where one or more of these guard errors are
   * followed by an F_guard. Because of this, instead of aborting the program
   * with an error message, we instead print that message and return false.
   * This allows multiple guard error messages to be printed, before the
   * F_guard sees that false was returned by one or more F_guard_errors, and
   * aborts the program.
   * Not indended to be used externally.
   */
  PRF (guard_error, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_id, NULL,
       COMPprfGuardError, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL,
       TEone, NULL, NULL),

  PRF (dispatch_error, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dispatch_error, NULL,
       COMPprfDispatchError, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL,
       TEval, NULL, NULL),

  /*******************************************************************************
   * Function for implementing the encoding of shape details in wrapper entry
   * functions.
   */

  PRF (we_shape_encode, (PA_x, PA_x, PA_x), 1, XXX, NULL, NULL, COMPprfWrapperShapeEncode,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEval, NULL, NULL),

  PRF (we_modfun_info, (PA_x, PA_x, PA_x), 1, XXX, NULL, NULL, COMPprfWrapperModFunInfo,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEval, NULL, NULL),

  /*******************************************************************************
   * Functions for implementing conformability constraints.
   * These functions are only intended to be used internally.
   *
   * NB. Be aware that constraint_statistics.c assumes that all
   *     constraints are contiguous in this table!
   */

  /**
   * x1', .., xn' = guard (x1, .., xn, typ1, .., typn, pred1, .., predm);
   * Guards expects n values with corresponding types, and m boolean predicates.
   * If all predicates are true then guard behaves as the identify function on
   * arguments xi, otherwise an error will be raised. These guards serve as a
   * barrier for optimisation and code rewrites around conformity checks and
   * type pattern checks.
   * Not indended to be used externally.
   */
  PRF (guard, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_guard, NULL, COMPprfGuard,
       SCSprf_guard, NULL, NULL, SAAdim_guard, SAAshp_guard, NULL, 0, NULL,
       NULL, TEvar, NULL, NULL),

  PRF (type_constraint, (PA_x, PA_x, PA_x), 2, XXX, NTCCTprf_type_constraint, NULL,
       COMPprfTypeConstraint, NULL, NULL, NULL, SAAdim_type_constraint,
       SAAshp_type_constraint, NULL, 1, NULL, NULL, TEtwo, NULL, NULL),

  PRF (same_shape_AxA, (PA_A, PA_A, PA_x), 2, XXX, NTCCTprf_same_shape, NULL,
       COMPprfSameShape, SCSprf_same_shape_AxA, NULL, SAACFprf_same_shape_AxA,
       SAAdim_same_shape_AxA, SAAshp_same_shape_AxA, NULL, 2, NULL, NULL, TEthree, NULL,
       NULL),

  PRF (shape_matches_dim_VxA, (PA_V, PA_A, PA_x), 2, XXX, NTCCTprf_shape_matches_dim_VxA,
       NULL, COMPprfShapeMatchesDim, SCSprf_shape_matches_dim_VxA, NULL, NULL,
       SAAdim_shape_matches_dim_VxA, SAAshp_shape_matches_dim_VxA,
       SAACFprf_shape_matches_dim_VxA, 1, NULL, NULL, TEtwo, NULL, NULL),

  PRF (non_neg_val_S, (PA_S, PA_x, PA_x), 1, XXX, NTCCTprf_non_neg_S, NULL,
       COMPprfNonNegVal_S, SCSprf_non_neg_val_S, NULL, SAACFprf_non_neg_val_S,
       SAAdim_cc_inherit, SAAshp_cc_inherit, NULL, 1, NULL, NULL, TEtwo, NULL, NULL),

  PRF (non_neg_val_V, (PA_V, PA_x, PA_x), 1, XXX, NTCCTprf_non_neg_V, NULL,
       COMPprfNonNegVal_V, SCSprf_non_neg_val_V, NULL, SAACFprf_non_neg_val_V,
       SAAdim_cc_inherit, SAAshp_cc_inherit, NULL, 1, NULL, NULL, TEtwo, NULL, NULL),

  PRF (val_lt_shape_VxA, (PA_V, PA_A, PA_x), 2, XXX, NTCCTprf_val_shape_V, NULL,
       COMPprfValLtShape, SCSprf_val_lt_shape_VxA, NULL, SAACFprf_val_lt_shape_VxA,
       SAAdim_cc_inherit, SAAshp_cc_inherit, NULL, 1, NULL, NULL, TEtwo, NULL, NULL),

  PRF (val_lt_val_SxS, (PA_S, PA_S, PA_x), 3, XXX, NTCCTprf_val_lt_val_SxS, NULL,
       COMPprfValLtVal_SxS, SCSprf_val_lt_val_SxS, NULL, SAACFprf_val_lt_val_SxS,
       SAAdim_cc_inherit, SAAshp_cc_inherit, NULL, 1, NULL, NULL, TEtwo, NULL, NULL),

  PRF (val_le_val_SxS, (PA_S, PA_S, PA_x), 2, XXX, NTCCTprf_val_le_val_SxS, NULL,
       COMPprfValLeVal_SxS, SCSprf_val_le_val_SxS, NULL, NULL, SAAdim_cc_inherit,
       SAAshp_cc_inherit, NULL, 1, NULL, NULL, TEtwo, NULL, NULL),

  PRF (val_le_val_VxV, (PA_V, PA_V, PA_x), 2, XXX, NTCCTprf_val_le_val_VxV, NULL,
       COMPprfValLeVal_VxV, SCSprf_val_le_val_VxV, NULL, NULL, SAAdim_cc_inherit,
       SAAshp_cc_inherit, NULL, 1, NULL, NULL, TEtwo, NULL, NULL),

  PRF (prod_matches_prod_shape_VxA, (PA_V, PA_A, PA_x), 2, XXX, NTCCTprf_prod_shape, NULL,
       COMPprfProdMatchesProdShape, SCSprf_prod_matches_prod_shape_VxA, NULL, NULL,
       SAAdim_cc_inherit, SAAshp_cc_inherit, NULL, 1, NULL, NULL, TEtwo, NULL, NULL),

  /*******************************************************************************
   * Functions to define vector extrema and WL intersections
   */

  PRF (noteintersect, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_noteintersect, NULL,
       COMPprfNoop, NULL, NULL, NULL, SAAdim_of_arg1, SAAshp_of_arg1, NULL, 0, NULL, NULL,
       TEone, NULL, NULL),

  PRF (noteminval, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_noteminval, NULL, COMPprfNoop,
       SCSprf_noteminval, NULL, NULL, SAAdim_of_arg1, SAAshp_of_arg1, NULL, 0, NULL, NULL,
       TEone, NULL, NULL),

  PRF (notemaxval, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_notemaxval, NULL, COMPprfNoop,
       SCSprf_notemaxval, NULL, NULL, SAAdim_of_arg1, SAAshp_of_arg1, NULL, 0, NULL, NULL,
       TEone, NULL, NULL),

  PRF (mask_SxSxS, (PA_S, PA_S, PA_S), 3, MASK, NTCCTprf_mask_SxSxS, NULL,
       COMPprfMask_SxSxS, NULL, SCCFprf_mask_SxSxS, NULL, SAAdim_is_0, SAAshp_is_empty,
       NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (mask_SxSxV, (PA_S, PA_S, PA_V), 3, MASK, NTCCTprf_mask_SxSxV, NULL,
       COMPprfMask_SxSxV, NULL, SCCFprf_mask_SxSxV, NULL, SAAdim_of_arg3, SAAshp_of_arg3,
       NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (mask_SxVxS, (PA_S, PA_V, PA_S), 3, MASK, NTCCTprf_mask_SxVxS, NULL,
       COMPprfMask_SxVxS, NULL, SCCFprf_mask_SxVxS, NULL, SAAdim_of_arg2, SAAshp_of_arg2,
       NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (mask_SxVxV, (PA_S, PA_V, PA_V), 3, MASK, NTCCTprf_mask_SxVxV, NULL,
       COMPprfMask_SxVxV, NULL, SCCFprf_mask_SxVxV, NULL, SAAdim_of_arg2, SAAshp_of_arg2,
       NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (mask_VxSxS, (PA_V, PA_S, PA_S), 3, MASK, NTCCTprf_mask_VxSxS, NULL,
       COMPprfMask_VxSxS, NULL, SCCFprf_mask_VxSxS, NULL, SAAdim_of_arg1, SAAshp_of_arg1,
       NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (mask_VxSxV, (PA_V, PA_S, PA_V), 3, MASK, NTCCTprf_mask_VxSxV, NULL,
       COMPprfMask_VxSxV, NULL, SCCFprf_mask_VxSxV, NULL, SAAdim_of_arg1, SAAshp_of_arg1,
       NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (mask_VxVxS, (PA_V, PA_V, PA_S), 3, MASK, NTCCTprf_mask_VxVxS, NULL,
       COMPprfMask_VxVxS, NULL, SCCFprf_mask_VxVxS, NULL, SAAdim_of_arg1, SAAshp_of_arg1,
       NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (mask_VxVxV, (PA_V, PA_V, PA_V), 3, MASK, NTCCTprf_mask_VxVxV, NULL,
       COMPprfMask_VxVxV, NULL, SCCFprf_mask_VxVxV, NULL, SAAdim_of_arg1, SAAshp_of_arg1,
       NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Functions to define generic functions on udts
   */

  PRF (nested_shape, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_nested_shape, NULL, NULL, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * AL/DL representation of arithmetic expressions:
   */

  PRF (reciproc_S, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_ari_op_S, COreciproc, NULL,
       SCSprf_reciproc_S, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (reciproc_V, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_ari_op_V, COreciproc, NULL,
       SCSprf_reciproc_V, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Multithreaded code generation:
   */

  PRF (run_mt_genarray, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL,
       COMPprfRunMtGenarray, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (run_mt_modarray, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL,
       COMPprfRunMtModarray, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (run_mt_fold, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfRunMtFold,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * CUDA code generation:
   */
  PRF (prefetch2device, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfPrefetch2Device,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (prefetch2host, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfPrefetch2Host,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (device2host, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfDevice2Host,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (host2device, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfHost2Device,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (device2device, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL,
       COMPprfDevice2Device, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  /**
   * for async-like operations, where we need to delay memory access on host side.
   */
  PRF (host2device_start, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfHost2DeviceStart,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (device2host_start, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfDevice2HostStart,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (host2device_end, (PA_x, PA_x, PA_x), 2, XXX, NTCCTprf_dummy, NULL, COMPprfHost2DeviceEnd,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (device2host_end, (PA_x, PA_x, PA_x), 2, XXX, NTCCTprf_dummy, NULL, COMPprfDevice2HostEnd,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (cuda_wl_assign, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDAWLAssign, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cond_wl_assign, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCondWLAssign, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_thread_space, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDAThreadSpace, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_index_space, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDAIndexSpace, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_grid_block, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDAGridBlock, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (array_idxs2offset, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfArrayIdxs2Offset, NULL, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0,
       NULL, NULL, TEone, NULL, NULL),

  PRF (array_vect2offset, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfArrayVect2Offset, NULL, NULL, NULL, SAAdim_is_0, SAAshp_is_empty, NULL, 0,
       NULL, NULL, TEone, NULL, NULL),

  PRF (cuda_threadIdx_x, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDAThreadIdxX, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_threadIdx_y, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDAThreadIdxY, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_threadIdx_z, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDAThreadIdxZ, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_blockIdx_x, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDABlockIdxX, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_blockIdx_y, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDABlockIdxY, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_blockDim_x, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDABlockDimX, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_blockDim_y, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDABlockDimY, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_blockDim_z, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDABlockDimZ, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_gridDim_x, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDAGridDimX, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_gridDim_y, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfCUDAGridDimY, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (shmem_boundary_load, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfShmemBoundaryLoad, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (shmem_boundary_check, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfShmemBoundaryCheck, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL,
       TEone, NULL, NULL),

  PRF (syncthreads, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfSyncthreads,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (kernel_terminate, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfKernelTerminate, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cond, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfCond, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * CUDA Heterogeneous code generation:
   */
  PRF (get_cuda_thread, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL,
       COMPprfGetCudaThread, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_set_device, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL,
       COMPprfCudaSetDevice, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_get_stream, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL,
       COMPprfCudaGetStream, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, TEone,
       NULL, NULL),

  PRF (cuda_device_sync, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL,
       COMPprfCudaDeviceSync, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (host2dist_st, (PA_x, PA_x, PA_x), 3, XXX, NTCCTprf_dummy, NULL,
       COMPprfHost2Dist_st, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (host2dist_spmd, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL,
       COMPprfHost2Dist_spmd, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone,
       NULL, NULL),

  PRF (device2dist, (PA_x, PA_x, PA_x), 4, XXX, NTCCTprf_dummy, NULL, COMPprfDevice2Dist,
       NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  PRF (dist2host_rel, (PA_x, PA_x, PA_x), 4, XXX, NTCCTprf_dummy, NULL,
       COMPprfDist2Host_Rel, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, TEone,
       NULL, NULL),

  PRF (dist2device_rel, (PA_x, PA_x, PA_x), 4, XXX, NTCCTprf_dummy, NULL,
       COMPprfDist2Dev_Rel, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, TEone,
       NULL, NULL),

  PRF (dist2host_abs, (PA_x, PA_x, PA_x), 4, XXX, NTCCTprf_dummy, NULL,
       COMPprfDist2Host_Abs, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, TEone,
       NULL, NULL),

  PRF (dist2device_abs, (PA_x, PA_x, PA_x), 4, XXX, NTCCTprf_dummy, NULL,
       COMPprfDist2Dev_Abs, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, TEone,
       NULL, NULL),

  PRF (dist2dev_avail, (PA_x, PA_x, PA_x), 7, XXX, NTCCTprf_dummy, NULL,
       COMPprfDist2Dev_Avail, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, TEone,
       NULL, NULL),

  PRF (dist_cont_block, (PA_x, PA_x, PA_x), 7, XXX, NTCCTprf_dummy, NULL,
       COMPprfDistContBlock, NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, TEone,
       NULL, NULL),

  PRF (sched_start, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfSched_Start,
       NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, TEone, NULL, NULL),

  PRF (sched_stop, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfSched_Stop,
       NULL, NULL, NULL, NULL, NULL, NULL, 1, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Functions for functional parallelism
   */
  PRF (sync, (PA_x, PA_x, PA_x), 1, XXX, NTCCTprf_dummy, NULL, COMPprfSync, NULL, NULL,
       NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   * Functions for unsharing memory objects.
   */
  PRF (unshare, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, COMPprfUnshare, NULL,
       NULL, NULL, NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL),

  /*******************************************************************************
   *
   */
  PRF (unknown, (PA_x, PA_x, PA_x), 0, XXX, NTCCTprf_dummy, NULL, NULL, NULL, NULL, NULL,
       NULL, NULL, NULL, 0, NULL, NULL, TEone, NULL, NULL)

/*******************************************************************************
 * End of file
 */

#endif /* PRF_EXTERNAL_ONLY */

#undef PRFname
#undef PRFarg_encoding
#undef PRFarity
#undef PRFccode
#undef PRFsimd
#undef PRFntc_fun
#undef PRFco_fun
#undef PRFcomp_fun
#undef PRFcf_scs_fun
#undef PRFcf_sccf_fun
#undef PRFcf_saa_fun
#undef PRFmakedim_fun
#undef PRFmakeshp_fun
#undef PRFalloc_fun
#undef PRFnum_dataflow_returns
#undef PRFshape_oracle_fun
#undef PRFicc_fun
#undef PRFte_fun
#undef PRFunused2
#undef PRFunused3
