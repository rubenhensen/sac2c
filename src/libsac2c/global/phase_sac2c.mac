#include "phase_initialise_defs.mac"

/******************************************************************************/
PHASE (scp, "Loading SAC program", !global.runtime)

ADDPREFUN (TR_cmpt, CMPTnodeType) /* Add at the earliest point,
                                   * and removed at the end
								   */

SUBPHASE (loc, "Locating source code", SPdoLocateSource, ALWAYS, scp)

SUBPHASE (cpp, "Running C preprocessor", SPdoRunPreProcessor, ALWAYS, scp)

SUBPHASE (prs, "Parsing input file", SPdoScanParse, ALWAYS, scp)

ENDPHASE (scp)

/******************************************************************************/

PHASE (pre, "Preprocessing SAC program", !global.runtime)

SUBPHASE (ffc, "Assigning type pattern constraints to pre- and post-conditions",
          FFCdoFilterFundefConditions,
          ALWAYS, pre)

SUBPHASE (atp, "Analysing type patterns and converting to built-in types",
          ATPdoAnalyseTypePattern,
          ALWAYS, pre)

SUBPHASE (rtpf, "Turning type pattern functions into code",
          RTPFdoResolveTypePatternFundefs,
          ALWAYS, pre)

SUBPHASE (rtpe, "Turning external type patterns into code",
          RTPEdoResolveTypePatternExternals,
          global.insertconformitychecks, pre)

SUBPHASE (hs, "Hiding struct definitions behind typedefs and accessors", HSdoHideStructs,
          ALWAYS, pre)

SUBPHASE (iotc, "Introducing user-tracing calls", IUTCdoIntroduceUserTraceCalls,
          global.dousertrace, pre)

SUBPHASE (seri, "Inferring Ranges for Set Expressions", SERIdoInferRanges, ALWAYS,
          pre)

SUBPHASE (hsed, "Handling dots in Set Notation", HSEDdoEliminateSetExpressionDots, ALWAYS,
          pre)

SUBPHASE (hse, "Translating Set Notation into With-Loops", HSEdoEliminateSetExpressions, ALWAYS,
          pre)

SUBPHASE (hsd, "Handling dots in selections", HSDdoEliminateSelDots, ALWAYS,
          pre)

SUBPHASE (zgwl, "Handling zero-generator with-loops", HZGWLdoHandleZeroGeneratorWithLoops,
          ALWAYS, pre)

SUBPHASE (mgwl, "Handling multi-generator with-loops", HWLGdoHandleWithLoops, ALWAYS, pre)

SUBPHASE (mowl, "Handling multi-operator with-loops", HWLOdoHandleWithLoops, ALWAYS, pre)

SUBPHASE (hwld, "Handling dots in with-loop generators", HWLDdoEliminateWithLoopDots, ALWAYS,
          pre)

SUBPHASE (rsp, "Resolving pragma annotations", RSPdoResolvePragmas, ALWAYS, pre)

SUBPHASE (obi, "Generating object initializers", OIdoObjectInit, ALWAYS, pre)

SUBPHASE (csgd, "Checking and simplifying generic definitions",
          CSGDdoCheckAndSimplifyGenericDefinitions, ALWAYS, pre)

ENDPHASE (pre)

/******************************************************************************/

PHASE (mod, "Running module system", ALWAYS)

SUBPHASE (prcl, "Parse runtime optimization commandline", RTsetupRuntimeCompiler,
          global.runtime, mod)

SUBPHASE (rsa, "Processing use and import statements", RSAdoResolveAll, ALWAYS, mod)

SUBPHASE (ans, "Annotating namespaces", ANSdoAnnotateNamespace, ALWAYS, mod)

SUBPHASE (gdp, "Gathering dependencies", GDPdoGatherDependencies, ALWAYS, mod)

SUBPHASE (imp, "Retrieving imported symbols", IMPdoImportSymbols, ALWAYS, mod)

SUBPHASE (uss, "Retrieving used symbols", USSdoUseSymbols, ALWAYS, mod)

SUBPHASE (asf, "Loading prelude functions", ASFdoAddSpecialFunctions, ALWAYS, mod)

SUBPHASE (rtfilter, "Filter unneeded functions (runtime specialization)", RTdoFilter,
          global.runtime, mod)

ENDPHASE (mod)

/******************************************************************************/

PHASE (sim, "Simplifying source code", ALWAYS)

SUBPHASE (w2d, "Transforming while-loops into do-loops", W2DdoTransformWhile2Do, ALWAYS,
          sim)

SUBPHASE (ece, "Eliminating conditional expressions", HCEdoHandleConditionalExpressions,
          ALWAYS, sim)

SUBPHASE (moe, "Handling multiple operator expressions", HMdoHandleMops, ALWAYS, sim)

SUBPHASE (flt, "Flattening nested expressions", FLATdoFlatten, ALWAYS, sim)

SUBPHASE (udt, "Processing user defined types", RSTdoResolveSymbolTypes, ALWAYS, sim)

SUBPHASE (gntc, "Generating nested type conversion functions",
          GNTCdoGenerateNestedTypeConversions, ALWAYS, sim)

SUBPHASE (ggtc, "Generating generic type conversion functions",
          GGTCdoGenerateGenericTypeConversions, ALWAYS, sim)

ENDPHASE (sim)

/******************************************************************************/

PHASE (ptc, "Converting to static single assignment form", ALWAYS)

SUBPHASE (ivd, "Inserting variable declarations", INSVDdoInsertVardec, ALWAYS, ptc)

/*
 * This needs the variable declarations but the
 * array indices should not have been converted in any way.
 * So it goes here.
 */
SUBPHASE (dmmls, "Mark local selects for distmem backend", DMMLSdoMarkLocalSelects,
          global.backend == BE_distmem && global.optimize.dodmmls, ptc)

SUBPHASE (itc, "Converting type decls into type conversions", INSTCdoInsertTypeConv,
          ALWAYS, ptc)

SUBPHASE (cwf, "Creating wrapper functions", CRTWRPdoCreateWrappers, ALWAYS, ptc)

SUBPHASE (gon, "Running global object analysis", OANdoObjectAnalysis, ALWAYS, ptc)

SUBPHASE (goi, "Generating global object initialiser", GOIdoGenerateObjectInitialiser,
          ALWAYS, ptc)

SUBPHASE (rso, "Resolving global objects", RSOdoResolveObjects, ALWAYS, ptc)

SUBPHASE (rrp, "Resolving reference parameters", RRAdoResolveReferenceArgs, ALWAYS, ptc)

SUBPHASE (ewt, "Extending dispatch information", EWTdoExtendWrapperTypes, ALWAYS, ptc)

SUBPHASE (l2f, "Eliminating loops and conditionals", L2FdoLac2Fun, ALWAYS, ptc)

SUBPHASE (elf, "Extending LaC funs", ELFdoExtendLacFuns, global.elf, ptc)

SUBPHASE (ssa, "Establishing static single assignment form", SSATdoTransform, ALWAYS, ptc)

ENDPHASE (ptc)

/******************************************************************************/

PHASE (tc, "Running type inference system", ALWAYS)

SUBPHASE (esp, "Enforcing Specializations", ESPdoEnforceSpecialization, ALWAYS, tc)

SUBPHASE (sossk, "Specialization Oracle for Static Shape Knowledge",
          SOSSKdoSpecializationOracleSSK, global.dotogstuff, tc)

SUBPHASE (ti, "Running type inference system", NTCdoNewTypeCheck, ALWAYS, tc)

SUBPHASE (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes, ALWAYS, tc)

SUBPHASE (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes, ALWAYS, tc)

SUBPHASE (swr, "Splitting Wrappers", SWRdoSplitWrappers, ALWAYS, tc)

ENDPHASE (tc)

/******************************************************************************/

PHASE (exp, "Processing exports", ALWAYS)

SUBPHASE (exp, "Exporting symbols", EXPdoExport, ALWAYS, exp)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr,
          exp)

SUBPHASE (uid, "Set unique ids for generic functions", UIDdoSetFunctionIDs,
          (global.config.rtspec == TRUE)
            && (global.rtspec_mode == RTSPEC_MODE_HASH
                || global.rtspec_mode == RTSPEC_MODE_UUID),
          exp)

SUBPHASE (ser, "Serializing syntax tree", SERdoSerialize,
          !global.notree
            && (global.filetype == FT_modimp || global.filetype == FT_classimp),
          exp)

ENDPHASE (exp)

/******************************************************************************/

PHASE (popt, "Preparing for code optimization", !global.on_demand_lib)

SUBPHASE (rgd, "Removing generic function definitions", RGDdoRemoveGenericDefinitions,
          ALWAYS, popt)

SUBPHASE (iif, "Restoring bodies of imported inline functions", PPIdoPrepareInline,
          ALWAYS, popt)

SUBPHASE (cspf, "MUTC Creating spawn functions", CSPFdoCreateSpawnFunctions,
          (global.backend == BE_mutc), popt)

SUBPHASE (cua, "Checking uniqueness annotations", CUAdoCheckUniquenessAnnotations, ALWAYS,
          popt)

SUBPHASE (cuq, "Checking uniqueness", CUdoCheckUniqueness, ALWAYS, popt)

#ifdef CG_STRUCT_TRY

SUBPHASE (dfc, "Trying to dispatch functions statically", DFCdoDispatchFunCalls, ALWAYS,
          popt)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr,
          popt)

SUBPHASE (des, "Resolving structs", DESdoDeStruct, ALWAYS, popt)

SUBPHASE (ewt, "Extending dispatch information", EWTdoExtendWrapperTypes, ALWAYS, popt)

SUBPHASE (cwb, "Creating Wrapper Bodies", CWCdoCreateWrapperCode, ALWAYS, popt)

SUBPHASE (l2f, "Eliminating conditionals in wrapper code", L2FdoLac2Fun, ALWAYS, popt)

SUBPHASE (ssa, "Establishing static single assignment form in wrapper code",
          SSATdoTransformAllowGOs, ALWAYS, popt)

#else /*  CG_STRUCT_TRY */

SUBPHASE (cwb, "Creating Wrapper Bodies", CWCdoCreateWrapperCode, ALWAYS, popt)

SUBPHASE (l2f, "Eliminating conditionals in wrapper code", L2FdoLac2Fun, ALWAYS, popt)

SUBPHASE (ssa, "Establishing static single assignment form in wrapper code",
          SSATdoTransform, ALWAYS, popt)

SUBPHASE (dfc, "Trying to dispatch functions statically", DFCdoDispatchFunCalls, ALWAYS,
          popt)

SUBPHASE (des, "Removing all structs", DESdoDeStruct, ALWAYS, popt)

#endif /*  CG_STRUCT_TRY */

SUBPHASE (eudt, "Eliminating User-Defined Types", RCdoRemoveCasts, ALWAYS, popt)

SUBPHASE (cse, "Applying common subexpression elimination",
          CSEdoCommonSubexpressionElimination, global.optimize.docse, popt)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr, popt)

SUBPHASE (icc, "Inserting Conformity Checks", ICCdoInsertConformityChecks,
          global.insertconformitychecks, popt)

SUBPHASE (ti, "Running type inference system", NTCdoNewReTypeCheckFromScratch, ALWAYS,
          popt)

SUBPHASE (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes, ALWAYS, popt)

SUBPHASE (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes, ALWAYS, popt)

ENDPHASE (popt)

/******************************************************************************/

PHASE (ewl, "Enhancing with-loops", !global.on_demand_lib)

SUBPHASE (accu, "Introducing explicit accumulators", EAdoExplicitAccumulate, ALWAYS, ewl)

SUBPHASE (adp, "Adding default partitions", WLDPdoWlDefaultPartition, ALWAYS, ewl)

SUBPHASE (cf, "Applying constant folding", CFdoConstantFolding,
          global.optimize.docf &&global.optimize.doewlcf, ewl)

SUBPHASE (cse, "Applying common subexpression elimination",
          CSEdoCommonSubexpressionElimination, global.optimize.docse, ewl)

SUBPHASE (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
          ALWAYS, ewl)

SUBPHASE (wlbsc, "Ensuring structural constants for with-loop partition bounds",
          WLBSCdoWlbounds2structConsts, ALWAYS, ewl)

ENDPHASE (ewl)

/******************************************************************************/

PHASE (opt, "Running SAC optimizations", !global.on_demand_lib)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr,
          opt)

SUBPHASE (inl, "Applying function inlining", INLdoInlining, global.optimize.doinl, opt)

SUBPHASE (tgtl, "Transform gt and ge operators to lt and le operators",
          TGTLdoTransformGtgeToLtle, global.optimize.dotgtl, opt)

SUBPHASE (dfr2, "Removing dead functions", DFRdoDeadFunctionRemoval,
          global.optimize.dodfr, opt)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr, opt)

SUBPHASE (glf, "Grouping local functions", GLFdoGroupLocalFuns, ALWAYS, opt)

SUBPHASE (linl, "Inlining degenerated LaC functions", LINLdoLACInlining, global.lacinline,
          opt)

CYCLE (cyc, "Optimization cycle", global.optimize.docyc, opt, RESET)

FUNBEGIN (cyc, opt, cyc)

CYCLEPHASEFUN (cse, "Applying common subexpression elimination",
               CSEdoCommonSubexpressionElimination, global.optimize.docse, opt, cyc)

CYCLEPHASEFUN (ainl, "Determine candidate functions for inlining", AINLdoAutoInlining,
               global.optimize.doainl, opt, cyc)

CYCLEPHASEFUN (ili, "Inferring loop invariant variables",
               IIPIdoIterationInvariantParameterInference, ALWAYS, opt, cyc)

CYCLEPHASEFUNOLD (tup, "Applying type upgrade", NTCdoNewTypeCheck, global.optimize.dotup,
                  opt, cyc)

CYCLEPHASEFUN (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes,
               global.optimize.dotup, opt, cyc)

CYCLEPHASEFUN (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes,
               global.optimize.dotup, opt, cyc)

CYCLEPHASEFUN (dfc, "Applying function call dispatch", DFCdoDispatchFunCalls, ALWAYS, opt,
               cyc)

CYCLEPHASEFUNOLD (inl, "Applying inlining", INLdoInlining, global.optimize.doinl, opt,
                  cyc)

CYCLEPHASEFUNOLD (tgtl, "Transform gt and ge operators to lt and le operators",
                  TGTLdoTransformGtgeToLtle, global.optimize.dotgtl, opt, cyc)

CYCLEPHASEFUN (wlprop, "Applying with-loop propagation", WLPROPdoWithloopPropagation,
               global.optimize.dowlprop, opt, cyc)

CYCLEPHASEFUN (ls, "Applying Loop Scalarization", LSdoLoopScalarization,
               global.optimize.dols, opt, cyc)

CYCLEPHASEFUN (lacsi, "Applying Loop & Conditional Argument Scalarization",
               LACSIdoLoopAndCondScalarization, global.optimize.dolacsi, opt, cyc)

CYCLEPHASEFUN (lacso, "Applying Loop & Conditional Result Scalarization",
               LACSOdoLoopAndCondScalarization, global.optimize.dolacso, opt, cyc)

CYCLEPHASEFUN (cf, "Applying constant folding", CFdoConstantFolding, global.optimize.docf,
               opt, cyc)

CYCLEPHASEFUNOLD (linl, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, cyc)

CYCLEPHASEFUN (vp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, opt,
               cyc)

CYCLEPHASEFUN (rea, "Reorder arguments of equality primitive function ",
               REAdoReorderEqualityprfArguments, global.optimize.dorea, opt, cyc)

CYCLEPHASEFUN (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
               global.optimize.dowlpg, opt, cyc)

CYCLEPHASEFUN (wlbsc, "Ensuring structural constants for with-loop partition bounds",
               WLBSCdoWlbounds2structConsts, global.optimize.dowlpg, opt, cyc)

CYCLEPHASEFUN (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification,
               global.optimize.dowlsimp, opt, cyc)

CYCLEPHASEFUN (cwle, "Eliminate copy with-loops", CWLEdoCopyWithLoopElimination,
               global.optimize.docwle, opt, cyc)

CYCLEPHASEFUN (wli, "Inferring foldable with-loops", WLIdoWLI, global.optimize.dowlf, opt,
               cyc)

CYCLEPHASEFUN (wlf, "Applying with-loop folding", WLFdoWLF, global.optimize.dowlf, opt,
               cyc)

CYCLEPHASEFUNOLD (wlfssa, "Restoring SSA form after with-loop folding", SSATdoTransform,
                  global.optimize.dowlf, opt, cyc)

CYCLEPHASEFUN (dcr, "Applying dead code removal", DCRdoDeadCodeRemoval,
               global.optimize.dodcr, opt, cyc)

CYCLEPHASEFUNOLD (linl2, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, cyc)

CYCLEPHASEFUN (dlir, "Applying do-loop invariant removal", DLIRdoLoopInvariantRemoval,
               global.optimize.dodlir, opt, cyc)

CYCLEPHASEFUN (wliri, "Applying with-loop invariant removal", WLIRIdoLoopInvariantRemovalInference,
               global.optimize.dowlir, opt, cyc)

CYCLEPHASEFUN (wlir, "Applying with-loop invariant removal", WLIRdoLoopInvariantRemoval,
               global.optimize.dowlir, opt, cyc)

CYCLEPHASEFUN (wls, "Applying with-loop scalarization", WLSdoWithloopScalarization,
               global.optimize.dowls, opt, cyc)

CYCLEPHASEFUN (prfunr, "Applying prf unrolling", UPRFdoUnrollPRFs,
               global.optimize.doprfunr, opt, cyc)

CYCLEPHASEFUN (etc, "Eliminating typeconv primitives", ETCdoEliminateTypeConversions,
               global.optimize.doetc, opt, cyc)

CYCLEPHASEFUN (xvp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp,
               opt, cyc)

CYCLEPHASEFUN (xrea, "Reorder arguments of equality primitive function ",
               REAdoReorderEqualityprfArguments, global.optimize.dorea, opt, cyc)

CYCLEPHASEFUN (lur, "Applying loop unrolling", LURdoLoopUnrolling, global.optimize.dolur,
               opt, cyc)

CYCLEPHASEFUNOLD (lurssa, "Restoring SSA form after loop unrolling", SSATdoTransform,
                  global.optimize.dolur || global.optimize.doplur, opt, cyc)

CYCLEPHASEFUNOLD (wlur, "Applying withloop unrolling", WLURdoWithloopUnrollingFundef,
                  global.optimize.dowlur, opt, cyc)

CYCLEPHASEFUNOLD (wlurssa, "Restoring SSA form after withloop unrolling", SSATdoTransform,
                  global.optimize.dowlur, opt, cyc)

CYCLEPHASEFUNOLD (ctzg, "Comparison to zero conversion for guards",
                  CTZGdoComparisonToZeroGuards, global.optimize.doctzg, opt, cyc)

CYCLEPHASEFUN (ctz, "Comparison to zero conversion", CTZdoComparisonToZero,
               global.optimize.doctz, opt, cyc)

CYCLEPHASEFUN (esd, "Eliminating subtraction and division operators", ESDdoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, cyc)

CYCLEPHASEFUN (esdcf, "Applying constant folding (esd case)", CFdoConstantFolding,
               (global.optimize.docf && (global.optimize.doal || global.optimize.dodl)),
               opt, cyc)

CYCLEPHASEFUN (esdcse, "Applying common subexpression elimination (esd case)",
               CSEdoCommonSubexpressionElimination,
               (global.optimize.docse && (global.optimize.doal || global.optimize.dodl)),
               opt, cyc)

CYCLEPHASEFUN (as, "Arithmetic Simplification", ASdoArithmeticSimplification,
               global.optimize.doas, opt, cyc)

CYCLEPHASEFUN (al, "Applying associative law", ALdoAssocLawOptimization,
               global.optimize.doal, opt, cyc)

CYCLEPHASEFUN (dl, "Applying distributive law", DLdoDistributiveLawOptimization,
               global.optimize.dodl, opt, cyc)

CYCLEPHASEFUN (uesd, "Reintroducing subtraction and division operators",
               UESDdoUndoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, cyc)

CYCLEPHASEFUN (dcr2, "Applying dead code removal", DCRdoDeadCodeRemoval,
               global.optimize.dodcr, opt, cyc)

CYCLEPHASEFUNOLD (linl3, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, cyc)

FUNEND (cyc)

CYCLEPHASE (sisi, "Simplifying function signatures", SISIdoSignatureSimplification,
            global.optimize.dosisi &&global.optimize.dodcr, opt, cyc)

CYCLEPHASE (lof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS, opt, cyc)

ENDCYCLE (cyc)

CYCLE (saacyc, "Symbolic array attribute cycle 2", global.optimize.dosaacyc, opt, RESET)

FUNBEGIN (saacyc, opt, saacyc)

CYCLEPHASEFUNOLD (isaa, "Inserting symbolic array attributes", ISAAdoInsertShapeVariables,
                  global.optimize.dosaa, opt, saacyc)

CYCLEPHASEFUN (ggs, "Generate guard solvers", GGSdoGenerateGuardSolvers,
               global.optimize.doggs, opt, saacyc)

/* ivesplit placed here for no good reason */
CYCLEPHASEFUN (ivesplit, "Eliminating index vectors (split selections)",
               IVESPLITdoSplitSelections,
               global.optimize.doive &&global.optimize.doivecyc, opt, saacyc)

CYCLEPHASEFUN (cse, "Eliminating common subexpressions",
               CSEdoCommonSubexpressionElimination, global.optimize.docse, opt, saacyc)

CYCLEPHASEFUN (prfunr, "Applying prf unrolling", UPRFdoUnrollPRFs,
               global.optimize.doprfunr, opt, saacyc)

CYCLEPHASEFUN (ili, "Inferring loop invariant variables",
               IIPIdoIterationInvariantParameterInference, ALWAYS, opt, saacyc)

CYCLEPHASEFUNOLD (tup, "Applying type upgrade", NTCdoNewTypeCheck, global.optimize.dotup,
                  opt, saacyc)

CYCLEPHASEFUN (etv, "Eliminating type variables", EATdoEliminateAlphaTypes,
               global.optimize.dotup, opt, saacyc)

CYCLEPHASEFUN (ebt, "Eliminating bottom types", EBTdoEliminateBottomTypes,
               global.optimize.dotup, opt, saacyc)

CYCLEPHASEFUN (dfc, "Applying function call dispatch", DFCdoDispatchFunCalls, ALWAYS, opt,
               saacyc)

CYCLEPHASEFUNOLD (inl, "Applying inlining", INLdoInlining, global.optimize.doinl, opt,
                  saacyc)

CYCLEPHASEFUNOLD (tgtl, "Transform gt and ge operators to lt and le operators",
                  TGTLdoTransformGtgeToLtle, global.optimize.dotgtl, opt, saacyc)

CYCLEPHASEFUN (wlprop, "Applying with-loop propagation", WLPROPdoWithloopPropagation,
               global.optimize.dowlprop, opt, saacyc)

CYCLEPHASEFUN (ls, "Applying Loop Scalarization", LSdoLoopScalarization,
               global.optimize.dols, opt, saacyc)

CYCLEPHASEFUN (lacsi, "Applying Loop & Conditional Argument Scalarization",
               LACSIdoLoopAndCondScalarization, global.optimize.dolacsi, opt, saacyc)

CYCLEPHASEFUN (lacso, "Applying Loop & Conditional Result Scalarization",
               LACSOdoLoopAndCondScalarization, global.optimize.dolacso, opt, saacyc)

CYCLEPHASEFUN (cf, "Applying constant folding", CFdoConstantFolding, global.optimize.docf,
               opt, saacyc)

CYCLEPHASEFUNOLD (linl, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, saacyc)

CYCLEPHASEFUN (vp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, opt,
               saacyc)

CYCLEPHASEFUN (rea, "Reorder arguments of equality primitive function ",
               REAdoReorderEqualityprfArguments, global.optimize.dorea, opt, saacyc)

CYCLEPHASEFUN (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
               global.optimize.dowlpg, opt, saacyc)

CYCLEPHASEFUN (wlbsc, "Unflattening WL-partition structural constants",
               WLBSCdoWlbounds2nonFlatStructConsts, global.optimize.dowlpg, opt, saacyc)

CYCLEPHASEFUN (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification,
               global.optimize.dowlsimp, opt, saacyc)

CYCLEPHASEFUN (cwle, "Eliminate copy with-loops", CWLEdoCopyWithLoopElimination,
               global.optimize.docwle, opt, saacyc)

CYCLEPHASEFUN (wli, "Inferring foldable with-loops", WLIdoWLI, global.optimize.dowlf, opt,
               saacyc)

CYCLEPHASEFUN (wlf, "Applying with-loop folding", WLFdoWLF, global.optimize.dowlf, opt,
               saacyc)

CYCLEPHASEFUNOLD (wlfssa, "Restoring SSA form after with-loop folding", SSATdoTransform,
                  global.optimize.dowlf, opt, saacyc)

#ifdef MISGUIDED // Causes woes in AWLFI inverse projection. Should be post-opt
CYCLEPHASEFUNOLD (iveras, "Eliminating index vectors (reuse WL-offsets and scalarize)",
                  IVERASdoWithloopReuseAndOptimisation,
                  global.optimize.doive &&global.optimize.doivecyc, opt, saacyc)
#endif // MISGUIDED

CYCLEPHASEFUN (ivexi, "Inserting index vector extrema", IVEXIdoInsertIndexVectorExtrema,
               global.doivext, opt, saacyc)

CYCLEPHASEFUN (ivexp, "Propagating index vector extrema", IVEXPdoIndexVectorExtremaProp,
               global.doivext, opt, saacyc)

CYCLEPHASEFUN (petl, "Propagate extrema thru lacfuns", PETLdoPropagateExtremaThruLacfuns,
               global.optimize.dopetl, opt, saacyc)

// Polyhedral optimizations can be very expensive, so
// we clean up the AST before performing them, by doing
// DLFR, CSE, VP, and DCR.

CYCLEPHASEFUNOLD (dlfr, "Removing dead local functions", DLFRdoDeadLocalFunctionRemoval,
                  global.optimize.dodlfr, opt, saacyc)

#ifdef BUG1147 // still
CYCLEPHASEFUN (pvp, "Propagating variables for polyhedral optimizations",
               VPdoVarPropagation, global.optimize.dovp, opt, saacyc)
#endif // BUG1147 // still

CYCLEPHASEFUN (pcse, "Eliminating common subexpressions for polyhedral optimizations",
               CSEdoCommonSubexpressionElimination, global.optimize.docse, opt, saacyc)

CYCLEPHASEFUN (pdcr, "Removing dead code for polyhedral optimizations",
               DCRdoDeadCodeRemoval, global.optimize.dodcr, opt, saacyc)

// At present, SSA form for N_withid nodes is supported only
// during polyhedral optimizations. Ideally, the whole
// compiler would allow this, so if you need with-loops in SSA form,
// get out your coding pencil.
//
// NB. Some functions, such as NTCpart, have to know when
// NB. in ssawl mode. They find this out by looking at
// NB. global.compiler_anyphase. If you change ssawl and/or
// NB. ussawl, these checks must also be adjusted, to
// NB. reflect the new limits of ssawl mode.

CYCLEPHASEFUN (ssawl, "Convert withids to SSA form", SSAWdoTransformToSSA,
               global.optimize.dopogo || global.optimize.dopwlf || global.optimize.doplur,
               opt, saacyc)

// Start of Polyhedral-based optimizations. Please keep these in
// a contiguous block, delimited by polys and polyt.
CYCLEPHASEFUN (polys, "Polyhedral analysis setup", POLYSdoPolyhedralSetup,
               global.optimize.dopogo || global.optimize.dopwlf || global.optimize.doplur,
               opt, saacyc)

CYCLEPHASEFUN (plur, "Polyhedral loop unrolling", PLURdoPolyhedralLoopUnrolling,
               global.optimize.doplur, opt, saacyc)

CYCLEPHASEFUN (pogo, "Polyhedral guard optimization", POGOdoPolyhedralGuardOptimization,
               global.optimize.dopogo, opt, saacyc)

CYCLEPHASEFUN (pwlf, "Polyhedral with loop folding", PWLFdoPolyhedralWithLoopFolding,
               global.optimize.dopwlf, opt, saacyc)

CYCLEPHASEFUN (polyt, "Polyhedral analysis tear down", POLYSdoPolyhedralTearDown,
               global.optimize.dopogo || global.optimize.dopwlf || global.optimize.doplur,
               opt, saacyc)
CYCLEPHASEFUN (ussawl, "Convert withids from SSA form", SSAWdoTransformFromSSA,
               global.optimize.dopogo || global.optimize.dopwlf || global.optimize.doplur,
               opt, saacyc)
// End of Polyhedral-based optimizations.

CYCLEPHASEFUN (awlfi, "Inferring algebraically foldable with-loops",
               AWLFIdoAlgebraicWithLoopFolding, global.optimize.doawlf, opt, saacyc)

/* CUBSL needs this for partition-slicing decisions. */
CYCLEPHASEFUN (cse2, "Eliminating common subexpressions",
               CSEdoCommonSubexpressionElimination, global.optimize.docse, opt, saacyc)

CYCLEPHASEFUN (wliricubsl, "Applying with-loop invariant removal inference for CUBSL",
               WLIRIdoLoopInvariantRemovalInference,
               global.optimize.dowlir &&global.optimize.docubsl, opt, saacyc)

CYCLEPHASEFUN (wlircubsl, "Applying with-loop invariant removal for CUBSL",
               WLIRdoLoopInvariantRemoval,
               global.optimize.dowlir &&global.optimize.docubsl, opt, saacyc)

CYCLEPHASEFUN (cubsl, "Slicing algebraically foldable with-loops",
               CUBSLdoAlgebraicWithLoopFoldingCubeSlicing,
               global.optimize.docubsl
                 && (global.optimize.doawlf || global.optimize.dopwlf),
               opt, saacyc)

CYCLEPHASEFUN (awlf, "Applying algebraic with-loop folding",
               AWLFdoAlgebraicWithLoopFolding, global.optimize.doawlf, opt, saacyc)

CYCLEPHASEFUN (dcr, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr,
               opt, saacyc)

CYCLEPHASEFUNOLD (linl2, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, saacyc)

CYCLEPHASEFUN (dlir, "Applying do-loop invariant removal", DLIRdoLoopInvariantRemoval,
               global.optimize.dodlir, opt, saacyc)

CYCLEPHASEFUN (wliri, "Applying with-loop invariant removal", WLIRIdoLoopInvariantRemovalInference,
               global.optimize.dowlir, opt, saacyc)

CYCLEPHASEFUN (wlir, "Applying with-loop invariant removal", WLIRdoLoopInvariantRemoval,
               global.optimize.dowlir, opt, saacyc)

CYCLEPHASEFUN (wls, "Applying with-loop scalarization", WLSdoWithloopScalarization,
               global.optimize.dowls, opt, saacyc)

CYCLEPHASEFUN (lur, "Applying loop unrolling", LURdoLoopUnrolling,
               global.optimize.dolur || global.optimize.doplur, opt, saacyc)

CYCLEPHASEFUNOLD (lurssa, "Restoring SSA form after loop unrolling", SSATdoTransform,
                  global.optimize.dolur || global.optimize.doplur, opt, saacyc)

CYCLEPHASEFUNOLD (wlur, "Applying withloop unrolling", WLURdoWithloopUnrollingFundef,
                  global.optimize.dowlur, opt, saacyc)

CYCLEPHASEFUNOLD (wlurssa, "Restoring SSA form after withloop unrolling", SSATdoTransform,
                  global.optimize.dowlur, opt, saacyc)

CYCLEPHASEFUN (etc, "Eliminating typeconv primitives", ETCdoEliminateTypeConversions,
               global.optimize.doetc, opt, saacyc)

CYCLEPHASEFUNOLD (ctzg, "Comparison to zero conversion for guards",
                  CTZGdoComparisonToZeroGuards, global.optimize.doctzg, opt, saacyc)

CYCLEPHASEFUN (ctz, "Comparison to zero conversion", CTZdoComparisonToZero,
               global.optimize.doctz, opt, saacyc)

CYCLEPHASEFUN (esd, "Eliminating subtraction and division operators", ESDdoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, saacyc)

CYCLEPHASEFUN (as, "Arithmetic Simplification", ASdoArithmeticSimplification,
               global.optimize.doas, opt, saacyc)

CYCLEPHASEFUN (esdcf, "Applying constant folding (esd case)", CFdoConstantFolding,
               (global.optimize.docf && (global.optimize.doal || global.optimize.dodl)),
               opt, saacyc)

CYCLEPHASEFUN (esdcse, "Applying common subexpression elimination (esd case)",
               CSEdoCommonSubexpressionElimination,
               (global.optimize.docse && (global.optimize.doal || global.optimize.dodl)),
               opt, saacyc)

CYCLEPHASEFUN (al, "Applying associative law", ALdoAssocLawOptimization,
               global.optimize.doal, opt, saacyc)

CYCLEPHASEFUN (dl, "Applying distributive law", DLdoDistributiveLawOptimization,
               global.optimize.dodl, opt, saacyc)

CYCLEPHASEFUN (uesd, "Reintroducing subtraction and division operators",
               UESDdoUndoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, saacyc)

CYCLEPHASEFUN (safa, "Sorting associative function arguments",
               SAFAdoSortAssociativeFunctionArguments, global.optimize.dosafa, opt,
               saacyc)

CYCLEPHASEFUN (dcr2, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr,
               opt, saacyc)

CYCLEPHASEFUNOLD (linl3, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, saacyc)

CYCLEPHASEFUNOLD (edfa, "Eliminating duplicate lacfun arguments",
                  EDFAdoEliminateDuplicateFundefArgs, global.optimize.doedfa, opt, saacyc)

FUNEND (saacyc)

CYCLEPHASE (sisi, "Simplifying function signatures", SISIdoSignatureSimplification,
            global.optimize.dosisi &&global.optimize.dodcr, opt, saacyc)

CYCLEPHASE (lof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS, opt, saacyc)

ENDCYCLE (saacyc)

/*************************************************/

SUBPHASE (dfr3, "Removing dead functions", DFRdoDeadFunctionRemoval,
          global.optimize.dodfr, opt)

SUBPHASE (uctz, "Eliminating comparisons to zero", UCZCdoUndoCondZeroCmp,
          global.optimize.douctz, opt)

SUBPHASE (wlbscnf2, "Unflattening WL-partition structural constants",
          WLBSCdoWlbounds2nonFlatStructConsts, ALWAYS, opt)

SUBPHASE (rgs, "Remove guard solvers", GGSdoRemoveGuardSolvers, global.optimize.doggs,
          opt)

/*
 * The next calls to vp, cse, dcr are not necessary, but they
 * do clean up a lot of the mess made by AL/DL and friends, and
 * facilitate analysis of code by automated unit test scripts, while
 * still in GLF mode.
 * We can kill them or move them into saacyc, if somebody thinks
 * that is a better idea.
 *
 */

SUBPHASE (vp2, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, opt)

SUBPHASE (cse3, "Eliminating common subexpression", CSEdoCommonSubexpressionElimination,
          global.optimize.docse, opt)

SUBPHASE (dcr3, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr, opt)

SUBPHASE (uglf, "Ungrouping local functions", UGLFdoUngroupLocalFuns, ALWAYS, opt)

SUBPHASE (tup, "Running final type inference", NTCdoNewReTypeCheckFromScratch, ALWAYS,
          opt)

SUBPHASE (etv, "Eliminating type variables", EATdoEliminateAlphaTypes, ALWAYS, opt)

SUBPHASE (ebt, "Eliminating bottom types", EBTdoEliminateBottomTypes, ALWAYS, opt)

SUBPHASE (cffinal, "Final round of constant folding", CFdoConstantFolding,
          global.optimize.docf, opt)

SUBPHASE (wlfs, "Applying with-loop fusion", WLFSdoWithloopFusion, global.optimize.dowlfs,
          opt)

SUBPHASE (wlfscse, "Eliminating common subexpressions after fusion",
          CSEdoCommonSubexpressionElimination,
          global.optimize.dowlfs &&global.optimize.docse, opt)

SUBPHASE (wlfsdcr, "Removing dead code after fusion", DCRdoDeadCodeRemoval,
          global.optimize.dowlfs &&global.optimize.dodcr, opt)

/*
 * !!! If they should ever work again, WLAA, TSI, and AP must run here
 */

SUBPHASE (wlpg2, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
          ALWAYS,
          /*
           * Another MANDATORY run of WLPG. This is necessary to prevent AKSIV
           * with-loops to arrive at wltransform
           */
          opt)

ADDPREFUN (TR_prt, WRCIprintPreFun)

SUBPHASE (wrci, "Inferencing with-loop reuse candidates",
          WRCIdoWithloopReuseCandidateInference, global.optimize.douip, opt)

SUBPHASE (ivexc, "Cleaning up index vector extrema", IVEXCdoIndexVectorExtremaCleanup,
          ALWAYS, opt)

SUBPHASE (wlidx, "Annotating offset variable at with-loops", WLIDXdoAnnotateWithloopIdxs,
          ALWAYS, opt)

SUBPHASE (ivesplit, "Eliminating index vectors (split selections)",
          IVESPLITdoSplitSelections, global.optimize.doive, opt)

SUBPHASE (ivesli, "Eliminating index vectors (split loop invariants)",
          IVESLIdoIVESplitLoopInvariants,
          global.optimize.doive &&global.optimize.doivesli, opt)

SUBPHASE (ivevp, "Propagating variables (for IVE)", VPdoVarPropagation,
          global.optimize.doive &&global.optimize.dovp, opt)

SUBPHASE (dcr4, "Removing dead code", DCRdoDeadCodeRemoval,
          (global.optimize.doive) && global.optimize.dodcr, opt)

/*************************************************/

/* This cycle moved after IVE in the hopes that:
 * 1. It is not needed immediately after SAACYC,
 *    where it was previously, and
 * 2. That it will resolve Bug #709, which requires
 *    that IVE-introduced indexing operations
 *    go through TC and CF (minimally).
 */

CYCLE (scyc, "Type stabilization cycle",
       global.optimize.doscyc, opt, !RESET)

FUNBEGIN (scyc, opt, scyc)

CYCLEPHASEFUNOLD (tup, "Applying type upgrade", NTCdoNewTypeCheck, global.optimize.dotup,
                  opt, scyc)

CYCLEPHASEFUN (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes,
               global.optimize.dotup, opt, scyc)

CYCLEPHASEFUN (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes,
               global.optimize.dotup, opt, scyc)

CYCLEPHASEFUN (cf, "Applying constant folding", CFdoConstantFolding, global.optimize.docf,
               opt, scyc)

CYCLEPHASEFUN (vp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, opt,
               scyc)

CYCLEPHASEFUN (rea, "Reorder arguments of equality primitive function ",
               REAdoReorderEqualityprfArguments, global.optimize.dorea, opt, scyc)

CYCLEPHASEFUN (dfc, "Applying function call dispatch", DFCdoDispatchFunCalls, ALWAYS, opt,
               scyc)

FUNEND (scyc)

CYCLEPHASE (lof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS, opt, scyc)

ENDCYCLE (scyc)

SUBPHASE (wlflt, "Trying to flatten multi-dimensional withloops",
          WLFLTdoWithloopFlattening, global.optimize.dowlflt, opt)

SUBPHASE (esaa, "Eliminating symbolic array attributes", ESVdoEliminateShapeVariables,
          global.optimize.dosaa, opt)

/*
 * Deadcode removal should be done after ESV to make
 * sure we don't keep carrying around ssa-variables and
 * -functions, which are no longer used for anything.
 */

SUBPHASE (dcr5, "Removing dead code", DCRdoDeadCodeRemoval,
          (global.optimize.dosaa || !global.runtimecheck.conformity)
            && global.optimize.dodcr,
          opt)

SUBPHASE (scc, "Stripping conformity checks and dataflow guards",
          SCCdoStripConformityChecks,
          global.doivext || global.optimize.doawlf || global.insertconformitychecks, opt)

SUBPHASE (stpc, "Stripping type pattern guards",
          STPCdoStripTypePatternChecks,
          global.insertconformitychecks, opt)

/*
 *   TC must run after IVE and before LS/LIR,
 *    in order to establish AKVness of some index variables
 *    that are later removed by LS and LIR and CF.
 */

SUBPHASE (tup2, "Applying type upgrade", NTCdoNewReTypeCheckFromScratch,
          global.optimize.dotup, opt)

SUBPHASE (etv2, "Eliminating Type Variables", EATdoEliminateAlphaTypes,
          global.optimize.dotup, opt)

SUBPHASE (ebt2, "Eliminating Bottom Types", EBTdoEliminateBottomTypes,
          global.optimize.dotup, opt)

SUBPHASE (vp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, opt)

SUBPHASE (ls, "Applying Loop Scalarization", LSdoLoopScalarization, global.optimize.dols,
          opt)

SUBPHASE (lacsi, "Applying Loop & Conditional Argument Scalarization",
          LACSIdoLoopAndCondScalarization, global.optimize.dolacsi, opt)

SUBPHASE (lacso, "Applying Loop & Conditional Result Scalarization",
          LACSOdoLoopAndCondScalarization, global.optimize.dolacso, opt)

/* Some WL generators are resolved to degeneracy too late for
 * SAACYC to remove them.
 */
SUBPHASE (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification,
          global.optimize.dowlsimp, opt)

/* LS wants CF and LIR to follow */
/* However, CF needs AKV values to handle _idx_sel( [0], [ int]),
 * and _sub_SxS_( n, 0) introduced by wlsimp,
 * so we start with TC
 */

SUBPHASE (tupls, "Applying type upgrade for LS/LACS", NTCdoNewReTypeCheckFromScratch,
          global.optimize.dotup, opt)

SUBPHASE (etvls, "Eliminating Type Variables for LS/LACS", EATdoEliminateAlphaTypes,
          global.optimize.dotup, opt)

SUBPHASE (ebtls, "Eliminating Bottom Types for LS/LACS", EBTdoEliminateBottomTypes,
          global.optimize.dotup, opt)

SUBPHASE (cfls, "Applying constant folding for LS/LACS", CFdoConstantFolding,
          global.optimize.docf, opt)

SUBPHASE (dlirls, "Applying do-loop invariant removal for LS/LACS",
          DLIRdoLoopInvariantRemoval, global.optimize.dodlir, opt)

SUBPHASE (wlirils, "Applying with-loop invariant removal inference for LS/LACS",
          WLIRIdoLoopInvariantRemovalInference, global.optimize.dowlir, opt)

SUBPHASE (wlirls, "Applying with-loop invariant removal for LS/LACS",
          WLIRdoLoopInvariantRemoval, global.optimize.dowlir, opt)

SUBPHASE (ussai, "Undo SSAIV Transform", USSAIdoUndoSSAivTransform, global.ssaiv, opt)

SUBPHASE (vpls, "Propagating variables for LS/LACS", VPdoVarPropagation,
          global.optimize.dovp, opt)

SUBPHASE (cpive, "Propagating constants for IVE", CPdoConstantPropagation,
          global.optimize.doive &&global.optimize.docp, opt)

SUBPHASE (cse2, "Eliminating common subexpression", CSEdoCommonSubexpressionElimination,
          global.optimize.docse, opt)

/*
 * iveras needs to run after the ive phases and after cse. So I
 * have moved it down here
 */
SUBPHASE (iveras, "Eliminating index vectors (reuse WL-offsets and scalarize)",
          IVERASdoWithloopReuseAndOptimisation, global.optimize.doive, opt)

SUBPHASE (ivevp2, "Propagating variables (for IVERAS)", VPdoVarPropagation,
          global.optimize.doive &&global.optimize.dovp, opt)

SUBPHASE (dcr6, "Removing dead code", DCRdoDeadCodeRemoval,
          (global.optimize.doive || !global.runtimecheck.conformity)
            && global.optimize.dodcr,
          opt)

/* TODO: lir perhaps should be run in a loop */
SUBPHASE (dlir2, "Applying do-loop invariant removal", DLIRdoLoopInvariantRemoval,
          global.optimize.dodlir, opt)

SUBPHASE (wliri2, "Applying with-loop invariant removal inference", WLIRIdoLoopInvariantRemovalInference,
          global.optimize.dowlir, opt)

SUBPHASE (wlir2, "Applying with-loop invariant removal", WLIRdoLoopInvariantRemoval,
          global.optimize.dowlir, opt)

SUBPHASE (fprc, "Filtering partial reuse candidates", FPRCdoFilterPartialReuseCandidates,
          (global.optimize.douip && global.optimize.dopr), opt)

SUBPHASE (wllom, "Withloop lock optimization marking", WLLOMdoLockOptimizationMarking,
          global.optimize.dowllo, opt)

SUBPHASE (wllos, "Withloop lock optimization shifting", WLLOSdoLockOptimizationShifting,
          global.optimize.dowllo, opt)

SUBPHASE (dfc, "Applying final function call dispatch", DFCdoDispatchFunCalls, ALWAYS,
          opt)

SUBPHASE (finalinl, "Applying final inlining", INLdoInlining, global.optimize.doinl, opt)

SUBPHASE (xtgtl, "Transform gt and ge operators to lt and le operators",
          TGTLdoTransformGtgeToLtle, global.optimize.dotgtl, opt)

SUBPHASE (fdi, "Freeing dispatch information", FDIdoFreeDispatchInformation, ALWAYS, opt)

ADDPREFUN (TR_prt, EMRCIprintPreFun)

SUBPHASE (emrci, "Collect extended WL reuse candidates", EMRCIdoWithloopExtendedReuseCandidateInference,
          global.optimize.doemrci, opt)

SUBPHASE (emrcf, "Filter extended WL reuse candidates", FRCdoFilterReuseCandidatesWL,
          global.optimize.doemrci && global.optimize.doemrcf, opt)

SUBPHASE (emrl, "Lift allocations of WL using extended reuse candidates", EMRLdoExtendLoopMemoryPropagation,
          global.optimize.doemrci && global.optimize.doemrl, opt)

SUBPHASE (ts, "Displaying type specialisation statistics", TSdoPrintTypeStatistics,
          global.feedback.type, opt)

SUBPHASE (cs, "Displaying constraint resolution statistics", CSdoPrintConstraintStatistics,
          global.feedback.constraint, opt)

SUBPHASE (tps, "Displaying type pattern resolution statistics",
          TPSdoPrintTypePatternStatistics,
          global.insertconformitychecks && global.feedback.constraint, opt)

SUBPHASE (stat, "Displaying optimisation statistics", STATdoPrintStatistics,
          global.feedback.optimisation, opt)

ENDPHASE (opt)

/******************************************************************************/

PHASE (cuda, "Automatic parallelisation for GPUs",
       !global.on_demand_lib
         && (global.backend == BE_cuda || global.backend == BE_cudahybrid))

SUBPHASE (acuwl, "CUDA Annotate CUDA withloops", ACUWLdoAnnotateCUDAWL, ALWAYS, cuda)

SUBPHASE (cucm, "CUDA cost model (hybrid only)", CUCMdoCUDACostModel, global.backend == BE_cudahybrid,
          cuda)

SUBPHASE (pfd, "CUDA Partial folding", PFDdoPartialFold, global.optimize.dopfd, cuda)

SUBPHASE (scuf, "CUDA Split CUDA fold withloops", SCUFdoSplitCudaFold,
          global.optimize.doscuf, cuda)

SUBPHASE (cutem, "CUDA Tag execution mode", CUTEMdoTagExecutionmode,
          global.optimize.doexpar, cuda)

SUBPHASE (cuskc, "CUDA Sink scalar code", CUSKCdoSinkCode, global.optimize.doexpar, cuda)

SUBPHASE (cucc, "CUDA Create cells", CUCCdoCreateCells, global.optimize.doexpar, cuda)

#if 0
SUBPHASE( scuwl,
          "Split cudarizable withloop",
          SCUWLdoSplitCudaWithloops,
          ( global.backend == BE_cuda || global.backend == BE_cudahybrid),
          cuda)
#endif

SUBPHASE (cadt, "Change arrays to distributed type (hybrid only)", CADTdoChangeArraysToDistributedType,
          global.backend == BE_cudahybrid, cuda)

SUBPHASE (iwlmem, "CUDA Insert CUDA memory transfer primitives for withloops (non-hybrid only)",
          IWLMEMdoInsertWithloopMemtran, global.backend == BE_cuda, cuda)

SUBPHASE (icsmem, "CUDA Insert CUDA memory transfer primitives for cudasts (non-hybrid only)",
          ICSMEMdoInsertCudastMemtran,
          (global.optimize.doexpar && global.backend == BE_cuda), cuda)

SUBPHASE (egf, "Embedding GPU functions", EGFdoEmbedGpuFunctions,
          (global.backend == BE_cuda), cuda)

SUBPHASE (gfinl, "Applying inlining for GPU functions", INLdoInlining, global.optimize.doinl, cuda)

SUBPHASE (vp, "Propagating variables", VPdoVarPropagation, ALWAYS, cuda)

SUBPHASE (cp, "Propagating constants", CPdoConstantPropagation, ALWAYS, cuda)

#if 0
SUBPHASE( ira,
          "CUDA Infer reusable arrays in withloops",
          IRAdoInterReusableArrays,
          ( global.backend == BE_cuda || global.backend == BE_cudahybrid) && global.optimize.doshr,
          cuda)

SUBPHASE( shmem,
          "CUDA Exploiting data reuse with shared memory",
          SHMEMdoSharedMemoryReuse,
          ( global.backend == BE_cuda || global.backend == BE_cudahybrid) && global.optimize.doshr,
          cuda)
#endif

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemoval, ALWAYS, cuda)

SUBPHASE (sptn, "CUDA Split partitions", SPTNdoSplitPartitions,
          global.optimize.doslpt, /*Comment out for now. A bug in loop18p.sac*/
          cuda)

SUBPHASE (acuptn, "CUDA Annotate CUDA partitions", ACUPTNdoAnnotateCUDAPartition, ALWAYS,
          cuda)

SUBPHASE (acp, "CUDA Annotate CUDA partitions with pragmas", ACPdoAnnotateCUDAPragmas, ALWAYS,
          cuda)

#if 1
CYCLE (mtranexp, "Optimise memory transfers for expar cycle (non-hybrid only)",
       global.optimize.doexpar && global.optimize.domemopt && (global.backend == BE_cuda),
       cuda, RESET)

CYCLEPHASE (mbtran, "Minimise transfers within blocks", MBTRAN2doMinimizeBlockTransfers,
            ALWAYS, cuda, mtranexp)

CYCLEPHASE (actran, "Annotate Cond Funs", ACTRANdoAnnotateCondTransfers,
            ALWAYS, cuda, mtranexp)

CYCLEPHASE (mctran, "Lift transfers out of Cond funs", MCTRANdoMinimizeCondTransfers,
            ALWAYS, cuda, mtranexp)

CYCLEPHASE (dcr, "Dead Code Removal", DCRdoDeadCodeRemoval, ALWAYS, cuda, mtranexp)

ENDCYCLE (mtranexp)

CYCLE (mtran, "Optimise memory transfers cycle (non-hybrid only)",
       global.optimize.domemopt && (global.backend == BE_cuda), cuda, RESET)

CYCLEPHASE (mcstran, "Minimise transfers within blocks", MBTRAN2doMinimizeBlockTransfers,
            ALWAYS, cuda, mtran)

CYCLEPHASE (mbtran, "Minimise transfers within blocks", MBTRAN2doMinimizeBlockTransfers,
            ALWAYS, cuda, mtran)

CYCLEPHASE (actran, "Annotate Cond Funs", ACTRANdoAnnotateCondTransfers,
            ALWAYS, cuda, mtran)

CYCLEPHASE (mctran, "Lift transfers out of Cond funs", MCTRANdoMinimizeCondTransfers,
            ALWAYS, cuda, mtran)

CYCLEPHASE (dcr, "Dead Code Removal", DCRdoDeadCodeRemoval, ALWAYS, cuda, mtran)

CYCLEPHASE (mbtran2, "Minimise transfers within blocks", MBTRAN2doMinimizeBlockTransfers,
            ALWAYS, cuda, mtran)

CYCLEPHASE (amtran, "Annotate Memory Transfers", AMTRANdoAnnotateMemoryTransfers,
            ALWAYS, cuda, mtran)

CYCLEPHASE (mltran, "Lift transfers out of Loop funs", MLTRANdoMinimizeLoopTransfers,
            ALWAYS, cuda, mtran)

ENDCYCLE (mtran)

SUBPHASE (memrt, "Lift emr allocations out of Loop funs", MEMRTdoMinimizeEMRTransfers,
          global.optimize.doemrci && global.optimize.domemrt && global.optimize.domemopt
          && (global.backend == BE_cuda), cuda)

#else
SUBPHASE (mtran, "CUDA Minimise the number of device-host data transfers (non-hybrid only)",
          MTRANdoMinimizeTransfers, global.optimize.domemopt &&global.backend == BE_cuda,
          cuda)
#endif

SUBPHASE (daa, "CUDA Data access analysis", DAAdoDataAccessAnalysis,
          global.optimize.doshr, cuda)

SUBPHASE (stknl, "CUDA Create single threaded CUDA kernels", STKNLdoSingleThreadKernels,
          global.optimize.doexpar, cuda)

SUBPHASE (emrci, "Collect extended WL reuse candidates", EMRCIdoWithloopExtendedReuseCandidateInferencePrf,
          global.optimize.doemrcic, cuda)

SUBPHASE (emrcf, "Filter extended WL reuse candidates", FRCdoFilterReuseCandidatesPrf,
          global.optimize.doemrcic && global.optimize.doemrcf, cuda)

/*
SUBPHASE( wlds,
          "Unscalarize cudarizbale withloops",
          WLDSdoWithloopDescalarization,
          ( global.backend == BE_cuda || global.backend == BE_cudahybrid),
          cuda)
*/
SUBPHASE (cumm, "Unify host and device memory when using CUDA managed memory", CUMMdoManagedMemory,
          global.optimize.documm
		  && (STReq (global.config.cuda_alloc, "cuman")
		      || STReq (global.config.cuda_alloc, "cumanp")), cuda)

SUBPHASE (cuad, "Introduce delays into asynchronous memory transfers", CUADdoAsyncDelay,
          global.optimize.docuad
		  && (STReq (global.config.cuda_alloc, "cualloc")
		      || STReq (global.config.cuda_alloc, "cureg")), cuda)

SUBPHASE (cuade, "Expand delays of asynchronous memory transfers", CUADEdoAsyncDelayExpand,
          global.optimize.docuade
		  && (STReq (global.config.cuda_alloc, "cualloc")
		      || STReq (global.config.cuda_alloc, "cureg")
			  || STReq (global.config.cuda_alloc, "cumanp")), cuda)

ENDPHASE (cuda)

/******************************************************************************/

PHASE (wlt, "Transforming with-loop representation", !global.on_demand_lib)

SUBPHASE (wlbsc, "Unflattening WL-partition structural constants",
                  WLBSCdoWlbounds2nonFlatStructConsts, ALWAYS, wlt)

SUBPHASE (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification, ALWAYS, wlt)
/*
 * Repeating these two optimisations here is necessary to avoid problems with exotic
 * with-loops in subsequent wl-transform.
 */

// Issue #2281 shows that, at least with -noopt, we can get here with
// one-trip WLs. Those will kill WLTR, so we remove them here.
SUBPHASE (wlur, "Applying withloop unrolling", WLURdoWithloopUnrollingModule,
                  ALWAYS, wlt)

SUBPHASE (wlurssa, "Restoring SSA form after withloop unrolling", SSATdoTransform,
                  ALWAYS, wlt)

SUBPHASE (wltr, "Transforming with-loop representation", WLTRAdoWlTransform, ALWAYS, wlt)

SUBPHASE (wlsd, "Splitting withloops by dimensions", WLSDdoWithLoopSplitDimensions,
          global.optimize.dowlsd
            && ((global.backend == BE_mutc
                 || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
                     && global.optimize.doshr))),
          wlt)

SUBPHASE (cse, "Applying common subexpression elimination",
          CSEdoCommonSubexpressionElimination,
          global.optimize.docse
            && (global.backend == BE_mutc
                || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
                    && global.optimize.doshr)),
          wlt)

SUBPHASE (rw3, "Remove unneeded With3s", RW3doRemoveWith3,
          (global.backend == BE_mutc
           || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
               && global.optimize.doshr))
            && global.optimize.dorw3,
          wlt)

SUBPHASE (ass, "Add syncs", ASdoAddSyncs,
          (global.backend == BE_mutc
           || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
               && global.optimize.doshr)),
          wlt)

SUBPHASE (ms, "Move syncs", MSdoMoveSyncs,
          (global.backend == BE_mutc
           || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
               && global.optimize.doshr))
            && global.optimize.doms,
          wlt)

SUBPHASE (cudr, "CUDA Exploiting data reuse with cuda shared memory", CUDRdoCudaDataReuse,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid)
            && global.optimize.doshr,
          wlt)

SUBPHASE (vp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, wlt)

SUBPHASE (cp, "Propagating constants", CPdoConstantPropagation,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid)
            || global.backend == BE_mutc,
          wlt)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr, wlt)

ENDPHASE (wlt)

/******************************************************************************/

#ifndef PRODUCTION

PHASE (mt3, "Running 3rd generation multithreading", NEVER)

SUBPHASE (tem, "Tagging execution modes", TEMdoTagExecutionmode, ALWAYS, mt3)

SUBPHASE (crwiw, "Creating with in with", CRWIWdoCreateWithinwith, ALWAYS, mt3)

SUBPHASE (pem, "Propagating execution modes", PEMdoPropagateExecutionmode, ALWAYS, mt3)

SUBPHASE (cdfg, "Creating data flow graph", CDFGdoCreateDataflowgraph, ALWAYS, mt3)

SUBPHASE (asmra, "Rearringing assignments", ASMRAdoAssignmentsRearrange, ALWAYS, mt3)

SUBPHASE (crece, "Creating execution mode cells", CRECEdoCreateCells, ALWAYS, mt3)

SUBPHASE (cegro, "Extending execution mode cells", CEGROdoCellGrowth, ALWAYS, mt3)

SUBPHASE (repfun, "Replicating functions", REPFUNdoReplicateFunctions, ALWAYS, mt3)

SUBPHASE (mtdfr, "Removing superfluous functions", DFRdoDeadFunctionRemoval, ALWAYS, mt3)

SUBPHASE (concel, "Consolidating execution mode cells", CONCELdoConsolidateCells, ALWAYS,
          mt3)

SUBPHASE (abort, "Aborting MT3 compilation", MTABabort, ALWAYS, mt3)

ENDPHASE (mt3)

#endif /* PRODUCTION */

/******************************************************************************/

PHASE (tp, "Introducing task parallelization",
       !global.on_demand_lib && (global.fp || global.backend == BE_mutc))

SUBPHASE (syn, "Add sync statements", SYNdoAddSync, ALWAYS, tp)

SUBPHASE (mss, "Move sync statements", MSSdoMoveSyncStatement,
          !global.fpnoopt || global.backend == BE_mutc, tp)

SUBPHASE (tff, "Tag function definitions", TFFdoTagFPFundefs, global.fp, tp)

SUBPHASE (tfa, "Tag function applications", TFFdoTagFPAps, global.fp, tp)

SUBPHASE (lva, "Do live variable analysis", LVAdoLiveVariableAnalysis, global.fp, tp)

SUBPHASE (css, "Count spawns and syncs", CSSdoCountSpawnSync, ALWAYS, tp)

ENDPHASE (tp)

/******************************************************************************/

PHASE (mem, "Introducing memory management instructions", !global.on_demand_lib)

SUBPHASE (ufiv, "Unshare index vectors in WL-folds", UFIVdoUnshareFoldIV,
          (global.backend == BE_c99), mem)

SUBPHASE (cp, "Propagating constants", CPdoConstantPropagation, global.optimize.docp, mem)

#if 0
SUBPHASE (cnstass, "CUDA Flatten generators", CNSTASSdoCUDAconstantAssignment,
          (global.backend == BE_cuda), mem)
For now (2021) I (sbs) leave this in uncommented form here. This phase does
two things: (1) It makes sure that all gen-vars are structural constants
        and (2) It lifts all N_num into N_id nodes.
It seems that (1) is redundant and even broken(!).
(2) inhibits known constants to make their way to pc:cuknl! The problem is
    that SSAASSIGN is gone after ussa and AKV types disappear until pc:cuknl :
    mem:alloc introduces explicit memory, and, in doing so elides all AKV types.
    This makes conceptual sense as we switch to a stateful representation here.
    pc:mmv later replaces the value variables by their (AKV-less) memory.
    Consequently, the AKV info is gone in pc:cuknl. Even if we were to make
    the AKVs survive mem, theuy surely must not survive ussa, since we can
    not guarantee that there is not more than one assignment per variable.

For now, we try whether we can safely leave out this phase....
#endif

SUBPHASE (asd, "AUD/SCL distinction", ASDdoAudSclDistinction, ALWAYS, mem)

SUBPHASE (copy, "Making copy operations explicit", EMECdoExplicitCopy, ALWAYS, mem)

SUBPHASE (racc, "Removing alias results from conformity checks",
          EMRACCdoRemoveAliasResultsFromConformityChecks, ALWAYS, mem)

SUBPHASE (alloc, "Introducing explicit allocation statements ", EMALdoAlloc, ALWAYS, mem)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr, mem)

REMOVEPREFUN (TR_prt, WRCIprintPreFun)
REMOVEPREFUN (TR_prt, EMRCIprintPreFun)

SUBPHASE (rci, "Inferring reuse candidates", EMRIdoReuseInference, global.optimize.douip,
          mem)

ADDPREFUN (TR_prt, SHALprintPreFun)

SUBPHASE (ia, "Interface aliasing analysis", EMIAdoInterfaceAnalysis,
          global.optimize.dosrf, mem)

SUBPHASE (lro, "Applying loop reuse optimization", EMLRdoLoopReuseOptimization,
          global.optimize.dosrf &&global.optimize.dolro, mem)

SUBPHASE (aa, "Aliasing analysis", EMAAdoAliasAnalysis, global.optimize.dosrf, mem)

SUBPHASE (srce, "Removing non-local reuse-candidates", SRCEdoRemoveReuseCandidates,
          global.optimize.douip, mem)

SUBPHASE (frc, "Removing invalid reuse candidates", FRCdoFilterReuseCandidates,
          global.optimize.douip, mem)

SUBPHASE (sr, "Static reuse", EMSRdoStaticReuse,
          global.optimize.douip && global.optimize.dosrf, mem)

SUBPHASE (lao, "Applying loop allocation optimization", EMLAOdoLoopAllocationOptimization,
          global.optimize.dosrf && global.optimize.dolao, mem)

SUBPHASE (rb, "Introducing reuse branches", EMRBdoReuseBranching,
          global.optimize.doipc || (global.optimize.douip && global.optimize.dodr), mem)

SUBPHASE (ipc, "Identifying in-place updates", IPCdoInplaceComputation,
          global.optimize.doipc, mem)

SUBPHASE (dr, "Exploiting data reuse", EMDRdoDataReuse,
          global.optimize.douip &&global.optimize.dodr, mem)

SUBPHASE (pew3, "MUTC Prune empty with3", PEW3doPruneEmptyWith3,
          global.backend == BE_mutc && global.optimize.dopew3, mem)

SUBPHASE (dcr2, "Removing dead code again", DCRdoDeadCodeRemoval, global.optimize.dodcr,
          mem)

REMOVEPREFUN (TR_prt, SHALprintPreFun)

SUBPHASE (rc, "Running reference count inference", RCIdoReferenceCounting, ALWAYS, mem)

SUBPHASE (rcm, "Reducing reference counting instructions", RCMdoRefcountMinimization,
          ALWAYS, mem)

SUBPHASE (rco, "Optimizing reference counting instructions", EMRCOdoRefCountOpt,
          global.optimize.dorco, mem)

#if 0
SUBPHASE( mvsmi,
          "Moving shared memory management instructions out of SPMD functions",
          MVSMIdoMoveSharedMemoryManagementInstructions,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop),
          mem)
#endif

SUBPHASE (re, "Removing reuse instructions", EMREdoReuseElimination, ALWAYS, mem)

ENDPHASE (mem)

/******************************************************************************/

PHASE (iprof, "Introduce profiling instruction", !global.on_demand_lib)

SUBPHASE (pfap, "Profiling function applications", PFdoProfileFunCalls,
          global.doprofile, iprof)

ENDPHASE (iprof)

/******************************************************************************/

PHASE (dm, "Preparing for distributed memory execution", (global.backend == BE_distmem))

SUBPHASE (dmisef, "Identifying functions with side effects",
          DMISEFdoIdentifySideEffectFunctions, ALWAYS, dm)

ENDPHASE (dm)

/******************************************************************************/

PHASE (ussa, "Converting from static single assignment form", !global.on_demand_lib)

SUBPHASE (ussa, "Converting from SSA form", USSATdoUndoSsaTransform, ALWAYS, ussa)

SUBPHASE (f2l, "Reintroducing loops and conditionals", F2LdoFun2Lac, ALWAYS, ussa)

SUBPHASE (linl, "Inlining LaC functions", LINLdoLACInlining, ALWAYS, ussa)

SUBPHASE (rec, "Removing external code", RECdoRemoveExternalCode, ALWAYS, ussa)

#if 0
SUBPHASE( spmdfix,
          "Fixing SPMD function signatures",
          FSFSdoFixSpmdFunctionSignatures,
          ALWAYS,
          ussa)
#endif

SUBPHASE (rera, "Restoring reference arguments", RERAdoRestoreReferenceArguments, ALWAYS,
          ussa)

SUBPHASE (reso, "Restoring global objects", RESOdoRestoreObjects, ALWAYS, ussa)

ENDPHASE (ussa)

/******************************************************************************/

PHASE (mt, "Running automatic parallelisation",
       !global.on_demand_lib
         && ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)
             || (global.backend == BE_omp)))

SUBPHASE (mtcm, "Running multithreading cost model", MTCMdoRunCostModel, ALWAYS, mt)

SUBPHASE (mtstf, "Creating MT and ST functions", MTSTFdoCreateMtStFuns, ALWAYS, mt)

SUBPHASE (mtspmdf, "Creating SPMD functions", MTSPMDFdoCreateSpmdFuns,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (rmpr, "Filtering propagates", RMPRdoRemovePropagates,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (mtrmi, "Restoring memory instructions", MTRMIdoRestoreMemoryInstrs,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (mtdcr, "Removing dead code", MTDCRdoMtDeadCodeRemoval,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (mtas, "Annotating scheduling information", MTASdoAnnotateScheduling,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (sspmdls, "Applying SPMD linksign pragma", SSPMDLSdoSetSpmdLinksign,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (distcond, "Creating distributed with-loop conditionals",
          DISTCONDdoCreateDistWlCond, global.backend == BE_cudahybrid, mt)

ENDPHASE (mt)

/******************************************************************************/

PHASE (pc, "Preparing C code generation", !global.on_demand_lib)

SUBPHASE (uw3, "Unroll With3", UW3doUnrollWith3,
          (global.backend == BE_mutc
           || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
               && global.optimize.doshr))
            && global.optimize.douw3,
          pc)

SUBPHASE (msa, "MUTC Mark SubAlloc", MSAdoMarkSubAlloc,
          global.backend == BE_mutc && global.optimize.domsa, pc)

SUBPHASE (lw3, "MUTC Lifting With-Loop bodies into threads", LW3doLiftWith3,
          global.backend == BE_mutc, pc)

SUBPHASE (armp, "MUTC Add RC Mode PRF", ARMPdoAddRcModePrf,
          global.backend == BE_mutc && global.optimize.doarmp, pc)

SUBPHASE (dmui, "MUTC Dynamic memory usage inference", DMUIdoDynamicMemoryUsageInference,
          global.backend == BE_mutc, pc)

SUBPHASE (pknlg, "CUDA Prepare kernel generation", PKNLGdoPrepareKernelGeneration,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid), pc)

SUBPHASE (mmv, "Marking memval identifiers", MMVdoMarkMemVals, ALWAYS, pc)

SUBPHASE (rnb, "Remove noop branch", RNBdoRemoveNoopBranch,
          global.optimize.dopra &&global.optimize.dornb, pc)

SUBPHASE (imemdist, "Insert memory transfer primitives for distributed variables",
          IMEMDISTdoInsertMemtranDist, global.backend == BE_cudahybrid, pc)

SUBPHASE (ial, "Introduce availability loops for distributed variables",
          IALdoIntroduceAvailabilityLoops, global.backend == BE_cudahybrid, pc)

SUBPHASE (cuasr, "CUDA Adjust return ids of single threaded kernel",
          CUASRdoAdjustStknlRets,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid)
            && global.optimize.doexpar,
          pc)

SUBPHASE (cuknl, "CUDA Create Cuda kernel functions", CUKNLdoCreateCudaKernels,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid), pc)

SUBPHASE (dvr, "Removing obsolete variable declarations", DVRdoDeadVardecRemoval, ALWAYS,
          pc)

SUBPHASE (dst, "MUTC Computing static thread mapping", DSTdoDistributeThreads,
          ((global.backend == BE_mutc) && (global.filetype == FT_prog)), pc)

SUBPHASE (sls, "Applying linksign pragma", SLSdoSetLinksign, ALWAYS, pc)

SUBPHASE (moi, "Manage object initialisers", MOIdoManageObjectInitialisers, ALWAYS, pc)

SUBPHASE (rcs, "Resolving code sharing in With-Loops", RCSdoResolveCodeSharing, ALWAYS,
          pc)

SUBPHASE (tmft, "MUTC tag main function as thread function", TMFTdoTagMainFunThread,
          (global.backend == BE_mutc && global.filetype == FT_prog), pc)

SUBPHASE (tft, "MUTC tag functions as thread functions if needed",
          TFTdoTagFunctionsAsThreads, (global.backend == BE_mutc), pc)

/* KEEP ABOVE fpc */
SUBPHASE (cfp, "MUTC create function pairs", CFPdoCreateFunctionPairs,
          (global.backend == BE_mutc && global.filetype != FT_prog), pc)

/* TVD: Runtime Specialization */
SUBPHASE (rtspec, "Runtime Specialization create wrapper entry functions",
          RTSPECdoCreateWrapperEntries,
          (global.config.rtspec == TRUE) && (global.rtspec_mode == RTSPEC_MODE_SIMPLE),
          pc)

SUBPHASE (msc, "Make Slow Clones", MSCdoMakeSlowClones, global.fp, pc)
/*
 * WARNING: no phases that duplicate code below this line!
 *          FPC builds the argtabs which CANNOT be maintained
 *          by duptree!
 */

SUBPHASE (fpc, "Reorganising function prototypes", FPCdoFunctionPrecompile, ALWAYS, pc)

SUBPHASE (tcp, "Applying type conversions", TCPdoTypeConversions, ALWAYS, pc)

SUBPHASE (mng, "Mark NoOp Grids", MNGdoMarkNoopGrids, ALWAYS, pc)

SUBPHASE (rid, "Consistently renaming identifiers", RIDdoRenameIdentifiers, ALWAYS, pc)

SUBPHASE (ofp, "OpenMP find private variables", OFPdoFindPrivate,
          (global.backend == BE_omp), pc)

SUBPHASE (mc, "Move constants to variable declaration", MCdoMoveConst, ALWAYS, pc)

SUBPHASE (pfg, "CUDA Prepare for loop generation", PFGdoPrepareForloopGeneration,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid), pc)

SUBPHASE (
  dmisefa,
  "Identifying function applications with side effects for distributed memory backend",
  DMISEFAdoIdentifySideEffectFunctionApplications, global.backend == BE_distmem, pc)

SUBPHASE (dmisaa, "Identify sub-allocated arrays for the distributed memory backend",
          DMISAAdoIdentifySubAllocatedArrays, global.backend == BE_distmem, pc)

ENDPHASE (pc)

/******************************************************************************/

PHASE (cg, "Generating Code", !global.on_demand_lib)

SUBPHASE (tp, "Tag preparation", TPdoTagPreparation, ALWAYS, cg)

SUBPHASE (cpl, "Creating intermediate code macros", COMPdoCompile, ALWAYS, cg)

SUBPHASE (pds, "Prepare distributed with-loop schedulers",
          PDSdoPrepareDistributedScheduler, global.backend == BE_cudahybrid, cg)

SUBPHASE (prt, "Generating C file(s)", PRTdoPrint, ALWAYS, cg)

REMOVEPREFUN (TR_cmpt, CMPTnodeType)

ENDPHASE (cg)

/******************************************************************************/

PHASE (icc, "Creating binary code", ALWAYS)

SUBPHASE (frtr, "De-allocating syntax tree representation", FREEdoFreeTree, ALWAYS, icc)

SUBPHASE (hdep, "Handling dependencies", DEPdoHandleDependencies, ALWAYS, icc)

SUBPHASE (ivcc, "Invoking C compiler", CCTrunTools, ALWAYS, icc)

ENDPHASE (icc)

/******************************************************************************/

PHASE (prof, "Profiling report", global.timefreq || global.memcheck)

#ifdef HAVE_GETTIME
SUBPHASE (time, "Generating time report", TIMEtimeReport, global.timefreq, prof)
#endif

#ifndef DBUG_OFF
SUBPHASE (mem, "Generating memory reports", MEMreport, global.memcheck, prof)
#endif

ENDPHASE (prof)

#include "phase_undefine_defs.mac"
