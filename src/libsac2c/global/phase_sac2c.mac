/*
 * $Id$
 */

#include "phase_initialise_defs.mac"

/******************************************************************************/

PHASE (scp, "Loading SAC program", ALWAYS)

SUBPHASE (loc, "Locating source code", SPdoLocateSource, ALWAYS, scp)

SUBPHASE (cpp, "Running C preprocessor", SPdoRunPreProcessor, ALWAYS, scp)

SUBPHASE (prs, "Parsing input file", SPdoScanParse, ALWAYS, scp)

ENDPHASE (scp)

/******************************************************************************/

PHASE (pre, "Preprocessing SAC program", ALWAYS)

SUBPHASE (iotc, "Introducing user-tracing calls", IUTCdoIntroduceUserTraceCalls,
          global.dousertrace, pre)

SUBPHASE (zgwl, "Handling zero-generator with-loops", HZGWLdoHandleZeroGeneratorWithLoops,
          ALWAYS, pre)

SUBPHASE (mgwl, "Handling multi-generator with-loops", HWLGdoHandleWithLoops, ALWAYS, pre)

SUBPHASE (mowl, "Handling multi-operator with-loops", HWLOdoHandleWithLoops, ALWAYS, pre)

SUBPHASE (acn, "Resolving axis control and dot notation", HDdoEliminateSelDots, ALWAYS,
          pre)

SUBPHASE (rpr, "Resolving pragma annotations", RSPdoResolvePragmas, ALWAYS, pre)

SUBPHASE (obi, "Generating object initializers", OIdoObjectInit, ALWAYS, pre)

SUBPHASE (csgd, "Checking and simplifying generic definitions",
          CSGDdoCheckAndSimplifyGenericDefinitions, ALWAYS, pre)

ENDPHASE (pre)

/******************************************************************************/

PHASE (mod, "Running module system", ALWAYS)

SUBPHASE (rsa, "Processing use and import statements", RSAdoResolveAll, !global.makedeps,
          mod)

SUBPHASE (ans, "Annotating namespaces", ANSdoAnnotateNamespace, !global.makedeps, mod)

SUBPHASE (gdp, "Gathering dependencies", GDPdoGatherDependencies, ALWAYS, mod)

SUBPHASE (pdp, "Printing dependencies", DEPdoPrintDependencies, global.makedeps, mod)

SUBPHASE (imp, "Retrieving imported symbols", IMPdoImportSymbols, ALWAYS, mod)

SUBPHASE (uss, "Retrieving used symbols", USSdoUseSymbols, ALWAYS, mod)

SUBPHASE (asf, "Loading prelude functions", ASFdoAddSpecialFunctions, ALWAYS, mod)

ENDPHASE (mod)

/******************************************************************************/

PHASE (sim, "Simplifying source code", ALWAYS)

SUBPHASE (w2d, "Transforming while-loops into do-loops", W2DdoTransformWhile2Do, ALWAYS,
          sim)

SUBPHASE (ece, "Eliminating conditional expressions", HCEdoHandleConditionalExpressions,
          ALWAYS, sim)

SUBPHASE (moe, "Handling multiple operator expressions", HMdoHandleMops, ALWAYS, sim)

SUBPHASE (flt, "Flattening nested expressions", FLATdoFlatten, ALWAYS, sim)

SUBPHASE (udt, "Processing user defined types", RSTdoResolveSymbolTypes, ALWAYS, sim)

SUBPHASE (ggtc, "Generating generic type conversion functions",
          GGTCdoGenerateGenericTypeConversions, ALWAYS, sim)

ENDPHASE (sim)

/******************************************************************************/

PHASE (ptc, "Converting to static single assignment form", ALWAYS)

SUBPHASE (ivd, "Inserting variable declarations", INSVDdoInsertVardec, ALWAYS, ptc)

SUBPHASE (itc, "Converting type decls into type conversions", INSTCdoInsertTypeConv,
          ALWAYS, ptc)

SUBPHASE (cwf, "Creating wrapper functions", CRTWRPdoCreateWrappers, ALWAYS, ptc)

SUBPHASE (gon, "Running global object analysis", OANdoObjectAnalysis, ALWAYS, ptc)

SUBPHASE (goi, "Generating global object initialiser", GOIdoGenerateObjectInitialiser,
          ALWAYS, ptc)

SUBPHASE (rso, "Resolving global objects", RSOdoResolveObjects, ALWAYS, ptc)

SUBPHASE (rrp, "Resolving reference parameters", RRAdoResolveReferenceArgs, ALWAYS, ptc)

SUBPHASE (ewt, "Extending dispatch information", EWTdoExtendWrapperTypes, ALWAYS, ptc)

SUBPHASE (l2f, "Eliminating loops and conditionals", L2FdoLac2Fun, ALWAYS, ptc)

SUBPHASE (elf, "Extending LaC funs", ELFdoExtendLacFuns, global.elf, ptc)

SUBPHASE (ssa, "Establishing static single assignment form", SSATdoTransformAllowGOs,
          ALWAYS, ptc)

ENDPHASE (ptc)

/******************************************************************************/

PHASE (tc, "Running type inference system", ALWAYS)

SUBPHASE (esp, "Enforcing Specializations", ESPdoEnforceSpecialization, ALWAYS, tc)

SUBPHASE (sossk, "Specialization Oracle for Static Shape Knowledge",
          SOSSKdoSpecializationOracleSSK, global.dotogstuff, tc)

SUBPHASE (ti, "Running type inference system", NTCdoNewTypeCheck, ALWAYS, tc)

SUBPHASE (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes, ALWAYS, tc)

SUBPHASE (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes, ALWAYS, tc)

SUBPHASE (swr, "Splitting Wrappers", SWRdoSplitWrappers, ALWAYS, tc)

ENDPHASE (tc)

/******************************************************************************/

PHASE (exp, "Processing exports", ALWAYS)

SUBPHASE (exp, "Exporting symbols", EXPdoExport, ALWAYS, exp)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr,
          exp)

SUBPHASE (ser, "Serializing syntax tree", SERdoSerialize,
          ((global.filetype == F_modimp) || (global.filetype == F_classimp)), exp)

SUBPHASE (rgd, "Removing generic function definitions", RGDdoRemoveGenericDefinitions,
          ALWAYS, exp)

SUBPHASE (iif, "Restoring bodies of imported inline functions", PPIdoPrepareInline,
          ALWAYS, exp)

ENDPHASE (exp)

/******************************************************************************/

PHASE (unq, "Checking uniqueness property of objects", ALWAYS)

SUBPHASE (cua, "Checking uniqueness annotations", CUAdoCheckUniquenessAnnotations, ALWAYS,
          unq)

SUBPHASE (cuq, "Checking uniqueness", CUdoCheckUniqueness, ALWAYS, unq)

ENDPHASE (unq)

/******************************************************************************/

PHASE (cwc, "Creating Wrapper Code and Eliminating User-Defined Types", ALWAYS)

SUBPHASE (cwb, "Creating Wrapper Bodies", CWCdoCreateWrapperCode, ALWAYS, cwc)

SUBPHASE (l2f, "Eliminating conditionals in wrapper code", L2FdoLac2Fun, ALWAYS, cwc)

SUBPHASE (ssa, "Establishing static single assignment form in wrapper code",
          SSATdoTransformAllowGOs, ALWAYS, cwc)

SUBPHASE (dfc, "Trying to dispatch functions statically", DFCdoDispatchFunCalls, ALWAYS,
          cwc)

SUBPHASE (eudt, "Eliminating User-Defined Types", RCdoRemoveCasts, ALWAYS, cwc)

SUBPHASE (icc, "Inserting Conformity Checks", ICCdoInsertConformityChecks,
          global.insertconformitychecks, cwc)

SUBPHASE (ti, "Running type inference system", NTCdoNewReTypeCheckFromScratch, ALWAYS,
          cwc)

SUBPHASE (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes, ALWAYS, cwc)

SUBPHASE (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes, ALWAYS, cwc)

ENDPHASE (cwc)

/******************************************************************************/

PHASE (ewl, "Enhancing with-loops", ALWAYS)

SUBPHASE (accu, "Introducing explicit accumulators", EAdoExplicitAccumulate, ALWAYS, ewl)

SUBPHASE (adp, "Adding default partitions", WLDPdoWlDefaultPartition, ALWAYS, ewl)

SUBPHASE (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
          ALWAYS, ewl)

ENDPHASE (ewl)

/******************************************************************************/

PHASE (opt, "Running SAC optimizations", ALWAYS)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr,
          opt)

SUBPHASE (inl, "Applying function inlining", INLdoInlining, global.optimize.doinl, opt)

SUBPHASE (dfr2, "Removing dead functions", DFRdoDeadFunctionRemoval,
          global.optimize.dodfr, opt)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr,
          opt)

SUBPHASE (lir, "Applying loop invariant removal", LIRdoLoopInvariantRemoval,
          global.optimize.dolir, opt)

SUBPHASE (isaa1, "Inserting symbolic array attributes", ISAAdoInsertShapeVariables,
          global.optimize.dosaa, opt)

/*************************************************/

#ifdef BUG_356_FIXED

CYCLE (saacyc1, "Symbolic array attribute cycle 1", global.optimize.dosaa, opt)

CYCLEPHASE (prfunr, "Applying prf unrolling", UPRFdoUnrollPRFsModule,
            global.optimize.doprfunr, opt, saacyc1)

CYCLEPHASE (tup, "Applying type upgrade", NTCdoNewReTypeCheck, global.optimize.dotup, opt,
            saacyc1)

CYCLEPHASE (etv, "Eliminating type variables", EATdoEliminateAlphaTypes,
            global.optimize.dotup, opt, saacyc1)

CYCLEPHASE (ebt, "Eliminating bottom types", EBTdoEliminateBottomTypes,
            global.optimize.dotup, opt, saacyc1)

CYCLEPHASE (cf, "Applying constant folding", CFdoConstantFolding, global.optimize.docf,
            opt, saacyc1)

CYCLEPHASE (cse, "Elimininating common subexpressions",
            CSEdoCommonSubexpressionEliminationModule, global.optimize.docse, opt,
            saacyc1)

CYCLEPHASE (cvp, "Propagating constants and variables", CVPdoConstVarPropagation,
            global.optimize.docvp, opt, saacyc1)

CYCLEPHASE (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
            global.optimize.dowlpg, opt, saacyc1)

CYCLEPHASE (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplificationModule,
            global.optimize.dowlsimp, opt, saacyc1)

CYCLEPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr,
            opt, saacyc1)

ENDCYCLE (saacyc1)

#endif /* BUG_356_FIXED */

/*************************************************/

SUBPHASE (esaa1, "Eliminating symbolic array attributes", ESVdoEliminateShapeVariables,
          global.optimize.dosaa, opt)

SUBPHASE (saadcr, "Removing dead code (after SAA cycle 1)", DCRdoDeadCodeRemovalModule,
          global.optimize.dodcr &&global.optimize.dosaa, opt)

/*************************************************/

CYCLE (cyc, "Optimization cycle", global.optimize.docyc, opt)

FUNBEGIN (cyc, opt, cyc)

CYCLEPHASEFUN (cse, "Applying common subexpression elimination",
               CSEdoCommonSubexpressionElimination, global.optimize.docse, opt, cyc)

CYCLEPHASEFUN (ili, "Infering loop invariant variables", ILIdoInferLoopInvariants, ALWAYS,
               opt, cyc)

CYCLEPHASEFUN (tup, "Applying type upgrade", NTCdoNewTypeCheckOneFunction,
               global.optimize.dotup, opt, cyc)

CYCLEPHASEFUN (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypesOneFunction,
               global.optimize.dotup, opt, cyc)

CYCLEPHASEFUN (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypesOneFunction,
               global.optimize.dotup, opt, cyc)

CYCLEPHASEFUN (dfc, "Applying function call dispatch", DFCdoDispatchFunCallsOneFundef,
               ALWAYS, opt, cyc)

CYCLEPHASEFUN (inl, "Applying inlining", INLdoInlining, global.optimize.doinl, opt, cyc)

CYCLEPHASEFUN (wlpr, "Applying with-loop propagation", WLPROPdoWithloopPropagation,
               global.optimize.dowlprop, opt, cyc)

CYCLEPHASEFUN (cf, "Applying constant folding", CFdoConstantFoldingOneFundef,
               global.optimize.docf, opt, cyc)

CYCLEPHASEFUN (cvp, "Propagating constants and variables",
               CVPdoConstVarPropagationOneFundef, global.optimize.docvp, opt, cyc)

CYCLEPHASEFUN (wlpg, "Generating full with-loop partitions",
               WLPGdoWlPartitionGenerationOpt, global.optimize.dowlpg, opt, cyc)

CYCLEPHASEFUN (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification,
               global.optimize.dowlsimp, opt, cyc)

CYCLEPHASEFUN (cwle, "Eliminate copy with-loops", CWLEdoTemplateTraversal,
               global.optimize.docwle, opt, cyc)

CYCLEPHASEFUN (wli, "Infering foldable with-loops", WLIdoWLI, global.optimize.dowlf, opt,
               cyc)

CYCLEPHASEFUN (wlf, "Applying with-loop folding", WLFdoWLF, global.optimize.dowlf, opt,
               cyc)

CYCLEPHASEFUN (wlfssa, "Restoring SSA form after with-loop folding",
               SSATdoTransformOneFundef, global.optimize.dowlf, opt, cyc)

CYCLEPHASEFUN (shwlc, "Activating display of WL-Cost information", SHWLCactivate,
               global.optimize.doswlf, opt, cyc)

CYCLEPHASEFUN (swlf, "Applying symbolic with-loop folding", SWLFdoSymbolicWithLoopFolding,
               global.optimize.doswlf, opt, cyc)

CYCLEPHASEFUN (unshwlc, "Deactivating display of WL-Cost information", SHWLCdeactivate,
               global.optimize.doswlf, opt, cyc)

CYCLEPHASEFUN (dcr, "Applying dead code removal", DCRdoDeadCodeRemovalOneFundef,
               global.optimize.dodcr, opt, cyc)

CYCLEPHASEFUN (wls, "Applying with-loop scalarization", WLSdoWithloopScalarization,
               global.optimize.dowls, opt, cyc)

CYCLEPHASEFUN (prfunr, "Applying prf unrolling", UPRFdoUnrollPRFs,
               global.optimize.doprfunr, opt, cyc)

CYCLEPHASEFUN (lur, "Applying loop unrolling", LURdoLoopUnrolling, global.optimize.dolur,
               opt, cyc)

CYCLEPHASEFUN (lurssa, "Restoring SSA form after loop unrolling",
               SSATdoTransformOneFunction, global.optimize.dolur, opt, cyc)

CYCLEPHASEFUN (wlur, "Applying withloop unrolling", WLURdoWithloopUnrolling,
               global.optimize.dowlur, opt, cyc)

CYCLEPHASEFUN (wlurssa, "Restoring SSA form after withloop unrolling",
               SSATdoTransformOneFunction, global.optimize.dowlur, opt, cyc)

CYCLEPHASEFUN (linl, "Inlining degenerated LaC functions", LINLdoLACInliningOneFundef,
               global.lacinline, opt, cyc)

CYCLEPHASEFUN (wlir, "Applying with-loop invariant removal",
               LIRdoWithLoopInvariantRemovalOneFundef, global.optimize.dolir, opt, cyc)

CYCLEPHASEFUN (etc, "Eliminating typeconv primitives", ETCdoEliminateTypeConversions,
               global.optimize.doetc, opt, cyc)

CYCLEPHASEFUN (esd, "Eliminating subtraction and division operators", ESDdoElimSubDiv,
               global.optimize.dosde
                 && (global.optimize.doas || global.optimize.doal
                     || global.optimize.dodl),
               opt, cyc)

CYCLEPHASEFUN (as, "Arithmetic Simplification", ASdoArithmeticSimplification,
               global.optimize.doas, opt, cyc)

CYCLEPHASEFUN (al, "Applying associative law", ALdoAssocLawOptimizationOneFundef,
               global.optimize.doal, opt, cyc)

CYCLEPHASEFUN (dl, "Applying distributive law", DLdoDistribLawOptimizationOneFundef,
               global.optimize.dodl, opt, cyc)

CYCLEPHASEFUN (uesd, "Reintroducing subtraction and division operators",
               UESDdoUndoElimSubDiv,
               global.optimize.dosde
                 && (global.optimize.doas || global.optimize.doal
                     || global.optimize.dodl),
               opt, cyc)

CYCLEPHASEFUN (dcr2, "Applying dead code removal", DCRdoDeadCodeRemovalOneFundef,
               global.optimize.dodcr, opt, cyc)

FUNEND (cyc)

CYCLEPHASE (sisi, "Simplifying function signatures", SISIdoSignatureSimplification,
            global.optimize.dosisi &&global.optimize.dodcr, opt, cyc)

CYCLEPHASE (lof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS, opt, cyc)

ENDCYCLE (cyc)

/*************************************************/

CYCLE (scyc, "Type stabilization cycle",
       global.run_stabilization_cycle &&global.optimize.doscyc, opt)

FUNBEGIN (scyc, opt, scyc)

CYCLEPHASEFUN (tup, "Applying type upgrade", NTCdoNewTypeCheckOneFunction,
               global.optimize.dotup, opt, scyc)

CYCLEPHASEFUN (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypesOneFunction,
               global.optimize.dotup, opt, scyc)

CYCLEPHASEFUN (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypesOneFunction,
               global.optimize.dotup, opt, scyc)

CYCLEPHASEFUN (dfc, "Applying function call dispatch", DFCdoDispatchFunCallsOneFundef,
               ALWAYS, opt, scyc)

FUNEND (scyc)

CYCLEPHASE (lof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS, opt, scyc)

ENDCYCLE (scyc)

/*************************************************/

SUBPHASE (ls, "Applying Loop Scalarization", LSdoLoopScalarization, global.optimize.dols,
          opt)

SUBPHASE (lir2, "Applying loop invariant removal", LIRdoLoopInvariantRemoval,
          global.optimize.dolir, opt)

SUBPHASE (dfr3, "Removing dead functions", DFRdoDeadFunctionRemoval,
          global.optimize.dodfr, opt)

SUBPHASE (dcr2, "Applying dead code removal again", DCRdoDeadCodeRemovalModule,
          global.optimize.dodcr, opt)

SUBPHASE (isaa2, "Inserting symbolic array attributes", ISAAdoInsertShapeVariables,
          global.optimize.dosaa, opt)

/*************************************************/

CYCLE (saacyc, "Symbolic array attribute cycle 2", global.optimize.dosaa, opt)

CYCLEPHASE (prfunr, "Applying prf unrolling", UPRFdoUnrollPRFsModule,
            global.optimize.doprfunr, opt, saacyc)

CYCLEPHASE (tup, "Applying type upgrade", NTCdoNewReTypeCheck, global.optimize.dotup, opt,
            saacyc)

CYCLEPHASE (etv, "Eliminating type variables", EATdoEliminateAlphaTypes,
            global.optimize.dotup, opt, saacyc)

CYCLEPHASE (ebt, "Eliminating bottom types", EBTdoEliminateBottomTypes,
            global.optimize.dotup, opt, saacyc)

CYCLEPHASE (cf, "Applying constant folding", CFdoConstantFolding, global.optimize.docf,
            opt, saacyc)

CYCLEPHASE (cse, "Elimininating common subexpressions",
            CSEdoCommonSubexpressionEliminationModule, global.optimize.docse, opt, saacyc)

CYCLEPHASE (cvp, "Propagating constants and variables", CVPdoConstVarPropagation,
            global.optimize.docvp, opt, saacyc)

CYCLEPHASE (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
            global.optimize.dowlpg, opt, saacyc)

CYCLEPHASE (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplificationModule,
            global.optimize.dowlsimp, opt, saacyc)

CYCLEPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr,
            opt, saacyc)

ENDCYCLE (saacyc)

/*************************************************/

SUBPHASE (tup, "Running final type inference", NTCdoNewReTypeCheck, ALWAYS, opt)

SUBPHASE (etv, "Eliminating type variables", EATdoEliminateAlphaTypes, ALWAYS, opt)

SUBPHASE (ebt, "Eliminating bottom types", EBTdoEliminateBottomTypes, ALWAYS, opt)

SUBPHASE (wlfs, "Applying with-loop fusion", WLFSdoWithloopFusion, global.optimize.dowlfs,
          opt)

SUBPHASE (wlfscse, "Elimininating common subexpressions after fusion",
          CSEdoCommonSubexpressionEliminationModule,
          global.optimize.dowlfs &&global.optimize.docse, opt)

SUBPHASE (wlfsdcr, "Removing dead code after fusion", DCRdoDeadCodeRemovalModule,
          global.optimize.dowlfs &&global.optimize.dodcr, opt)

/*
 * !!! If they should ever work again, WLAA, TSI, and AP must run here
 */

SUBPHASE (wlpg2, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
          ALWAYS,
          /*
           * Another MANDATORY run of WLPG. This is necessary to prevent AKSIV
           * with-loops to arrive at wltransform
           */
          opt)

SUBPHASE (wrci, "Inferencing with-loop reuse candidates",
          WRCIdoWithloopReuseCandidateInference, global.optimize.douip, opt)

SUBPHASE (wlidx, "Annoting offset variable at with-loops", WLIDXdoAnnotateWithloopIdxs,
          ALWAYS, opt)

SUBPHASE (ivesplit, "Eliminating index vectors (split selections)",
          IVESPLITdoSplitSelections, global.optimize.doive, opt)

SUBPHASE (ivecvp, "Propagating constants and variables (for IVE)",
          CVPdoConstVarPropagation, global.optimize.doive &&global.optimize.docvp, opt)

SUBPHASE (ivecse, "Eliminating common subexpression (for IVE)",
          CSEdoCommonSubexpressionEliminationModule,
          global.optimize.doive &&global.optimize.docse, opt)

SUBPHASE (iveras, "Eliminating index vectors (reuse WL-offsets and scalarize)",
          IVERASdoWithloopReuseAndOptimisation, global.optimize.doive, opt)

SUBPHASE (wlflt, "Trying to flatten multi-dimensional withloops",
          WLFLTdoWithloopFlattening, global.optimize.dowlflt, opt)

SUBPHASE (esaa2, "Eliminating symbolic array attributes", ESVdoEliminateShapeVariables,
          global.optimize.dosaa, opt)

SUBPHASE (lir3, "Applying loop invariant removal", LIRdoLoopInvariantRemoval,
          (global.optimize.dosaa || global.optimize.doive) && global.optimize.dolir, opt)

SUBPHASE (scc, "Stripping conformity checks", SCCdoStripConformityChecks,
          !global.runtimecheck.conformity && global.insertconformitychecks, opt)

SUBPHASE (ufl, "Unflattening WL generator", UFLdoUnflattenWLGenerators, global.ssaiv, opt)

SUBPHASE (dcr3, "Removing dead code", DCRdoDeadCodeRemovalModule,
          (global.optimize.dosaa || global.optimize.doive
           || !global.runtimecheck.conformity)
            && global.optimize.dodcr,
          opt)

SUBPHASE (wllom, "Withloop lock optimization marking", WLLOMdoLockOptimizationMarking,
          global.optimize.dowllo, opt)

SUBPHASE (wllos, "Withloop lock optimization shifting", WLLOSdoLockOptimizationShifting,
          global.optimize.dowllo, opt)

SUBPHASE (fdi, "Freeing dispatch information", FDIdoFreeDispatchInformation, ALWAYS, opt)

SUBPHASE (pfap, "Profiling function applications", PFdoProfileFunCalls, global.doprofile,
          opt)

SUBPHASE (stat, "Displaying optimisation statistics", STATdoPrintStatistics,
          global.verbose_level >= 3, opt)

ENDPHASE (opt)

/******************************************************************************/

PHASE (wlt, "Transforming with-loop representation", ALWAYS)

SUBPHASE (ussa, "Converting from SSA form", USSATdoUndoSsaTransform, ALWAYS, wlt)

SUBPHASE (f2l, "Reintroducing loops and conditionals", F2LdoFun2Lac, ALWAYS, wlt)

SUBPHASE (linl, "Inlining LaC functions", LINLdoLACInlining, ALWAYS, wlt)

SUBPHASE (wltr, "Transforming with-loop representation", WLTRAdoWlTransform, ALWAYS, wlt)

SUBPHASE (l2f, "Eliminating loops and conditionals", L2FdoLac2Fun, ALWAYS, wlt)

SUBPHASE (ssa, "Establishing static single assignment form", SSATdoTransform, ALWAYS, wlt)

SUBPHASE (cvp, "Propagating constants and variables", CVPdoConstVarPropagation,
          global.optimize.docvp, wlt)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr,
          wlt)

SUBPHASE (wlsd, "Splitting withloops by dimensions", WLSDdoWithLoopSplitDimensions,
          global.backend == BE_mutc, wlt)

ENDPHASE (wlt)

/******************************************************************************/

#ifndef PRODUCTION

PHASE (mt3, "Running 3rd generation multithreading", NEVER)

SUBPHASE (tem, "Tagging execution modes", TEMdoTagExecutionmode, ALWAYS, mt3)

SUBPHASE (crwiw, "Creating with in with", CRWIWdoCreateWithinwith, ALWAYS, mt3)

SUBPHASE (pem, "Propagating execution modes", PEMdoPropagateExecutionmode, ALWAYS, mt3)

SUBPHASE (cdfg, "Creating data flow graph", CDFGdoCreateDataflowgraph, ALWAYS, mt3)

SUBPHASE (asmra, "Rearringing assignments", ASMRAdoAssignmentsRearrange, ALWAYS, mt3)

SUBPHASE (crece, "Creating execution mode cells", CRECEdoCreateCells, ALWAYS, mt3)

SUBPHASE (cegro, "Extending execution mode cells", CEGROdoCellGrowth, ALWAYS, mt3)

SUBPHASE (repfun, "Replicating functions", REPFUNdoReplicateFunctions, ALWAYS, mt3)

SUBPHASE (mtdfr, "Removing superfluous functions", DFRdoDeadFunctionRemoval, ALWAYS, mt3)

SUBPHASE (concel, "Consolidating execution mode cells", CONCELdoConsolidateCells, ALWAYS,
          mt3)

SUBPHASE (abort, "Aborting MT3 compilation", MTABabort, ALWAYS, mt3)

ENDPHASE (mt3)

#endif /* PRODUCTION */

/******************************************************************************/

PHASE (mem, "Introducing memory management instructions", ALWAYS)

SUBPHASE (simd, "SIMD inference", SIMDdoInferSIMD, global.simd, mem)

SUBPHASE (asd, "AUD/SCL distinction", ASDdoAudSclDistinction, ALWAYS, mem)

SUBPHASE (copy, "Making copy operations explicit", EMECdoExplicitCopy, ALWAYS, mem)

SUBPHASE (racc, "Removing alias results from conformity checks",
          EMRACCdoRemoveAliasResultsFromConformityChecks,
          global.runtimecheck.conformity &&global.insertconformitychecks, mem)

SUBPHASE (alloc, "Introducing explicit allocation statements ", EMALdoAlloc, ALWAYS, mem)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr,
          mem)

SUBPHASE (rci, "Inferring reuse candidates", EMRIdoReuseInference, global.optimize.douip,
          mem)

SUBPHASE (shal, "Activating display of alias information", SHALactivate, ALWAYS, mem)

SUBPHASE (ia, "Interface aliasing analysis", EMIAdoInterfaceAnalysis,
          global.optimize.dosrf, mem)

SUBPHASE (lro, "Applying loop reuse optimization", EMLRdoLoopReuseOptimization,
          global.optimize.dosrf &&global.optimize.dolro, mem)

SUBPHASE (aa, "Aliasing analysis", EMAAdoAliasAnalysis, global.optimize.dosrf, mem)

SUBPHASE (srce, "Removing non-local reuse-candidates", SRCEdoRemoveReuseCandidates,
          global.optimize.douip, mem)

SUBPHASE (frc, "Removing invalid reuse candidates", FRCdoFilterReuseCandidates,
          global.optimize.douip, mem)

SUBPHASE (sr, "Static reuse", EMSRdoStaticReuse,
          global.optimize.douip &&global.optimize.dosrf, mem)

SUBPHASE (rb, "Introducing reuse branches", EMRBdoReuseBranching,
          global.optimize.doipc || (global.optimize.douip && global.optimize.dodr), mem)

SUBPHASE (ipc, "Identifying in-place updates", EMIPdoInplaceComputation,
          global.optimize.doipc, mem)

SUBPHASE (dr, "Exploiting data reuse", EMDRdoDataReuse,
          global.optimize.douip &&global.optimize.dodr, mem)

SUBPHASE (dcr2, "Removing dead code again", DCRdoDeadCodeRemovalModule,
          global.optimize.dodcr, mem)

SUBPHASE (unshal, "Deactivating display of alias information", SHALdeactivate, ALWAYS,
          mem)

SUBPHASE (rc, "Running reference count inference", RCIdoReferenceCounting, ALWAYS, mem)

SUBPHASE (rcm, "Reducing reference counting instructions", RCMdoRefcountMinimization,
          ALWAYS, mem)

SUBPHASE (rco, "Optimizing reference counting instructions", EMRCOdoRefCountOpt,
          global.optimize.dorco, mem)

#if 0
SUBPHASE( mvsmi,
          "Moving shared memory management instructions out of SPMD functions",
          MVSMIdoMoveSharedMemoryManagementInstructions, 
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop),
          mem)
#endif

SUBPHASE (re, "Removing reuse instructions", EMREdoReuseElimination, ALWAYS, mem)

ENDPHASE (mem)

/******************************************************************************/

PHASE (ussa, "Converting from static single assignment form", ALWAYS)

SUBPHASE (ussa, "Converting from SSA form", USSATdoUndoSsaTransform, ALWAYS, ussa)

SUBPHASE (f2l, "Reintroducing loops and conditionals", F2LdoFun2Lac, ALWAYS, ussa)

SUBPHASE (linl, "Inlining LaC functions", LINLdoLACInlining, ALWAYS, ussa)

SUBPHASE (rec, "Removing external code", RECdoRemoveExternalCode, ALWAYS, ussa)

#if 0
SUBPHASE( spmdfix, 
          "Fixing SPMD function signatures",
          FSFSdoFixSpmdFunctionSignatures, 
          ALWAYS,
          ussa)
#endif

SUBPHASE (rera, "Restoring reference arguments", RERAdoRestoreReferenceArguments, ALWAYS,
          ussa)

SUBPHASE (reso, "Restoring global objects", RESOdoRestoreObjects, ALWAYS, ussa)

ENDPHASE (ussa)

/******************************************************************************/

PHASE (mt, "Running automatic parallelisation",
       (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

SUBPHASE (spmdi, "Building SPMD blocks around with-loops", SPMDIdoSpmdInit, ALWAYS, mt)

SUBPHASE (cmtf, "Creating MT variants of exported and provided functions",
          CMTFdoCreateMtFuns, ALWAYS, mt)

SUBPHASE (spmdl, "Lifting SPMD blocks to functions", SPMDLdoSpmdLift, ALWAYS, mt)

SUBPHASE (sched, "Annotating scheduling information", SCHEDdoScheduleTrav, ALWAYS, mt)

SUBPHASE (sspmdls, "Applying SPMD linksign pragma", SSPMDLSdoSetSpmdLinksign, ALWAYS, mt)

ENDPHASE (mt)

/******************************************************************************/

PHASE (pc, "Preparing C code generation", ALWAYS)

SUBPHASE (sls, "Applying linksign pragma", SLSdoSetLinksign, ALWAYS, pc)

SUBPHASE (mmv, "Marking memval identifiers", MMVdoMarkMemVals, ALWAYS, pc)

SUBPHASE (moi, "Manage object initialisers", MOIdoManageObjectInitialisers, ALWAYS, pc)

SUBPHASE (rcs, "Resolving code sharing in With-Loops", RCSdoResolveCodeSharing, ALWAYS,
          pc)

/*
 * WARNING: no phases that duplicate code below this line!
 *          FPC builds the argtabs which CANNOT be maintained
 *          by duptree!
 */

SUBPHASE (fpc, "Reorganising function prototypes", FPCdoFunctionPrecompile, ALWAYS, pc)

SUBPHASE (tcp, "Applying type conversions", TCPdoTypeConversions, ALWAYS, pc)

SUBPHASE (mng, "Mark NoOp Grids", MNGdoMarkNoopGrids, ALWAYS, pc)

SUBPHASE (rid, "Consistently renaming identifiers", RIDdoRenameIdentifiers, ALWAYS, pc)

ENDPHASE (pc)

/******************************************************************************/

PHASE (cg, "Generating Code", ALWAYS)

SUBPHASE (ctr, "Converting to old type representation", CTRdoConvertToOldTypes, ALWAYS,
          cg)

SUBPHASE (cpl, "Creating intermediate code macros", COMPdoCompile, ALWAYS, cg)

SUBPHASE (prt, "Generating C file(s)", PRTdoPrint, ALWAYS, cg)

SUBPHASE (frtr, "De-allocating syntax tree representation", FREEdoFreeTree, ALWAYS, cg)

ENDPHASE (cg)

/******************************************************************************/

PHASE (icc, "Creating binary code", ALWAYS)

SUBPHASE (hdep, "Handling dependencies", DEPdoHandleDependencies, ALWAYS, icc)

SUBPHASE (ivcc, "Invoking C compiler", CCMinvokeCC, ALWAYS, icc)

SUBPHASE (crl, "Creating SAC library", LIBBcreateLibrary, global.filetype != F_prog, icc)

ENDPHASE (icc)

/******************************************************************************/

#include "phase_undefine_defs.mac"
