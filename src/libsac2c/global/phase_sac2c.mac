/*
 * $Id$
 */

#include "phase_initialise_defs.mac"

/******************************************************************************/
PHASE (scp, "Loading SAC program", !global.runtime)

SUBPHASE (loc, "Locating source code", SPdoLocateSource, ALWAYS, scp)

SUBPHASE (cpp, "Running C preprocessor", SPdoRunPreProcessor, ALWAYS, scp)

SUBPHASE (prs, "Parsing input file", SPdoScanParse, ALWAYS, scp)

ENDPHASE (scp)

/******************************************************************************/

PHASE (pre, "Preprocessing SAC program", !global.runtime)

SUBPHASE (hs, "Hiding struct definitions behind typedefs and accessors", HSdoHideStructs,
          ALWAYS, pre)

SUBPHASE (iotc, "Introducing user-tracing calls", IUTCdoIntroduceUserTraceCalls,
          global.dousertrace, pre)

SUBPHASE (zgwl, "Handling zero-generator with-loops", HZGWLdoHandleZeroGeneratorWithLoops,
          ALWAYS, pre)

SUBPHASE (mgwl, "Handling multi-generator with-loops", HWLGdoHandleWithLoops, ALWAYS, pre)

SUBPHASE (mowl, "Handling multi-operator with-loops", HWLOdoHandleWithLoops, ALWAYS, pre)

SUBPHASE (acn, "Resolving axis control and dot notation", HDdoEliminateSelDots, ALWAYS,
          pre)

SUBPHASE (rpr, "Resolving pragma annotations", RSPdoResolvePragmas, ALWAYS, pre)

SUBPHASE (obi, "Generating object initializers", OIdoObjectInit, ALWAYS, pre)

SUBPHASE (csgd, "Checking and simplifying generic definitions",
          CSGDdoCheckAndSimplifyGenericDefinitions, ALWAYS, pre)

ENDPHASE (pre)

/******************************************************************************/

PHASE (mod, "Running module system", ALWAYS)

SUBPHASE (prcl, "Parse runtime optimization commandline", RTsetupRuntimeCompiler,
          global.runtime, mod)

SUBPHASE (rsa, "Processing use and import statements", RSAdoResolveAll, !global.makedeps,
          mod)

SUBPHASE (ans, "Annotating namespaces", ANSdoAnnotateNamespace, !global.makedeps, mod)

SUBPHASE (gdp, "Gathering dependencies", GDPdoGatherDependencies, ALWAYS, mod)

SUBPHASE (pdp, "Printing dependencies", DEPdoPrintDependencies, global.makedeps, mod)

SUBPHASE (imp, "Retrieving imported symbols", IMPdoImportSymbols, ALWAYS, mod)

SUBPHASE (uss, "Retrieving used symbols", USSdoUseSymbols, ALWAYS, mod)

SUBPHASE (asf, "Loading prelude functions", ASFdoAddSpecialFunctions, ALWAYS, mod)

ENDPHASE (mod)

/******************************************************************************/

PHASE (sim, "Simplifying source code", ALWAYS)

SUBPHASE (w2d, "Transforming while-loops into do-loops", W2DdoTransformWhile2Do, ALWAYS,
          sim)

SUBPHASE (ece, "Eliminating conditional expressions", HCEdoHandleConditionalExpressions,
          ALWAYS, sim)

SUBPHASE (moe, "Handling multiple operator expressions", HMdoHandleMops, ALWAYS, sim)

SUBPHASE (flt, "Flattening nested expressions", FLATdoFlatten, ALWAYS, sim)

SUBPHASE (udt, "Processing user defined types", RSTdoResolveSymbolTypes, ALWAYS, sim)

SUBPHASE (gntc, "Generating nested type conversion functions",
          GNTCdoGenerateNestedTypeConversions, ALWAYS, sim)

SUBPHASE (ggtc, "Generating generic type conversion functions",
          GGTCdoGenerateGenericTypeConversions, ALWAYS, sim)

SUBPHASE (rtfilter, "Filter unneeded functions (runtime specialization)", RTdoFilter,
          global.runtime, sim)

ENDPHASE (sim)

/******************************************************************************/

PHASE (ptc, "Converting to static single assignment form", ALWAYS)

SUBPHASE (ivd, "Inserting variable declarations", INSVDdoInsertVardec, ALWAYS, ptc)

SUBPHASE (itc, "Converting type decls into type conversions", INSTCdoInsertTypeConv,
          ALWAYS, ptc)

SUBPHASE (cwf, "Creating wrapper functions", CRTWRPdoCreateWrappers, ALWAYS, ptc)

SUBPHASE (gon, "Running global object analysis", OANdoObjectAnalysis, ALWAYS, ptc)

SUBPHASE (goi, "Generating global object initialiser", GOIdoGenerateObjectInitialiser,
          ALWAYS, ptc)

SUBPHASE (rso, "Resolving global objects", RSOdoResolveObjects, ALWAYS, ptc)

SUBPHASE (rrp, "Resolving reference parameters", RRAdoResolveReferenceArgs, ALWAYS, ptc)

SUBPHASE (ewt, "Extending dispatch information", EWTdoExtendWrapperTypes, ALWAYS, ptc)

SUBPHASE (l2f, "Eliminating loops and conditionals", L2FdoLac2Fun, ALWAYS, ptc)

SUBPHASE (elf, "Extending LaC funs", ELFdoExtendLacFuns, global.elf, ptc)

SUBPHASE (ssa, "Establishing static single assignment form", SSATdoTransform, ALWAYS, ptc)

ENDPHASE (ptc)

/******************************************************************************/

PHASE (tc, "Running type inference system", ALWAYS)

SUBPHASE (esp, "Enforcing Specializations", ESPdoEnforceSpecialization, ALWAYS, tc)

SUBPHASE (sossk, "Specialization Oracle for Static Shape Knowledge",
          SOSSKdoSpecializationOracleSSK, global.dotogstuff, tc)

SUBPHASE (ti, "Running type inference system", NTCdoNewTypeCheck, ALWAYS, tc)

SUBPHASE (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes, ALWAYS, tc)

SUBPHASE (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes, ALWAYS, tc)

SUBPHASE (swr, "Splitting Wrappers", SWRdoSplitWrappers, ALWAYS, tc)

ENDPHASE (tc)

/******************************************************************************/

PHASE (exp, "Processing exports", ALWAYS)

SUBPHASE (exp, "Exporting symbols", EXPdoExport, ALWAYS, exp)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr,
          exp)

SUBPHASE (ser, "Serializing syntax tree", SERdoSerialize,
          ((global.filetype == FT_modimp) || (global.filetype == FT_classimp)), exp)

SUBPHASE (rgd, "Removing generic function definitions", RGDdoRemoveGenericDefinitions,
          ALWAYS, exp)

SUBPHASE (iif, "Restoring bodies of imported inline functions", PPIdoPrepareInline,
          ALWAYS, exp)

SUBPHASE (cspf, "MUTC Creating spawn functions", CSPFdoCreateSpawnFunctions,
          (global.backend == BE_mutc), exp)

ENDPHASE (exp)

/******************************************************************************/

PHASE (unq, "Checking uniqueness property of objects", ALWAYS)

SUBPHASE (cua, "Checking uniqueness annotations", CUAdoCheckUniquenessAnnotations, ALWAYS,
          unq)

SUBPHASE (cuq, "Checking uniqueness", CUdoCheckUniqueness, ALWAYS, unq)

ENDPHASE (unq)

/******************************************************************************/

PHASE (cwc, "Creating Wrapper Code and Eliminating User-Defined Types", ALWAYS)

#ifdef CG_STRUCT_TRY

SUBPHASE (dfc, "Trying to dispatch functions statically", DFCdoDispatchFunCalls, ALWAYS,
          cwc)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr,
          cwc)

SUBPHASE (des, "Removing all structs", DESdoDeStruct, ALWAYS, cwc)

SUBPHASE (ewt, "Extending dispatch information", EWTdoExtendWrapperTypes, ALWAYS, cwc)

SUBPHASE (cwb, "Creating Wrapper Bodies", CWCdoCreateWrapperCode, ALWAYS, cwc)

SUBPHASE (l2f, "Eliminating conditionals in wrapper code", L2FdoLac2Fun, ALWAYS, cwc)

SUBPHASE (ssa, "Establishing static single assignment form in wrapper code",
          SSATdoTransformAllowGOs, ALWAYS cwc)

#else /*  CG_STRUCT_TRY */

SUBPHASE (cwb, "Creating Wrapper Bodies", CWCdoCreateWrapperCode, ALWAYS, cwc)

SUBPHASE (l2f, "Eliminating conditionals in wrapper code", L2FdoLac2Fun, ALWAYS, cwc)

SUBPHASE (ssa, "Establishing static single assignment form in wrapper code",
          SSATdoTransform, ALWAYS, cwc)

SUBPHASE (dfc, "Trying to dispatch functions statically", DFCdoDispatchFunCalls, ALWAYS,
          cwc)

SUBPHASE (des, "Removing all structs", DESdoDeStruct, ALWAYS, cwc)

#endif /*  CG_STRUCT_TRY */

SUBPHASE (eudt, "Eliminating User-Defined Types", RCdoRemoveCasts, ALWAYS, cwc)

SUBPHASE (cse, "Applying common subexpression elimination",
          CSEdoCommonSubexpressionElimination, global.optimize.docse, cwc)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr, cwc)

SUBPHASE (icc, "Inserting Conformity Checks", ICCdoInsertConformityChecks,
          global.insertconformitychecks, cwc)

SUBPHASE (ti, "Running type inference system", NTCdoNewReTypeCheckFromScratch, ALWAYS,
          cwc)

SUBPHASE (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes, ALWAYS, cwc)

SUBPHASE (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes, ALWAYS, cwc)

ENDPHASE (cwc)

/******************************************************************************/

PHASE (ewl, "Enhancing with-loops", ALWAYS)

SUBPHASE (accu, "Introducing explicit accumulators", EAdoExplicitAccumulate, ALWAYS, ewl)

SUBPHASE (adp, "Adding default partitions", WLDPdoWlDefaultPartition, ALWAYS, ewl)

SUBPHASE (cf, "Applying constant folding", CFdoConstantFolding,
          global.optimize.docf &&global.optimize.doewlcf, ewl)

SUBPHASE (cse, "Applying common subexpression elimination",
          CSEdoCommonSubexpressionElimination, global.optimize.docse, ewl)

SUBPHASE (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
          ALWAYS, ewl)

SUBPHASE (wlbsc, "Ensuring structural constants for with-loop partition bounds",
          WLBSCdoWlbounds2structConsts, ALWAYS, ewl)

ENDPHASE (ewl)

/******************************************************************************/

PHASE (opt, "Running SAC optimizations", ALWAYS)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr,
          opt)

SUBPHASE (inl, "Applying function inlining", INLdoInlining, global.optimize.doinl, opt)

SUBPHASE (tgtl, "Transform gt and ge operators to lt and le operators",
          TGTLdoTransformGtgeToLtle, global.optimize.dotgtl, opt)

SUBPHASE (dfr2, "Removing dead functions", DFRdoDeadFunctionRemoval,
          global.optimize.dodfr, opt)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr, opt)

SUBPHASE (dlir, "Applying do-loop invariant removal", DLIRdoLoopInvariantRemoval,
          FALSE, // global.optimize.dodlir,
          opt)

SUBPHASE (wlir, "Applying with-loop invariant removal", WLIRdoLoopInvariantRemoval,
          FALSE, // global.optimize.dowlir,
          opt)

SUBPHASE (glf, "Grouping local functions", GLFdoGroupLocalFuns, ALWAYS, opt)

CYCLE (cyc, "Optimization cycle", global.optimize.docyc, opt, RESET)

FUNBEGIN (cyc, opt, cyc)

CYCLEPHASEFUN (cse, "Applying common subexpression elimination",
               CSEdoCommonSubexpressionElimination, global.optimize.docse, opt, cyc)

CYCLEPHASEFUN (ili, "Inferring loop invariant variables",
               IIPIdoIterationInvariantParameterInference, ALWAYS, opt, cyc)

CYCLEPHASEFUNOLD (tup, "Applying type upgrade", NTCdoNewTypeCheck, global.optimize.dotup,
                  opt, cyc)

CYCLEPHASEFUN (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes,
               global.optimize.dotup, opt, cyc)

CYCLEPHASEFUN (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes,
               global.optimize.dotup, opt, cyc)

CYCLEPHASEFUN (dfc, "Applying function call dispatch", DFCdoDispatchFunCalls, ALWAYS, opt,
               cyc)

CYCLEPHASEFUNOLD (inl, "Applying inlining", INLdoInlining, global.optimize.doinl, opt,
                  cyc)

CYCLEPHASEFUNOLD (tgtl, "Transform gt and ge operators to lt and le operators",
                  TGTLdoTransformGtgeToLtle, global.optimize.dotgtl, opt, cyc)

CYCLEPHASEFUN (wlprop, "Applying with-loop propagation", WLPROPdoWithloopPropagation,
               global.optimize.dowlprop, opt, cyc)

CYCLEPHASEFUN (ls, "Applying Loop Scalarization", LSdoLoopScalarization,
               global.optimize.dols, opt, cyc)

CYCLEPHASEFUN (lacsi, "Applying Loop & Conditional Argument Scalarization",
               LACSIdoLoopAndCondScalarization, global.optimize.dolacsi, opt, cyc)

CYCLEPHASEFUN (lacso, "Applying Loop & Conditional Result Scalarization",
               LACSOdoLoopAndCondScalarization, global.optimize.dolacso, opt, cyc)

CYCLEPHASEFUN (cf, "Applying constant folding", CFdoConstantFolding, global.optimize.docf,
               opt, cyc)

CYCLEPHASEFUNOLD (linl, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, cyc)

CYCLEPHASEFUN (vp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, opt,
               cyc)

CYCLEPHASEFUN (rea, "Reorder arguments of equality primitive function ",
               REAdoReorderEqualityprfArguments, global.optimize.dorea, opt, cyc)

CYCLEPHASEFUN (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
               global.optimize.dowlpg, opt, cyc)

CYCLEPHASEFUN (wlbsc, "Ensuring structural constants for with-loop partition bounds",
               WLBSCdoWlbounds2structConsts, global.optimize.dowlpg, opt, cyc)

CYCLEPHASEFUN (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification,
               global.optimize.dowlsimp, opt, cyc)

CYCLEPHASEFUN (cwle, "Eliminate copy with-loops", CWLEdoCopyWithLoopElimination,
               global.optimize.docwle, opt, cyc)

CYCLEPHASEFUN (wli, "Inferring foldable with-loops", WLIdoWLI, global.optimize.dowlf, opt,
               cyc)

CYCLEPHASEFUN (wlf, "Applying with-loop folding", WLFdoWLF, global.optimize.dowlf, opt,
               cyc)

CYCLEPHASEFUNOLD (wlfssa, "Restoring SSA form after with-loop folding", SSATdoTransform,
                  global.optimize.dowlf, opt, cyc)

CYCLEPHASEFUN (dcr, "Applying dead code removal", DCRdoDeadCodeRemoval,
               global.optimize.dodcr, opt, cyc)

CYCLEPHASEFUNOLD (linl2, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, cyc)

CYCLEPHASEFUN (dlir, "Applying do-loop invariant removal", DLIRdoLoopInvariantRemoval,
               global.optimize.dodlir, opt, cyc)

CYCLEPHASEFUN (wlir, "Applying with-loop invariant removal", WLIRdoLoopInvariantRemoval,
               global.optimize.dowlir, opt, cyc)

CYCLEPHASEFUN (wls, "Applying with-loop scalarization", WLSdoWithloopScalarization,
               global.optimize.dowls, opt, cyc)

CYCLEPHASEFUN (prfunr, "Applying prf unrolling", UPRFdoUnrollPRFs,
               global.optimize.doprfunr, opt, cyc)

CYCLEPHASEFUN (etc, "Eliminating typeconv primitives", ETCdoEliminateTypeConversions,
               global.optimize.doetc, opt, cyc)

CYCLEPHASEFUN (xvp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp,
               opt, cyc)

CYCLEPHASEFUN (xrea, "Reorder arguments of equality primitive function ",
               REAdoReorderEqualityprfArguments, global.optimize.dorea, opt, cyc)

CYCLEPHASEFUN (lur, "Applying loop unrolling", LURdoLoopUnrolling, global.optimize.dolur,
               opt, cyc)

CYCLEPHASEFUNOLD (lurssa, "Restoring SSA form after loop unrolling", SSATdoTransform,
                  global.optimize.dolur, opt, cyc)

CYCLEPHASEFUNOLD (wlur, "Applying withloop unrolling", WLURdoWithloopUnrolling,
                  global.optimize.dowlur, opt, cyc)

CYCLEPHASEFUNOLD (wlurssa, "Restoring SSA form after withloop unrolling", SSATdoTransform,
                  global.optimize.dowlur, opt, cyc)

CYCLEPHASEFUNOLD (ctzg, "Comparison to zero conversion for guards",
                  CTZGdoComparisonToZeroGuards, global.optimize.doctzg, opt, cyc)

CYCLEPHASEFUN (ctz, "Comparison to zero conversion", CTZdoComparisonToZero,
               global.optimize.doctz, opt, cyc)

CYCLEPHASEFUN (esd, "Eliminating subtraction and division operators", ESDdoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, cyc)

CYCLEPHASEFUN (esdcf, "Applying constant folding (esd case)", CFdoConstantFolding,
               (global.optimize.docf && (global.optimize.doal || global.optimize.dodl)),
               opt, cyc)

CYCLEPHASEFUN (esdcse, "Applying common subexpression elimination (esd case)",
               CSEdoCommonSubexpressionElimination,
               (global.optimize.docse && (global.optimize.doal || global.optimize.dodl)),
               opt, cyc)

CYCLEPHASEFUN (as, "Arithmetic Simplification", ASdoArithmeticSimplification,
               global.optimize.doas, opt, cyc)

CYCLEPHASEFUN (al, "Applying associative law", ALdoAssocLawOptimization,
               global.optimize.doal, opt, cyc)

CYCLEPHASEFUN (dl, "Applying distributive law", DLdoDistributiveLawOptimization,
               global.optimize.dodl, opt, cyc)

CYCLEPHASEFUN (uesd, "Reintroducing subtraction and division operators",
               UESDdoUndoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, cyc)

CYCLEPHASEFUN (dcr2, "Applying dead code removal", DCRdoDeadCodeRemoval,
               global.optimize.dodcr, opt, cyc)

CYCLEPHASEFUNOLD (linl3, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, cyc)

FUNEND (cyc)

CYCLEPHASE (sisi, "Simplifying function signatures", SISIdoSignatureSimplification,
            global.optimize.dosisi &&global.optimize.dodcr, opt, cyc)

CYCLEPHASE (lof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS, opt, cyc)

ENDCYCLE (cyc)

CYCLE (saacyc, "Symbolic array attribute cycle 2", global.optimize.dosaacyc, opt, RESET)

FUNBEGIN (saacyc, opt, saacyc)

CYCLEPHASEFUNOLD (isaa, "Inserting symbolic array attributes", ISAAdoInsertShapeVariables,
                  global.optimize.dosaa, opt, saacyc)

/* ivesplit placed here for no good reason */
CYCLEPHASEFUN (ivesplit, "Eliminating index vectors (split selections)",
               IVESPLITdoSplitSelections,
               global.optimize.doive &&global.optimize.doivecyc, opt, saacyc)

CYCLEPHASEFUN (cse, "Eliminating common subexpressions",
               CSEdoCommonSubexpressionElimination, global.optimize.docse, opt, saacyc)

CYCLEPHASEFUN (ili, "Inferring loop invariant variables",
               IIPIdoIterationInvariantParameterInference, ALWAYS, opt, saacyc)

CYCLEPHASEFUNOLD (tup, "Applying type upgrade", NTCdoNewTypeCheck, global.optimize.dotup,
                  opt, saacyc)

CYCLEPHASEFUN (etv, "Eliminating type variables", EATdoEliminateAlphaTypes,
               global.optimize.dotup, opt, saacyc)

CYCLEPHASEFUN (ebt, "Eliminating bottom types", EBTdoEliminateBottomTypes,
               global.optimize.dotup, opt, saacyc)

CYCLEPHASEFUN (dfc, "Applying function call dispatch", DFCdoDispatchFunCalls, ALWAYS, opt,
               saacyc)

CYCLEPHASEFUNOLD (inl, "Applying inlining", INLdoInlining, global.optimize.doinl, opt,
                  saacyc)

CYCLEPHASEFUNOLD (tgtl, "Transform gt and ge operators to lt and le operators",
                  TGTLdoTransformGtgeToLtle, global.optimize.dotgtl, opt, saacyc)

CYCLEPHASEFUN (wlprop, "Applying with-loop propagation", WLPROPdoWithloopPropagation,
               global.optimize.dowlprop, opt, saacyc)

CYCLEPHASEFUN (ls, "Applying Loop Scalarization", LSdoLoopScalarization,
               global.optimize.dols, opt, saacyc)

CYCLEPHASEFUN (lacsi, "Applying Loop & Conditional Argument Scalarization",
               LACSIdoLoopAndCondScalarization, global.optimize.dolacsi, opt, saacyc)

CYCLEPHASEFUN (lacso, "Applying Loop & Conditional Result Scalarization",
               LACSOdoLoopAndCondScalarization, global.optimize.dolacso, opt, saacyc)

CYCLEPHASEFUN (cf, "Applying constant folding", CFdoConstantFolding, global.optimize.docf,
               opt, saacyc)

CYCLEPHASEFUNOLD (linl, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, saacyc)

CYCLEPHASEFUN (vp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, opt,
               saacyc)

CYCLEPHASEFUN (rea, "Reorder arguments of equality primitive function ",
               REAdoReorderEqualityprfArguments, global.optimize.dorea, opt, saacyc)

CYCLEPHASEFUN (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
               global.optimize.dowlpg, opt, saacyc)

CYCLEPHASEFUN (wlbsc, "Unflattening WL-partition structural constants",
               WLBSCdoWlbounds2nonFlatStructConsts, global.optimize.dowlpg, opt, saacyc)

CYCLEPHASEFUN (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification,
               global.optimize.dowlsimp, opt, saacyc)

CYCLEPHASEFUN (cwle, "Eliminate copy with-loops", CWLEdoCopyWithLoopElimination,
               global.optimize.docwle, opt, saacyc)

#ifdef MISGUIDED // Causes woes in AWLFI inverse projection. Should be post-opt
CYCLEPHASEFUNOLD (iveras, "Eliminating index vectors (reuse WL-offsets and scalarize)",
                  IVERASdoWithloopReuseAndOptimisation,
                  global.optimize.doive &&global.optimize.doivecyc, opt, saacyc)
#endif // MISGUIDED

CYCLEPHASEFUN (ivexi, "Inserting index vector extrema", IVEXIdoInsertIndexVectorExtrema,
               global.doivext, opt, saacyc)

CYCLEPHASEFUN (ivexp, "Propagating index vector extrema", IVEXPdoIndexVectorExtremaProp,
               global.doivext, opt, saacyc)

CYCLEPHASEFUN (petl, "Propagate extrema thru lacfuns", PETLdoPropagateExtremaThruLacfuns,
               global.optimize.dopetl, opt, saacyc)

CYCLEPHASEFUN (awlfi, "Inferring algebraically foldable with-loops",
               AWLFIdoAlgebraicWithLoopFolding, global.optimize.doawlf, opt, saacyc)

/* CUBSL needs this for partition-slicing decisions. */
CYCLEPHASEFUN (cse2, "Eliminating common subexpressions",
               CSEdoCommonSubexpressionElimination, global.optimize.docse, opt, saacyc)

CYCLEPHASEFUN (cubsl, "Slicing algebraically foldable with-loops",
               CUBSLdoAlgebraicWithLoopFoldingCubeSlicing, global.optimize.doawlf, opt,
               saacyc)

CYCLEPHASEFUN (awlf, "Applying algebraic with-loop folding",
               AWLFdoAlgebraicWithLoopFolding, global.optimize.doawlf, opt, saacyc)

CYCLEPHASEFUN (dcr, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr,
               opt, saacyc)

CYCLEPHASEFUNOLD (linl2, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, saacyc)

CYCLEPHASEFUN (dlir, "Applying do-loop invariant removal", DLIRdoLoopInvariantRemoval,
               global.optimize.dodlir, opt, saacyc)

CYCLEPHASEFUN (wlir, "Applying with-loop invariant removal", WLIRdoLoopInvariantRemoval,
               global.optimize.dowlir, opt, saacyc)

CYCLEPHASEFUN (wls, "Applying with-loop scalarization", WLSdoWithloopScalarization,
               global.optimize.dowls, opt, saacyc)

CYCLEPHASEFUN (prfunr, "Applying prf unrolling", UPRFdoUnrollPRFs,
               global.optimize.doprfunr, opt, saacyc)

CYCLEPHASEFUN (lur, "Applying loop unrolling", LURdoLoopUnrolling, global.optimize.dolur,
               opt, saacyc)

CYCLEPHASEFUNOLD (lurssa, "Restoring SSA form after loop unrolling", SSATdoTransform,
                  global.optimize.dolur, opt, saacyc)

CYCLEPHASEFUNOLD (wlur, "Applying withloop unrolling", WLURdoWithloopUnrolling,
                  global.optimize.dowlur, opt, saacyc)

CYCLEPHASEFUNOLD (wlurssa, "Restoring SSA form after withloop unrolling", SSATdoTransform,
                  global.optimize.dowlur, opt, saacyc)

CYCLEPHASEFUN (etc, "Eliminating typeconv primitives", ETCdoEliminateTypeConversions,
               global.optimize.doetc, opt, saacyc)

CYCLEPHASEFUNOLD (ctzg, "Comparison to zero conversion for guards",
                  CTZGdoComparisonToZeroGuards, global.optimize.doctzg, opt, saacyc)

CYCLEPHASEFUN (ctz, "Comparison to zero conversion", CTZdoComparisonToZero,
               global.optimize.doctz, opt, saacyc)

CYCLEPHASEFUN (esd, "Eliminating subtraction and division operators", ESDdoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, saacyc)

CYCLEPHASEFUN (as, "Arithmetic Simplification", ASdoArithmeticSimplification,
               global.optimize.doas, opt, saacyc)

CYCLEPHASEFUN (esdcf, "Applying constant folding (esd case)", CFdoConstantFolding,
               (global.optimize.docf && (global.optimize.doal || global.optimize.dodl)),
               opt, saacyc)

CYCLEPHASEFUN (esdcse, "Applying common subexpression elimination (esd case)",
               CSEdoCommonSubexpressionElimination,
               (global.optimize.docse && (global.optimize.doal || global.optimize.dodl)),
               opt, saacyc)

CYCLEPHASEFUN (al, "Applying associative law", ALdoAssocLawOptimization,
               global.optimize.doal, opt, saacyc)

CYCLEPHASEFUN (dl, "Applying distributive law", DLdoDistributiveLawOptimization,
               global.optimize.dodl, opt, saacyc)

CYCLEPHASEFUN (uesd, "Reintroducing subtraction and division operators",
               UESDdoUndoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, saacyc)

CYCLEPHASEFUN (dcr2, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr,
               opt, saacyc)

CYCLEPHASEFUNOLD (linl3, "Inlining degenerated LaC functions", LINLdoLACInlining,
                  global.lacinline, opt, saacyc)

CYCLEPHASEFUNOLD (edfa, "Eliminating duplicate lacfun arguments",
                  EDFAdoEliminateDuplicateFundefArgs, global.optimize.doedfa, opt, saacyc)

FUNEND (saacyc)

CYCLEPHASE (sisi, "Simplifying function signatures", SISIdoSignatureSimplification,
            global.optimize.dosisi &&global.optimize.dodcr, opt, saacyc)

CYCLEPHASE (lof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS, opt, saacyc)

ENDCYCLE (saacyc)

/*************************************************/

SUBPHASE (dfr3, "Removing dead functions", DFRdoDeadFunctionRemoval,
          global.optimize.dodfr, opt)

SUBPHASE (uctz, "Eliminating comparisons to zero", UCZCdoUndoCondZeroCmp,
          global.optimize.douctz, opt)

SUBPHASE (wlbscnf2, "Unflattening WL-partition structural constants",
          WLBSCdoWlbounds2nonFlatStructConsts, ALWAYS, opt)

SUBPHASE (uglf, "Ungrouping local functions", UGLFdoUngroupLocalFuns, ALWAYS, opt)

SUBPHASE (ivexc, "Cleaning up index vector extrema", IVEXCdoIndexVectorExtremaCleanup,
          global.optimize.doawlf || global.optimize.dolacsi, opt)

SUBPHASE (tup, "Running final type inference", NTCdoNewReTypeCheckFromScratch, ALWAYS,
          opt)

SUBPHASE (etv, "Eliminating type variables", EATdoEliminateAlphaTypes, ALWAYS, opt)

SUBPHASE (ebt, "Eliminating bottom types", EBTdoEliminateBottomTypes, ALWAYS, opt)

SUBPHASE (cffinal, "Final round of constant folding", CFdoConstantFolding,
          global.optimize.docf, opt)

SUBPHASE (wlfs, "Applying with-loop fusion", WLFSdoWithloopFusion, global.optimize.dowlfs,
          opt)

SUBPHASE (wlfscse, "Eliminating common subexpressions after fusion",
          CSEdoCommonSubexpressionElimination,
          global.optimize.dowlfs &&global.optimize.docse, opt)

SUBPHASE (wlfsdcr, "Removing dead code after fusion", DCRdoDeadCodeRemoval,
          global.optimize.dowlfs &&global.optimize.dodcr, opt)

/*
 * !!! If they should ever work again, WLAA, TSI, and AP must run here
 */

SUBPHASE (wlpg2, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
          ALWAYS,
          /*
           * Another MANDATORY run of WLPG. This is necessary to prevent AKSIV
           * with-loops to arrive at wltransform
           */
          opt)

SUBPHASE (wrci, "Inferencing with-loop reuse candidates",
          WRCIdoWithloopReuseCandidateInference, global.optimize.douip, opt)

SUBPHASE (wlidx, "Annotating offset variable at with-loops", WLIDXdoAnnotateWithloopIdxs,
          ALWAYS, opt)

SUBPHASE (ivesplit, "Eliminating index vectors (split selections)",
          IVESPLITdoSplitSelections, global.optimize.doive, opt)

SUBPHASE (ivesli, "Eliminating index vectors (split loop invariants)",
          IVESLIdoIVESplitLoopInvariants,
          global.optimize.doive &&global.optimize.doivesli, opt)

SUBPHASE (ivevp, "Propagating variables (for IVE)", VPdoVarPropagation,
          global.optimize.doive &&global.optimize.dovp, opt)

/*************************************************/

/* This cycle moved after IVE in the hopes that:
 * 1. It is not needed immediately after SAACYC,
 *    where it was previously, and
 * 2. That it will resolve Bug #709, which requires
 *    that IVE-introduced indexing operations
 *    go through TC and CF (minimally).
 */

CYCLE (scyc, "Type stabilization cycle",
       global.run_stabilization_cycle &&global.optimize.doscyc, opt, !RESET)

FUNBEGIN (scyc, opt, scyc)

CYCLEPHASEFUNOLD (tup, "Applying type upgrade", NTCdoNewTypeCheck, global.optimize.dotup,
                  opt, scyc)

CYCLEPHASEFUN (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes,
               global.optimize.dotup, opt, scyc)

CYCLEPHASEFUN (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes,
               global.optimize.dotup, opt, scyc)

CYCLEPHASEFUN (cf, "Applying constant folding", CFdoConstantFolding, global.optimize.docf,
               opt, scyc)

CYCLEPHASEFUN (vp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, opt,
               scyc)

CYCLEPHASEFUN (rea, "Reorder arguments of equality primitive function ",
               REAdoReorderEqualityprfArguments, global.optimize.dorea, opt, scyc)

CYCLEPHASEFUN (dfc, "Applying function call dispatch", DFCdoDispatchFunCalls, ALWAYS, opt,
               scyc)

FUNEND (scyc)

CYCLEPHASE (lof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS, opt, scyc)

ENDCYCLE (scyc)

SUBPHASE (wlflt, "Trying to flatten multi-dimensional withloops",
          WLFLTdoWithloopFlattening, global.optimize.dowlflt, opt)

SUBPHASE (esaa, "Eliminating symbolic array attributes", ESVdoEliminateShapeVariables,
          global.optimize.dosaa, opt)

SUBPHASE (scc, "Stripping conformity checks and dataflow guards",
          SCCdoStripConformityChecks,
          global.doivext || global.optimize.doawlf || global.insertconformitychecks, opt)

/*
 *   TC must run after IVE and before LS/LIR,
 *    in order to establish AKVness of some index variables
 *    that are later removed by LS and LIR and CF.
 */

SUBPHASE (tup2, "Applying type upgrade", NTCdoNewReTypeCheckFromScratch,
          global.optimize.dotup, opt)

SUBPHASE (etv2, "Eliminating Type Variables", EATdoEliminateAlphaTypes,
          global.optimize.dotup, opt)

SUBPHASE (ebt2, "Eliminating Bottom Types", EBTdoEliminateBottomTypes,
          global.optimize.dotup, opt)

SUBPHASE (vp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, opt)

SUBPHASE (ls, "Applying Loop Scalarization", LSdoLoopScalarization, global.optimize.dols,
          opt)

SUBPHASE (lacsi, "Applying Loop & Conditional Argument Scalarization",
          LACSIdoLoopAndCondScalarization, global.optimize.dolacsi, opt)

SUBPHASE (lacso, "Applying Loop & Conditional Result Scalarization",
          LACSOdoLoopAndCondScalarization, global.optimize.dolacso, opt)

/* Some WL generators are resolved to degeneracy too late for
 * SAACYC to remove them.
 */
SUBPHASE (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification,
          global.optimize.dowlsimp, opt)

/* LS wants CF and LIR to follow */
/* However, CF needs AKV values to handle _idx_sel( [0], [ int]),
 * and _sub_SxS_( n, 0) introduced by wlsimp,
 * so we start with TC
 */

SUBPHASE (tupls, "Applying type upgrade for LS/LACS", NTCdoNewReTypeCheckFromScratch,
          global.optimize.dotup, opt)

SUBPHASE (etvls, "Eliminating Type Variables for LS/LACS", EATdoEliminateAlphaTypes,
          global.optimize.dotup, opt)

SUBPHASE (ebtls, "Eliminating Bottom Types for LS/LACS", EBTdoEliminateBottomTypes,
          global.optimize.dotup, opt)

SUBPHASE (cfls, "Applying constant folding for LS/LACS", CFdoConstantFolding,
          global.optimize.docf, opt)

SUBPHASE (dlirls, "Applying do-loop invariant removal for LS/LACS",
          DLIRdoLoopInvariantRemoval, global.optimize.dodlir, opt)

SUBPHASE (wlirls, "Applying with-loop invariant removal for LS/LACS",
          WLIRdoLoopInvariantRemoval, global.optimize.dowlir, opt)

SUBPHASE (ussai, "Undo SSAIV Transform", USSAIdoUndoSSAivTransform, global.ssaiv, opt)

SUBPHASE (vpls, "Propagating variables for LS/LACS", VPdoVarPropagation,
          global.optimize.dovp, opt)

SUBPHASE (cpive, "Propagating constants for IVE", CPdoConstantPropagation,
          global.optimize.doive &&global.optimize.docp, opt)

SUBPHASE (cse2, "Eliminating common subexpression", CSEdoCommonSubexpressionElimination,
          global.optimize.docse, opt)

/*
 * iveras needs to run after the ive phases and after cse. So I
 * have moved it down here
 */
SUBPHASE (iveras, "Eliminating index vectors (reuse WL-offsets and scalarize)",
          IVERASdoWithloopReuseAndOptimisation, global.optimize.doive, opt)

SUBPHASE (dcr3, "Removing dead code", DCRdoDeadCodeRemoval,
          (global.optimize.dosaa || global.optimize.doive
           || !global.runtimecheck.conformity)
            && global.optimize.dodcr,
          opt)

/* TODO: lir perhaps should be run in a loop */
SUBPHASE (dlir2, "Applying do-loop invariant removal", DLIRdoLoopInvariantRemoval,
          global.optimize.dodlir, opt)

SUBPHASE (wlir2, "Applying with-loop invariant removal", WLIRdoLoopInvariantRemoval,
          global.optimize.dowlir, opt)

SUBPHASE (fprc, "Filtering partial reuse candidates", FPRCdoFilterPartialReuseCandidates,
          (global.optimize.douip && global.optimize.dopr), opt)

SUBPHASE (wllom, "Withloop lock optimization marking", WLLOMdoLockOptimizationMarking,
          global.optimize.dowllo, opt)

SUBPHASE (wllos, "Withloop lock optimization shifting", WLLOSdoLockOptimizationShifting,
          global.optimize.dowllo, opt)

SUBPHASE (dfc, "Applying final function call dispatch", DFCdoDispatchFunCalls, ALWAYS,
          opt)

SUBPHASE (finalinl, "Applying final inlining", INLdoInlining, global.optimize.doinl, opt)

SUBPHASE (xtgtl, "Transform gt and ge operators to lt and le operators",
          TGTLdoTransformGtgeToLtle, global.optimize.dotgtl, opt)

SUBPHASE (fdi, "Freeing dispatch information", FDIdoFreeDispatchInformation, ALWAYS, opt)

SUBPHASE (pfap, "Profiling function applications", PFdoProfileFunCalls, global.doprofile,
          opt)

SUBPHASE (stat, "Displaying optimisation statistics", STATdoPrintStatistics,
          global.verbose_level >= 3, opt)

ENDPHASE (opt)

/******************************************************************************/

PHASE (cuda, "Automatic parallelisation for GPUs",
       (global.backend == BE_cuda || global.backend == BE_cudahybrid))

SUBPHASE (acuwl, "CUDA Annotate CUDA withloops", ACUWLdoAnnotateCUDAWL, ALWAYS, cuda)

SUBPHASE (cucm, "CUDA cost model", CUCMdoCUDACostModel, global.backend == BE_cudahybrid,
          cuda)

SUBPHASE (pfd, "CUDA Partial folding", PFDdoPartialFold, global.optimize.dopfd, cuda)

SUBPHASE (scuf, "CUDA Split CUDA fold withloops", SCUFdoSplitCudaFold,
          global.optimize.doscuf, cuda)

SUBPHASE (cutem, "CUDA Tag execution mode", CUTEMdoTagExecutionmode,
          global.optimize.doexpar, cuda)

SUBPHASE (cuskc, "CUDA Sink scalar code", CUSKCdoSinkCode, global.optimize.doexpar, cuda)

SUBPHASE (cucc, "CUDA Create cells", CUCCdoCreateCells, global.optimize.doexpar, cuda)

#if 0
SUBPHASE( scuwl,
          "Split cudarizable withloop",
          SCUWLdoSplitCudaWithloops, 
          ( global.backend == BE_cuda || global.backend == BE_cudahybrid),
          cuda)
#endif

SUBPHASE (cadt, "Change arrays to distributed type", CADTdoChangeArraysToDistributedType,
          global.backend == BE_cudahybrid, cuda)

SUBPHASE (iwlmem, "CUDA Insert CUDA memory transfer primitives for withloops",
          IWLMEMdoInsertWithloopMemtran, global.backend == BE_cuda, cuda)

SUBPHASE (icsmem, "CUDA Insert CUDA memory transfer primitives for cudasts",
          ICSMEMdoInsertCudastMemtran,
          (global.optimize.doexpar && global.backend == BE_cuda), cuda)

SUBPHASE (vp, "Propagating variables", VPdoVarPropagation, ALWAYS, cuda)

SUBPHASE (cp, "Propagating constants", CPdoConstantPropagation, ALWAYS, cuda)

#if 0
SUBPHASE( ira,
          "CUDA Infer reusable arrays in withloops",
          IRAdoInterReusableArrays, 
          ( global.backend == BE_cuda || global.backend == BE_cudahybrid) && global.optimize.doshr,
          cuda)

SUBPHASE( shmem,
          "CUDA Exploiting data reuse with shared memory",
          SHMEMdoSharedMemoryReuse, 
          ( global.backend == BE_cuda || global.backend == BE_cudahybrid) && global.optimize.doshr,
          cuda)
#endif

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemoval, ALWAYS, cuda)

SUBPHASE (sptn, "CUDA Split partitions", SPTNdoSplitPartitions,
          global.optimize.doslpt, /*Comment out for now. A bug in loop18p.sac*/
          cuda)

SUBPHASE (acuptn, "CUDA Annotate CUDA partitions", ACUPTNdoAnnotateCUDAPartition, ALWAYS,
          cuda)

SUBPHASE (mtran, "CUDA Minimise the number of device-host data transfers",
          MTRANdoMinimizeTransfers, global.optimize.domemopt &&global.backend == BE_cuda,
          cuda)

SUBPHASE (daa, "CUDA Data access analysis", DAAdoDataAccessAnalysis,
          global.optimize.doshr, cuda)

SUBPHASE (stknl, "CUDA Create single threaded CUDA kernels", STKNLdoSingleThreadKernels,
          global.optimize.doexpar, cuda)

/*
SUBPHASE( wlds,
          "Unscalarize cudarizbale withloops",
          WLDSdoWithloopDescalarization,
          ( global.backend == BE_cuda || global.backend == BE_cudahybrid),
          cuda)
*/

ENDPHASE (cuda)

/******************************************************************************/

PHASE (wlt, "Transforming with-loop representation", ALWAYS)

SUBPHASE (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification, ALWAYS, wlt)
/*
 * Repeating this optimisation here is necessary to avoid problems with exotic
 * with-loops in subsequent wl-transform.
 */

SUBPHASE (wltr, "Transforming with-loop representation", WLTRAdoWlTransform, ALWAYS, wlt)

SUBPHASE (wlsd, "Splitting withloops by dimensions", WLSDdoWithLoopSplitDimensions,
          global.optimize.dowlsd
            && ((global.backend == BE_mutc
                 || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
                     && global.optimize.doshr))),
          wlt)

SUBPHASE (cse, "Applying common subexpression elimination",
          CSEdoCommonSubexpressionElimination,
          global.optimize.docse
            && (global.backend == BE_mutc
                || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
                    && global.optimize.doshr)),
          wlt)

SUBPHASE (rw3, "Remove unneeded With3s", RW3doRemoveWith3,
          (global.backend == BE_mutc
           || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
               && global.optimize.doshr))
            && global.optimize.dorw3,
          wlt)

SUBPHASE (ass, "Add syncs", ASdoAddSyncs,
          (global.backend == BE_mutc
           || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
               && global.optimize.doshr)),
          wlt)

SUBPHASE (ms, "Move syncs", MSdoMoveSyncs,
          (global.backend == BE_mutc
           || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
               && global.optimize.doshr))
            && global.optimize.doms,
          wlt)

SUBPHASE (cudr, "CUDA Exploiting data reuse with cuda shared memory", CUDRdoCudaDataReuse,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid)
            && global.optimize.doshr,
          wlt)

SUBPHASE (vp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, wlt)

SUBPHASE (cp, "Propagating constants", CPdoConstantPropagation,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid)
            || global.backend == BE_mutc,
          wlt)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr, wlt)

ENDPHASE (wlt)

/******************************************************************************/

#ifndef PRODUCTION

PHASE (mt3, "Running 3rd generation multithreading", NEVER)

SUBPHASE (tem, "Tagging execution modes", TEMdoTagExecutionmode, ALWAYS, mt3)

SUBPHASE (crwiw, "Creating with in with", CRWIWdoCreateWithinwith, ALWAYS, mt3)

SUBPHASE (pem, "Propagating execution modes", PEMdoPropagateExecutionmode, ALWAYS, mt3)

SUBPHASE (cdfg, "Creating data flow graph", CDFGdoCreateDataflowgraph, ALWAYS, mt3)

SUBPHASE (asmra, "Rearringing assignments", ASMRAdoAssignmentsRearrange, ALWAYS, mt3)

SUBPHASE (crece, "Creating execution mode cells", CRECEdoCreateCells, ALWAYS, mt3)

SUBPHASE (cegro, "Extending execution mode cells", CEGROdoCellGrowth, ALWAYS, mt3)

SUBPHASE (repfun, "Replicating functions", REPFUNdoReplicateFunctions, ALWAYS, mt3)

SUBPHASE (mtdfr, "Removing superfluous functions", DFRdoDeadFunctionRemoval, ALWAYS, mt3)

SUBPHASE (concel, "Consolidating execution mode cells", CONCELdoConsolidateCells, ALWAYS,
          mt3)

SUBPHASE (abort, "Aborting MT3 compilation", MTABabort, ALWAYS, mt3)

ENDPHASE (mt3)

#endif /* PRODUCTION */

/******************************************************************************/

PHASE (fp, "Functional Parallelism", global.fp || global.backend == BE_mutc)

SUBPHASE (syn, "Add Sync Statements", SYNdoAddSync, ALWAYS, fp)

SUBPHASE (mss, "Move Sync Statements", MSSdoMoveSyncStatement,
          !global.fpnoopt || global.backend == BE_mutc, fp)

SUBPHASE (tff, "Tag Fundef Nodes", TFFdoTagFPFundefs, global.fp, fp)

SUBPHASE (tfa, "Tag Ap Nodes", TFFdoTagFPAps, global.fp, fp)

SUBPHASE (lva, "Live Variable Analysis", LVAdoLiveVariableAnalysis, global.fp, fp)

SUBPHASE (css, "Count Spawns and Syncs", CSSdoCountSpawnSync, ALWAYS, fp)

ENDPHASE (fp)

/******************************************************************************/

PHASE (mem, "Introducing memory management instructions", ALWAYS)

SUBPHASE (ufiv, "Unshare index vectors in WL-folds", UFIVdoUnshareFoldIV,
          (global.backend == BE_c99), mem)

SUBPHASE (simd, "SIMD inference", SIMDdoInferSIMD, global.simd, mem)

SUBPHASE (cp, "Propagating constants", CPdoConstantPropagation, global.optimize.docp, mem)

SUBPHASE (cnstass, "CUDA Flatten generators", CNSTASSdoCUDAconstantAssignment,
          (global.backend == BE_cuda), mem)

SUBPHASE (asd, "AUD/SCL distinction", ASDdoAudSclDistinction, ALWAYS, mem)

SUBPHASE (copy, "Making copy operations explicit", EMECdoExplicitCopy, ALWAYS, mem)

SUBPHASE (racc, "Removing alias results from conformity checks",
          EMRACCdoRemoveAliasResultsFromConformityChecks,
          global.runtimecheck.conformity &&global.insertconformitychecks, mem)

SUBPHASE (alloc, "Introducing explicit allocation statements ", EMALdoAlloc, ALWAYS, mem)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemoval, global.optimize.dodcr, mem)

SUBPHASE (rci, "Inferring reuse candidates", EMRIdoReuseInference, global.optimize.douip,
          mem)

SUBPHASE (shal, "Activating display of alias information", SHALactivate, ALWAYS, mem)

SUBPHASE (ia, "Interface aliasing analysis", EMIAdoInterfaceAnalysis,
          global.optimize.dosrf, mem)

SUBPHASE (lro, "Applying loop reuse optimization", EMLRdoLoopReuseOptimization,
          global.optimize.dosrf &&global.optimize.dolro, mem)

SUBPHASE (aa, "Aliasing analysis", EMAAdoAliasAnalysis, global.optimize.dosrf, mem)

SUBPHASE (srce, "Removing non-local reuse-candidates", SRCEdoRemoveReuseCandidates,
          global.optimize.douip, mem)

SUBPHASE (frc, "Removing invalid reuse candidates", FRCdoFilterReuseCandidates,
          global.optimize.douip, mem)

SUBPHASE (sr, "Static reuse", EMSRdoStaticReuse,
          global.optimize.douip &&global.optimize.dosrf, mem)

SUBPHASE (lao, "Applying loop allocation optimization", EMLAOdoLoopAllocationOptimization,
          global.optimize.dosrf &&global.optimize.dolao, mem)

SUBPHASE (rb, "Introducing reuse branches", EMRBdoReuseBranching,
          global.optimize.doipc || (global.optimize.douip && global.optimize.dodr), mem)

SUBPHASE (ipc, "Identifying in-place updates", EMIPdoInplaceComputation,
          global.optimize.doipc, mem)

SUBPHASE (dr, "Exploiting data reuse", EMDRdoDataReuse,
          global.optimize.douip &&global.optimize.dodr, mem)

SUBPHASE (pew3, "MUTC Prune empty with3", PEW3doPruneEmptyWith3,
          global.backend == BE_mutc && global.optimize.dopew3, mem)

SUBPHASE (dcr2, "Removing dead code again", DCRdoDeadCodeRemoval, global.optimize.dodcr,
          mem)

SUBPHASE (unshal, "Deactivating display of alias information", SHALdeactivate, ALWAYS,
          mem)

SUBPHASE (rc, "Running reference count inference", RCIdoReferenceCounting, ALWAYS, mem)

SUBPHASE (rcm, "Reducing reference counting instructions", RCMdoRefcountMinimization,
          ALWAYS, mem)

SUBPHASE (rco, "Optimizing reference counting instructions", EMRCOdoRefCountOpt,
          global.optimize.dorco, mem)

#if 0
SUBPHASE( mvsmi,
          "Moving shared memory management instructions out of SPMD functions",
          MVSMIdoMoveSharedMemoryManagementInstructions, 
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop),
          mem)
#endif

SUBPHASE (re, "Removing reuse instructions", EMREdoReuseElimination, ALWAYS, mem)

ENDPHASE (mem)

/******************************************************************************/

PHASE (ussa, "Converting from static single assignment form", ALWAYS)

SUBPHASE (ussa, "Converting from SSA form", USSATdoUndoSsaTransform, ALWAYS, ussa)

SUBPHASE (f2l, "Reintroducing loops and conditionals", F2LdoFun2Lac, ALWAYS, ussa)

SUBPHASE (linl, "Inlining LaC functions", LINLdoLACInlining, ALWAYS, ussa)

SUBPHASE (rec, "Removing external code", RECdoRemoveExternalCode, ALWAYS, ussa)

#if 0
SUBPHASE( spmdfix, 
          "Fixing SPMD function signatures",
          FSFSdoFixSpmdFunctionSignatures, 
          ALWAYS,
          ussa)
#endif

SUBPHASE (rera, "Restoring reference arguments", RERAdoRestoreReferenceArguments, ALWAYS,
          ussa)

SUBPHASE (reso, "Restoring global objects", RESOdoRestoreObjects, ALWAYS, ussa)

ENDPHASE (ussa)

/******************************************************************************/

PHASE (mt, "Running automatic parallelisation",
       (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)
         || (global.backend == BE_omp))

SUBPHASE (mtcm, "Running multithreading cost model", MTCMdoRunCostModel, ALWAYS, mt)

SUBPHASE (mtstf, "Creating MT and ST functions", MTSTFdoCreateMtStFuns, ALWAYS, mt)

SUBPHASE (mtspmdf, "Creating SPMD functions", MTSPMDFdoCreateSpmdFuns,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (rmpr, "Filtering propagates", RMPRdoRemovePropagates,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (mtrmi, "Restoring memory instructions", MTRMIdoRestoreMemoryInstrs,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (mtdcr, "Removing dead code", MTDCRdoMtDeadCodeRemoval,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (mtas, "Annotating scheduling information", MTASdoAnnotateScheduling,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (sspmdls, "Applying SPMD linksign pragma", SSPMDLSdoSetSpmdLinksign,
          ((global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop)), mt)

SUBPHASE (distcond, "Creating distributed with-loop conditionals",
          DISTCONDdoCreateDistWlCond, global.backend == BE_cudahybrid, mt)

ENDPHASE (mt)

/******************************************************************************/

PHASE (pc, "Preparing C code generation", ALWAYS)

SUBPHASE (uw3, "Unroll With3", UW3doUnrollWith3,
          (global.backend == BE_mutc
           || ((global.backend == BE_cuda || global.backend == BE_cudahybrid)
               && global.optimize.doshr))
            && global.optimize.douw3,
          pc)

SUBPHASE (msa, "MUTC Mark SubAlloc", MSAdoMarkSubAlloc,
          global.backend == BE_mutc && global.optimize.domsa, pc)

SUBPHASE (lw3, "MUTC Lifting With-Loop bodies into threads", LW3doLiftWith3,
          global.backend == BE_mutc, pc)

SUBPHASE (armp, "MUTC Add RC Mode PRF", ARMPdoAddRcModePrf,
          global.backend == BE_mutc && global.optimize.doarmp, pc)

SUBPHASE (dmui, "MUTC Dynamic memory usage inference", DMUIdoDynamicMemoryUsageInference,
          global.backend == BE_mutc, pc)

SUBPHASE (pknlg, "CUDA Prepare kernel generation", PKNLGdoPrepareKernelGeneration,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid), pc)

SUBPHASE (mmv, "Marking memval identifiers", MMVdoMarkMemVals, ALWAYS, pc)

SUBPHASE (rnb, "Remove noop branch", RNBdoRemoveNoopBranch,
          global.optimize.dopra &&global.optimize.dornb, pc)

SUBPHASE (imemdist, "Insert memory transfer primitives for distributed variables",
          IMEMDISTdoInsertMemtranDist, global.backend == BE_cudahybrid, pc)

SUBPHASE (ial, "Introduce availability loops for distributed variables",
          IALdoIntroduceAvailabilityLoops, global.backend == BE_cudahybrid, pc)

SUBPHASE (cuasr, "CUDA Adjust return ids of single threaded kernel",
          CUASRdoAdjustStknlRets,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid)
            && global.optimize.doexpar,
          pc)

SUBPHASE (cuknl, "CUDA Create Cuda kernel functions", CUKNLdoCreateCudaKernels,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid), pc)

SUBPHASE (dvr, "Removing obsolete variable declarations", DVRdoDeadVardecRemoval, ALWAYS,
          pc)

SUBPHASE (dst, "MUTC Computing static thread mapping", DSTdoDistributeThreads,
          ((global.backend == BE_mutc) && (global.filetype == FT_prog)), pc)

SUBPHASE (sls, "Applying linksign pragma", SLSdoSetLinksign, ALWAYS, pc)

SUBPHASE (moi, "Manage object initialisers", MOIdoManageObjectInitialisers, ALWAYS, pc)

SUBPHASE (rcs, "Resolving code sharing in With-Loops", RCSdoResolveCodeSharing, ALWAYS,
          pc)

SUBPHASE (tmft, "MUTC tag main function as thread function", TMFTdoTagMainFunThread,
          (global.backend == BE_mutc && global.filetype == FT_prog), pc)

SUBPHASE (tft, "MUTC tag functions as thread functions if needed",
          TFTdoTagFunctionsAsThreads, (global.backend == BE_mutc), pc)

/* KEEP ABOVE fpc */
SUBPHASE (cfp, "MUTC create function pairs", CFPdoCreateFunctionPairs,
          (global.backend == BE_mutc && global.filetype != FT_prog), pc)

/* TVD: Runtime Specialization */
SUBPHASE (rtspec, "Runtime Specialization create wrapper entry functions",
          RTSPECdoCreateWrapperEntries, global.rtspec, pc)

SUBPHASE (msc, "Make Slow Clones", MSCdoMakeSlowClones, global.fp, pc)
/*
 * WARNING: no phases that duplicate code below this line!
 *          FPC builds the argtabs which CANNOT be maintained
 *          by duptree!
 */

SUBPHASE (fpc, "Reorganising function prototypes", FPCdoFunctionPrecompile, ALWAYS, pc)

SUBPHASE (tcp, "Applying type conversions", TCPdoTypeConversions, ALWAYS, pc)

SUBPHASE (mng, "Mark NoOp Grids", MNGdoMarkNoopGrids, ALWAYS, pc)

SUBPHASE (rid, "Consistently renaming identifiers", RIDdoRenameIdentifiers, ALWAYS, pc)

SUBPHASE (ofp, "OpenMP find private variables", OFPdoFindPrivate,
          (global.backend == BE_omp), pc)

SUBPHASE (mc, "Move constants to variable declaration", MCdoMoveConst, ALWAYS, pc)

SUBPHASE (pfg, "CUDA Prepare for loop generation", PFGdoPrepareForloopGeneration,
          (global.backend == BE_cuda || global.backend == BE_cudahybrid), pc)

ENDPHASE (pc)

/******************************************************************************/

PHASE (cg, "Generating Code", ALWAYS)

SUBPHASE (tp, "Tag preparation", TPdoTagPreparation, ALWAYS, cg)

SUBPHASE (ctr, "Converting to old type representation", CTRdoConvertToOldTypes, ALWAYS,
          cg)

SUBPHASE (cpl, "Creating intermediate code macros", COMPdoCompile, ALWAYS, cg)

SUBPHASE (pds, "Prepare distributed with-loop schedulers",
          PDSdoPrepareDistributedScheduler, global.backend == BE_cudahybrid, cg)

SUBPHASE (prt, "Generating C file(s)", PRTdoPrint, ALWAYS, cg)

SUBPHASE (frtr, "De-allocating syntax tree representation", FREEdoFreeTree, ALWAYS, cg)

ENDPHASE (cg)

/******************************************************************************/

PHASE (icc, "Creating binary code", ALWAYS)

SUBPHASE (hdep, "Handling dependencies", DEPdoHandleDependencies, ALWAYS, icc)

SUBPHASE (ivcc, "Invoking C compiler", CCMinvokeCC, ALWAYS, icc)

SUBPHASE (crl, "Creating SAC library", LIBBcreateLibrary, global.filetype != FT_prog, icc)

ENDPHASE (icc)

/******************************************************************************/

#include "phase_undefine_defs.mac"
