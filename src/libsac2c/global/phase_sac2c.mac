/*
 * $Id$
 */

#define ALWAYS TRUE
#define NEVER FALSE
#define ONLYIF(c) c

/*
 * PH_initial and PH_final are required to be the first and last
 * compiler phase, respectively!
 */

#ifndef PHASEelement
#define PHASEelement(it_element)
#endif

#ifndef PHASEtext
#define PHASEtext(it_text)
#endif

#ifndef PHASEfun
#define PHASEfun(it_fun)
#endif

#ifndef PHASEcond
#define PHASEcond(it_cond)
#endif

#ifndef PHASE
#define PHASE(it_element, it_text, it_fun, it_cond)                                      \
    PHASEelement (it_element) PHASEtext (it_text) PHASEfun (it_fun) PHASEcond (it_cond)
#endif

#ifndef SUBPHASEelement
#define SUBPHASEelement(it_element)
#endif

#ifndef SUBPHASEtext
#define SUBPHASEtext(it_text)
#endif

#ifndef SUBPHASEfun
#define SUBPHASEfun(it_fun)
#endif

#ifndef SUBPHASEcond
#define SUBPHASEcond(it_cond)
#endif

#ifndef SUBPHASE
#define SUBPHASE(it_element, it_text, it_fun, it_cond)                                   \
    SUBPHASEelement (it_element) SUBPHASEtext (it_text) SUBPHASEfun (it_fun)             \
      SUBPHASEcond (it_cond)
#endif

#ifndef OPTCYCLEelement
#define OPTCYCLEelement(it_element)
#endif

#ifndef OPTCYCLEtext
#define OPTCYCLEtext(it_text)
#endif

#ifndef OPTCYCLEfun
#define OPTCYCLEfun(it_fun)
#endif

#ifndef OPTCYCLEcond
#define OPTCYCLEcond(it_cond)
#endif

#ifndef OPTCYCLE
#define OPTCYCLE(it_element, it_text, it_fun, it_cond)                                   \
    OPTCYCLEelement (it_element) OPTCYCLEtext (it_text) OPTCYCLEfun (it_fun)             \
      OPTCYCLEcond (it_cond)
#endif

#ifndef ENDOPTCYCLE
#define ENDOPTCYCLE(it_element)
#endif

#ifndef OPTCYCLEFUN
#define OPTCYCLEFUN()
#endif

#ifndef ENDOPTCYCLEFUN
#define ENDOPTCYCLEFUN()
#endif

#ifndef OPTINCYCelement
#define OPTINCYCelement(it_element)
#endif

#ifndef OPTINCYCtext
#define OPTINCYCtext(it_text)
#endif

#ifndef OPTINCYCfun
#define OPTINCYCfun(it_fun)
#endif

#ifndef OPTINCYCcond
#define OPTINCYCcond(it_cond)
#endif

#ifndef OPTINCYC
#define OPTINCYC(it_element, it_text, it_fun, it_cond)                                   \
    OPTINCYCelement (it_element) OPTINCYCtext (it_text) OPTINCYCfun (it_fun)             \
      OPTINCYCcond (it_cond)
#endif

#ifndef OPTINCYCFUNelement
#define OPTINCYCFUNelement(it_element)
#endif

#ifndef OPTINCYCFUNtext
#define OPTINCYCFUNtext(it_text)
#endif

#ifndef OPTINCYCFUNfun
#define OPTINCYCFUNfun(it_fun)
#endif

#ifndef OPTINCYCFUNcond
#define OPTINCYCFUNcond(it_cond)
#endif

#ifndef OPTINCYCFUN
#define OPTINCYCFUN(it_element, it_text, it_fun, it_cond)                                \
    OPTINCYCFUNelement (it_element) OPTINCYCFUNtext (it_text) OPTINCYCFUNfun (it_fun)    \
      OPTINCYCFUNcond (it_cond)
#endif

#ifndef ENDPHASE
#define ENDPHASE(it_element)
#endif

/******************************************************************************/

PHASE (sp, "Loading SAC program", PHDdriveCompilerPhase_sp, ALWAYS)

SUBPHASE (loc, "Locating source code", SPdoLocateSource, ALWAYS)

SUBPHASE (cpp, "Running C preprocessor", SPdoRunPreProcessor, ALWAYS)

SUBPHASE (prs, "Parsing input file", SPdoScanParse, ALWAYS)

ENDPHASE (sp)

/******************************************************************************/

PHASE (pp, "Preprocessing SAC program", PHDdriveCompilerPhase_pp, ALWAYS)

SUBPHASE (hzgwl, "Handling zero-generator with-loops",
          HZGWLdoHandleZeroGeneratorWithLoops, ALWAYS)

SUBPHASE (hwlg, "Handling multi-generator with-loops", HWLGdoHandleWithLoops, ALWAYS)

SUBPHASE (hwlo, "Handling multi-operator with-loops", HWLOdoHandleWithLoops, ALWAYS)

SUBPHASE (acn, "Resolving axis control and dot notation", HDdoEliminateSelDots, ALWAYS)

SUBPHASE (pragma, "Resolving pragma annotations", RSPdoResolvePragmas, ALWAYS)

SUBPHASE (objinit, "Generating generic types and functions", OIdoObjectInit, ALWAYS)

ENDPHASE (pp)

/******************************************************************************/

PHASE (md, "Running module system", PHDdriveCompilerPhase_md, ALWAYS)

SUBPHASE (rsa, "Processing use and import statements", RSAdoResolveAll, !global.makedeps)

SUBPHASE (ans, "Annotating namespaces", ANSdoAnnotateNamespace, !global.makedeps)

SUBPHASE (gdp, "Gathering dependencies", GDPdoGatherDependencies, ALWAYS)

SUBPHASE (pdp, "Printing dependencies", DEPdoPrintDependencies, global.makedeps)

SUBPHASE (imp, "Getting imported symbols", IMPdoImportSymbols, ALWAYS)

SUBPHASE (uss, "Getting used symbols", USSdoUseSymbols, ALWAYS)

SUBPHASE (asf, "Loading sac2c prelude functions", ASFdoAddSpecialFunctions, ALWAYS)

ENDPHASE (md)

/******************************************************************************/

PHASE (si, "Simplifying source code", PHDdriveCompilerPhase_si, ALWAYS)

SUBPHASE (w2d, "Transforming while-loops into do-loops", W2DdoTransformWhile2Do, ALWAYS)

SUBPHASE (hce, "Eliminating conditional expressions", HCEdoHandleConditionalExpressions,
          ALWAYS)

SUBPHASE (hm, "Handling multiple operator expressions", HMdoHandleMops, ALWAYS)

SUBPHASE (flt, "Flattening nested expressions", FLATdoFlatten, ALWAYS)

ENDPHASE (si)

/******************************************************************************/

PHASE (pt, "Converting to static single assignment form", PHDdriveCompilerPhase_pt,
       ALWAYS)

SUBPHASE (rst, "Processing user defined types", RSTdoResolveSymbolTypes, ALWAYS)

SUBPHASE (insvd, "Inserting variable declarations", INSVDdoInsertVardec, ALWAYS)

SUBPHASE (instc, "Converting type decls in type conversions", INSTCdoInsertTypeConv,
          ALWAYS)

SUBPHASE (ses, "Stripping external signatures", SESdoStripExternalSignatures, ALWAYS)

SUBPHASE (crtwrp, "Creating wrapper functions", CRTWRPdoCreateWrappers, ALWAYS)

SUBPHASE (oan, "Running global object analysis", OANdoObjectAnalysis, ALWAYS)

SUBPHASE (goi, "Generating object initialiser", GOIdoGenerateObjectInitialiser, ALWAYS)

SUBPHASE (rso, "Resolving global objects", RSOdoResolveObjects, ALWAYS)

SUBPHASE (rra, "Resolving reference arguments", RRAdoResolveReferenceArgs, ALWAYS)

SUBPHASE (ewt, "Extending dispatch information", EWTdoExtendWrapperTypes, ALWAYS)

SUBPHASE (lac2fun, "Eliminating loops and conditionals", L2FdoLac2Fun, ALWAYS)

SUBPHASE (elf, "Extending LaC funs", ELFdoExtendLacFuns, global.elf)

SUBPHASE (ssa, "Establishing static single assignment form", SSATdoTransformAllowGOs,
          ALWAYS)

ENDPHASE (pt)

/******************************************************************************/

PHASE (tc, "Running type inference system", PHDdriveCompilerPhase_tc, ALWAYS)

SUBPHASE (esp, "Enforcing Specializations", ESPdoEnforceSpecialization, ALWAYS)

SUBPHASE (ti, "Running type inference system", NTCdoNewTypeCheck, ALWAYS)

SUBPHASE (eat, "Eliminating Type Variables", EATdoEliminateAlphaTypes, ALWAYS)

SUBPHASE (ebt, "Eliminating BottomTypes", EBTdoEliminateBottomTypes, ALWAYS)

SUBPHASE (swr, "Splitting Wrappers", SWRdoSplitWrappers, ALWAYS)

ENDPHASE (tc)

/******************************************************************************/

PHASE (ex, "Processing exports", PHDdriveCompilerPhase_ex, ALWAYS)

SUBPHASE (exp, "Exporting symbols", EXPdoExport, ALWAYS)

SUBPHASE (ppi, "Restoring bodies of imported inline functions", PPIdoPrepareInline,
          ALWAYS)

ENDPHASE (ex)

/******************************************************************************/

PHASE (uq, "Checking uniqueness property of objects", PHDdriveCompilerPhase_uq, ALWAYS)

SUBPHASE (cua, "Checking uniqueness annotations", CUAdoCheckUniquenessAnnotations, ALWAYS)

SUBPHASE (cu, "Checking uniqueness", CUdoCheckUniqueness, ALWAYS)

ENDPHASE (uq)

/******************************************************************************/

PHASE (ew, "Eliminating User-Defined Types and Creating Wrapper Code",
       PHDdriveCompilerPhase_ew, ALWAYS)

SUBPHASE (cwc, "Creating Wrapper Bodies", CWCdoCreateWrapperCode, ALWAYS)

SUBPHASE (lac2funwc, "Eliminating conditionals in wrapper code", L2FdoLac2Fun, ALWAYS)

SUBPHASE (ssawc, "Establishing static single assignment form in wrapper code",
          SSATdoTransformAllowGOs, ALWAYS)

SUBPHASE (dfc, "Trying to dispatch staticly", DFCdoDispatchFunCalls, ALWAYS)

SUBPHASE (eudt, "Eliminating User-Defined Types", RCdoRemoveCasts, ALWAYS)

ENDPHASE (ew)

/******************************************************************************/

PHASE (we, "Enhancing of with-loops", PHDdriveCompilerPhase_we, ALWAYS)

SUBPHASE (accu, "Introducing explicit accumulators", EAdoExplicitAccumulate, ALWAYS)

SUBPHASE (wldp, "Adding default partitions", WLDPdoWlDefaultPartition, ALWAYS)

SUBPHASE (rtup, "Applying reverse type upgrade", RTUPdoReverseTypeUpgrade,
          global.optimize.dortup)

SUBPHASE (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
          ALWAYS)

ENDPHASE (we)

/******************************************************************************/

PHASE (op, "Running SAC optimizations", PHDdriveCompilerPhase_op, ALWAYS)

SUBPHASE (inl, "Applying function inlining", INLdoInlining, global.optimize.doinl)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr)

SUBPHASE (lir, "Applying loop invariant removal", LIRdoLoopInvariantRemoval,
          global.optimize.dolir)

SUBPHASE (isaa, "Inserting symbolic array attributes", ISAAdoInsertShapeVariables,
          global.optimize.dosaacyc &&global.optimize.dodcr)

/*************************************************/

OPTCYCLE (cyc, "Running optimization cycle", PHDdriveOptCycle_cyc, ALWAYS)

OPTCYCLEFUN ()

OPTINCYCFUN (cse, "Applying common subexpression elimination",
             CSEdoCommonSubexpressionElimination, global.optimize.docse)

OPTINCYCFUN (saa, "Inserting symbolic array attributes",
             ISAAdoInsertShapeVariablesOneFundef,
             global.optimize.dosaacyc &&global.optimize.dodcr)

OPTINCYCFUN (ili, "Infering loop invariant variables", ILIdoInferLoopInvariants, ALWAYS)

OPTINCYCFUN (ntccyc, "Applying type upgrade", NTCdoNewTypeCheckOneFunction,
             global.optimize.dotup)

OPTINCYCFUN (eatcyc, "Eliminating Type Variables", EATdoEliminateAlphaTypesOneFunction,
             global.optimize.dotup)

OPTINCYCFUN (ebtcyc, "Eliminating Bottom Types", EBTdoEliminateBottomTypesOneFunction,
             global.optimize.dotup)

OPTINCYCFUN (rtupcyc, "Applying reverse type upgrade", RTUPdoReverseTypeUpgradeOneFundef,
             global.optimize.dortup)

OPTINCYCFUN (dfccyc, "Applying function call dispatch", DFCdoDispatchFunCallsOneFundef,
             ALWAYS)

OPTINCYCFUN (inlcyc, "Applying inlining", INLdoInlining, global.optimize.doinl)

OPTINCYCFUN (wlprop, "Applying with-loop propagation", WLPROPdoWithloopPropagation,
             global.optimize.dowlprop)

OPTINCYCFUN (cf, "Applying constant folding", CFdoConstantFolding, global.optimize.docf)

OPTINCYCFUN (cvp, "Propagating constants and variables",
             CVPdoConstVarPropagationOneFundef, global.optimize.docvp)

OPTINCYCFUN (wlpgcyc, "Generating full with-loop partitions",
             WLPGdoWlPartitionGenerationOpt, global.optimize.dowlpg)

OPTINCYCFUN (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification,
             global.optimize.dowlsimp)

OPTINCYCFUN (cwle, "Eliminate copy with-loops", CWLEdoTemplateTraversal,
             global.optimize.docwle)

OPTINCYCFUN (wli, "Infering foldable with-loops", WLIdoWLI, global.optimize.dowlf)

OPTINCYCFUN (wlf, "Applying with-loop folding", WLFdoWLF, global.optimize.dowlf)

OPTINCYCFUN (ssawlf, "Restoring SSA form after with-loop folding",
             SSATdoTransformOneFundef, global.optimize.dowlf)

OPTINCYCFUN (swlf, "Applying symbolic with-loop folding", SWLFdoSymbolicWithLoopFolding,
             global.optimize.doswlf)

OPTINCYCFUN (dcrcycfun, "Applying dead code removal", DCRdoDeadCodeRemovalOneFundef,
             global.optimize.dodcr)

OPTINCYCFUN (wls, "Applying with-loop scalarization", WLSdoWithloopScalarization,
             global.optimize.dowls)

OPTINCYCFUN (prfunr, "Applying prf unrolling", UPRFdoUnrollPRFs, global.optimize.doprfunr)

OPTINCYCFUN (lur, "Applying loop unrolling", LURdoLoopUnrolling, global.optimize.dolur)

OPTINCYCFUN (ssalur, "Restoring SSA form after loop unrolling",
             SSATdoTransformOneFunction, global.optimize.dolur)

OPTINCYCFUN (wlur, "Applying withloop unrolling", WLURdoWithloopUnrolling,
             global.optimize.dowlur)

OPTINCYCFUN (ssawlur, "Restoring SSA form after withloop unrolling",
             SSATdoTransformOneFunction, global.optimize.dowlur)

OPTINCYCFUN (linlcyc, "Inlining degenerated LaC functions", LINLdoLACInliningOneFundef,
             global.lacinline)

OPTINCYCFUN (wlir, "Applying with-loop invariant removal",
             LIRdoWithLoopInvariantRemovalOneFundef, global.optimize.dolir)

OPTINCYCFUN (etc, "Eliminating typeconv primitives", ETCdoEliminateTypeConversions,
             global.optimize.doetc)

OPTINCYCFUN (esd, "Eliminating subtraction and division operators", ESDdoElimSubDiv,
             global.optimize.doesd)

OPTINCYCFUN (al, "Applying associative law", ASSOCdoAssociativityOptimizationOneFundef,
             global.optimize.doal)

OPTINCYCFUN (dl, "Applying distributive law",
             DISTRIBdoDistributivityOptimizationOneFundef, global.optimize.dodl)

ENDOPTCYCLEFUN ()

OPTINCYC (dcrcyc, "Applying dead code removal", DCRdoDeadCodeRemovalModule,
          global.optimize.dodcr)

OPTINCYC (sisi, "Simplifying function signatures", SISIdoSignatureSimplification,
          global.optimize.dosisi &&global.optimize.dodcr)

OPTINCYC (lof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS)

ENDOPTCYCLE (cyc)

/*************************************************/

OPTCYCLE (scyc, "Running stabilization cycle", PHDdriveOptCycle_scyc,
          global.run_stabilization_cycle)

OPTCYCLEFUN ()

OPTINCYCFUN (ntcscyc, "Applying type upgrade", NTCdoNewTypeCheckOneFunction,
             global.optimize.dotup)

OPTINCYCFUN (eatscyc, "Eliminating Type Variables", EATdoEliminateAlphaTypesOneFunction,
             global.optimize.dotup)

OPTINCYCFUN (ebtscyc, "Eliminating Bottom Types", EBTdoEliminateBottomTypesOneFunction,
             global.optimize.dotup)

OPTINCYCFUN (dfcscyc, "Applying function call dispatch", DFCdoDispatchFunCallsOneFundef,
             ALWAYS)

ENDOPTCYCLEFUN ()

OPTINCYC (slof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS)

ENDOPTCYCLE (scyc)

/*************************************************/

SUBPHASE (lir2, "Applying loop invariant removal", LIRdoLoopInvariantRemoval,
          global.optimize.dolir)

SUBPHASE (uesd, "Reintroducing subtraction and division operators", UESDdoUndoElimSubDiv,
          global.optimize.doesd)

SUBPHASE (dfr2, "Removing dead functions", DFRdoDeadFunctionRemoval,
          global.optimize.dodfr)

SUBPHASE (dcr2, "Applying dead code removal again", DCRdoDeadCodeRemovalModule,
          global.optimize.dodcr)

SUBPHASE (rtc, "Running final type inference", NTCdoNewReTypeCheck, ALWAYS)

SUBPHASE (fineat, "Final type variable elimination", EATdoEliminateAlphaTypes, ALWAYS)

SUBPHASE (finebt, "Final bottom type elimination", EBTdoEliminateBottomTypes, ALWAYS)

SUBPHASE (wlfs, "Applying with-loop fusion", WLFSdoWithloopFusion, global.optimize.dowlfs)

SUBPHASE (cse2, "Elimininating common subexpressions",
          CSEdoCommonSubexpressionEliminationModule,
          global.optimize.dowlfs &&global.optimize.docse)

SUBPHASE (dcr3, "Removing dead code", DCRdoDeadCodeRemovalModule,
          global.optimize.dowlfs &&global.optimize.dodcr)

/*
 * !!! If they should ever work again, WLAA, TSI, and AP must run here
 */

/*
 * Another MANDATORY run of WLPG. This is necessary to prevent AKSIV
 * with-loops to arrive at wltransform
 */
SUBPHASE (wlpg2, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
          ALWAYS)

SUBPHASE (isaa2, "Inserting symbolic array attributes", ISAAdoInsertShapeVariables,
          global.optimize.dosaa &&global.optimize.dodcr)

/*************************************************/

OPTCYCLE (saacyc, "Running symbolic array attributes cycle", PHDdriveOptCycle_saacyc,
          global.optimize.dosaa &&global.optimize.dodcr)

OPTINCYC (svprfunr, "Applying prf unrolling", UPRFdoUnrollPRFsModule,
          global.optimize.doprfunr)

OPTINCYC (svtup, "Applying type upgrade", NTCdoNewReTypeCheck, global.optimize.dotup)

OPTINCYC (sveat, "Finalising infered type information (Alphas)", EATdoEliminateAlphaTypes,
          global.optimize.dotup)

OPTINCYC (svebt, "Finalising infered type information (Bottoms)",
          EBTdoEliminateBottomTypes, global.optimize.dotup)

OPTINCYC (svcf, "Applying constant folding", CFdoConstantFoldingModule,
          global.optimize.docf)

OPTINCYC (svcse, "Elimininating common subexpressions",
          CSEdoCommonSubexpressionEliminationModule, global.optimize.docse)

OPTINCYC (svcvp, "Propagating constants and variables", CVPdoConstVarPropagation,
          global.optimize.docvp)

OPTINCYC (svwlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplificationModule,
          global.optimize.dowlsimp)

OPTINCYC (svdcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr)

ENDOPTCYCLE (saacyc)

/*************************************************/

SUBPHASE (wrci, "Inferencing with-loop reuse candidates",
          WRCIdoWithloopReuseCandidateInference, global.optimize.douip)

SUBPHASE (wlidx, "Annoting offset variable at with-loops", WLIDXdoAnnotateWithloopIdxs,
          ALWAYS)

SUBPHASE (ivesplit, "Eliminating index vectors (split selections)",
          IVESPLITdoSplitSelections,
          global.optimize.doive &&global.optimize.dosaa &&global.optimize.dodcr)

SUBPHASE (cvpive, "Propagating constants and variables", CVPdoConstVarPropagation,
          global.optimize.doive &&global.optimize.dosaa &&global.optimize.dodcr &&global
            .optimize.docvp)

SUBPHASE (cseive, "Eliminating common subexpression",
          CSEdoCommonSubexpressionEliminationModule,
          global.optimize.doive &&global.optimize.dosaa &&global.optimize.dodcr &&global
            .optimize.docse)

SUBPHASE (iveras, "Eliminating index vectors (reuse WL-offsets and scalarize)",
          IVERASdoWithloopReuseAndOptimisation,
          global.optimize.doive &&global.optimize.dosaa &&global.optimize.dodcr)

SUBPHASE (esv, "Eliminating shape variables", ESVdoEliminateShapeVariables,
          global.optimize.dosaa &&global.optimize.dodcr)

SUBPHASE (lirive, "Applying loop invariant removal", LIRdoLoopInvariantRemoval,
          ((global.optimize.dosaa && global.optimize.dodcr) || global.optimize.doive)
            && global.optimize.dolir)

SUBPHASE (dcrive, "Removing dead code", DCRdoDeadCodeRemovalModule,
          ((global.optimize.dosaa && global.optimize.dodcr) || global.optimize.doive)
            && global.optimize.dodcr)

SUBPHASE (fdi, "Freeing dispatch information", FDIdoFreeDispatchInformation, ALWAYS)

SUBPHASE (pfap, "Profiling function applications", PFdoProfileFunCalls, global.doprofile)

SUBPHASE (stat, "Displaying optimisation statistics", STATdoPrintStatistics,
          global.verbose_level >= 3)

ENDPHASE (op)

/******************************************************************************/

PHASE (wt, "Transforming with-loop representation", PHDdriveCompilerPhase_wt, ALWAYS)

SUBPHASE (wltussa, "Converting from SSA form", USSATdoUndoSsaTransform, ALWAYS)

SUBPHASE (wltfun2lac, "Reintroducing loops and conditionals", F2LdoFun2Lac, ALWAYS)

SUBPHASE (wltlacinl, "Inlining LaC functions", LINLdoLACInlining, ALWAYS)

SUBPHASE (wltra, "Transforming with-loop representation", WLTRAdoWlTransform, ALWAYS)

SUBPHASE (wltlac2fun, "Eliminating loops and conditionals", L2FdoLac2Fun, ALWAYS)

SUBPHASE (wltssa, "Establishing static single assignment form", SSATdoTransform, ALWAYS)

SUBPHASE (wltcvp, "Propagating constants and variables", CVPdoConstVarPropagation,
          global.optimize.docvp)

SUBPHASE (wltdcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr)

ENDPHASE (wt)

/******************************************************************************/

PHASE (mt, "Generating annotations for multithreaded execution", PHDdriveCompilerPhase_mt,
       global.mtmode != MT_none)

#ifndef BEMT

SUBPHASE (spmdinit, "Building SPMD blocks around with-loops", SPMDIdoSpmdInit,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

SUBPHASE (createmtfuns, "Creating MT variants of exported and provided functions",
          CMTFdoCreateMtFuns,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

SUBPHASE (spmdlift, "Lifting SPMD blocks to functions", SPMDLdoSpmdLift,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

SUBPHASE (sched, "Annotating scheduling informations", SCHEDdoScheduleTrav,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

SUBPHASE (rmspmd, "Removing SPMD blocks", RMSPMDdoRemoveSpmdBlocks,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

SUBPHASE (conclac2fun, "Lifting SPMD conditionals", L2FdoLac2Fun,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

SUBPHASE (concssa, "Establishing static single assignment form in SPMD conditionals",
          SSATdoTransform,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

#endif /* BEMT */

#ifndef PRODUCTION

SUBPHASE (tem, "Tagging execution modes", TEMdoTagExecutionmode,
          global.mtmode == MT_mtstblock)

SUBPHASE (crwiw, "Creating with in with", CRWIWdoCreateWithinwith,
          global.mtmode == MT_mtstblock)

SUBPHASE (pem, "Propagating execution modes", PEMdoPropagateExecutionmode,
          global.mtmode == MT_mtstblock)

SUBPHASE (cdfg, "Creating data flow graph", CDFGdoCreateDataflowgraph,
          global.mtmode == MT_mtstblock)

SUBPHASE (asmra, "Rearringing assignments", ASMRAdoAssignmentsRearrange,
          global.mtmode == MT_mtstblock)

SUBPHASE (crece, "Creating execution mode cells", CRECEdoCreateCells,
          global.mtmode == MT_mtstblock)

SUBPHASE (cegro, "Extending execution mode cells", CEGROdoCellGrowth,
          global.mtmode == MT_mtstblock)

SUBPHASE (repfun, "Replicating functions", REPFUNdoReplicateFunctions,
          global.mtmode == MT_mtstblock)

SUBPHASE (mtdfr, "Removing superfluos functions", DFRdoDeadFunctionRemoval,
          global.mtmode == MT_mtstblock)

SUBPHASE (concel, "Consolidating execution mode cells", CONCELdoConsolidateCells,
          global.mtmode == MT_mtstblock)

SUBPHASE (abort, "Aborting MT3 compilation", MTABabort, global.mtmode == MT_mtstblock)

#endif

ENDPHASE (mt)

/******************************************************************************/

PHASE (mm, "Introducing explicit memory management instructions",
       PHDdriveCompilerPhase_mm, ALWAYS)

SUBPHASE (simd, "SIMD inference", SIMDdoInferSIMD, global.simd)

SUBPHASE (asd, "AUD/SCL distinction", ASDdoAudSclDistinction, ALWAYS)

SUBPHASE (copy, "Making copy operations explicit", EMECdoExplicitCopy, ALWAYS)

SUBPHASE (alloc, "Introducing explicit allocation statements ", EMALdoAlloc, ALWAYS)

SUBPHASE (emmdcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr)

SUBPHASE (rci, "Inferring reuse candidates", EMRIdoReuseInference, global.optimize.douip)

SUBPHASE (shal, "Activating display of alias information", SHALactivate, ALWAYS)

SUBPHASE (ia, "Interface aliasing analysis", EMIAdoInterfaceAnalysis,
          global.optimize.dosrf)

SUBPHASE (lro, "Applying loop reuse optimization", EMLRdoLoopReuseOptimization,
          global.optimize.dosrf &&global.optimize.dolro)

SUBPHASE (aa, "Aliasing analysis", EMAAdoAliasAnalysis, global.optimize.dosrf)

SUBPHASE (srce, "Removing non-local reuse-candidates", SRCEdoRemoveReuseCandidates,
          global.optimize.douip)

SUBPHASE (frc, "Removing invalid reuse candidates", FRCdoFilterReuseCandidates,
          global.optimize.douip)

SUBPHASE (sr, "Static reuse", EMSRdoStaticReuse,
          global.optimize.douip &&global.optimize.dosrf)

SUBPHASE (rb, "Introducing reuse branches", EMRBdoReuseBranching,
          global.optimize.doipc || (global.optimize.douip && global.optimize.dodr))

SUBPHASE (ipc, "Identfying in-place updates", EMIPdoInplaceComputation,
          global.optimize.doipc)

SUBPHASE (dr, "Exploiting data reuse", EMDRdoDataReuse,
          global.optimize.douip &&global.optimize.dodr)

SUBPHASE (emmdcr2, "Removing dead code", DCRdoDeadCodeRemovalModule,
          global.optimize.dodcr)

SUBPHASE (unshal, "Deactivating display of alias information", SHALdeactivate, ALWAYS)

SUBPHASE (rc, "Reference counting", RCIdoReferenceCounting, ALWAYS)

SUBPHASE (rcm, "Reference counting minimization", RCMdoRefcountMinimization, ALWAYS)

SUBPHASE (rco, "Optimizing reference counting instructions", EMRCOdoRefCountOpt,
          global.optimize.dorco)

SUBPHASE (mvsmi, "Moving shared memory management instructions out of SPMD functions",
          MVSMIdoMoveSharedMemoryManagementInstructions,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

SUBPHASE (re, "Removing reuse instructions", EMREdoReuseElimination, ALWAYS)

ENDPHASE (mm)

/******************************************************************************/

PHASE (pc, "Preparing C code generation", PHDdriveCompilerPhase_pc, ALWAYS)

SUBPHASE (ussa, "Converting from SSA form", USSATdoUndoSsaTransform, ALWAYS)

SUBPHASE (fun2lac, "Reintroducing loops and conditionals", F2LdoFun2Lac, ALWAYS)

SUBPHASE (lacinl, "Inlining LaC functions", LINLdoLACInlining, ALWAYS)

SUBPHASE (rec, "Removing external code", RECdoRemoveExternalCode, ALWAYS)

SUBPHASE (spmdfunfix, "Fixing SPMD function signatures", FSFSdoFixSpmdFunctionSignatures,
          ALWAYS)

SUBPHASE (rera, "Restoring reference arguments", RERAdoRestoreReferenceArguments, ALWAYS)

SUBPHASE (reso, "Restoring global objects", RESOdoRestoreObjects, ALWAYS)

#ifdef BEMT

SUBPHASE (spmdinit, "Building SPMD blocks around with-loops", SPMDIdoSpmdInit,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

SUBPHASE (createmtfuns, "Creating MT variants of exported and provided functions",
          CMTFdoCreateMtFuns,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

SUBPHASE (spmdlift, "Lifting SPMD blocks to functions", SPMDLdoSpmdLift,
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

#endif /*  BEMT */

SUBPHASE (sls, "Applying linksign pragma", SLSdoSetLinksign, ALWAYS)

SUBPHASE (mmv, "Marking memval identifiers", MMVdoMarkMemVals, ALWAYS)

SUBPHASE (moi, "Manage object initialisers", MOIdoManageObjectInitialisers, ALWAYS)

SUBPHASE (rcs, "Resolving code sharing in With-Loops", RCSdoResolveCodeSharing, ALWAYS)

/*
 * WARNING: no phases that duplicate code below this line!
 *          FPC builds the argtabs which CANNOT be maintained
 *          by duptree!
 */

SUBPHASE (fpc, "Reorganizing function prototypes", FPCdoFunctionPrecompile, ALWAYS)

SUBPHASE (tcp, "Applying type conversions", TCPdoTypeConversions, ALWAYS)

SUBPHASE (mng, "Mark NoOp Grids", MNGdoMarkNoopGrids, ALWAYS)

SUBPHASE (rid, "Consistently renaming identifiers", RIDdoRenameIdentifiers, ALWAYS)

ENDPHASE (pc)

/******************************************************************************/

PHASE (cp, "Generating Code", PHDdriveCompilerPhase_cp, ALWAYS)

SUBPHASE (tot, "Converting to old type representation", TOTdoToOldTypes, ALWAYS)

SUBPHASE (comp, "Creating intermediate code macros", COMPdoCompile, ALWAYS)

SUBPHASE (prt, "Generating C file(s)", PRTdoPrint, ALWAYS)

SUBPHASE (frtr, "De-allocating syntax tree representation", FREEdoFreeTree, ALWAYS)

ENDPHASE (cp)

/******************************************************************************/

PHASE (ic, "Creating binary code", PHDdriveCompilerPhase_ic, ALWAYS)

SUBPHASE (hdep, "Handling dependencies", DEPdoHandleDependencies, ALWAYS)

SUBPHASE (ivcc, "Invoking C compiler", CCMinvokeCC, ALWAYS)

SUBPHASE (crlib, "Creating SAC library", LIBBcreateLibrary, global.filetype != F_prog)

ENDPHASE (ic)

/******************************************************************************/

#undef PHASE

#undef PHASEelement
#undef PHASEtext
#undef PHASEfun
#undef PHASEcond

#undef SUBPHASE

#undef SUBPHASEelement
#undef SUBPHASEtext
#undef SUBPHASEfun
#undef SUBPHASEcond

#undef OPTCYCLE

#undef OPTCYCLEelement
#undef OPTCYCLEtext
#undef OPTCYCLEfun
#undef OPTCYCLEcond

#undef OPTCYCLEFUN
#undef ENDOPTCYCLEFUN

#undef OPTINCYC

#undef OPTINCYCelement
#undef OPTINCYCtext
#undef OPTINCYCfun
#undef OPTINCYCcond

#undef OPTINCYCFUN

#undef OPTINCYCFUNelement
#undef OPTINCYCFUNtext
#undef OPTINCYCFUNfun
#undef OPTINCYCFUNcond

#undef ENDPHASE
#undef ENDOPTCYCLE
