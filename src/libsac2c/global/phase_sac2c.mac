/*
 * $Id$
 */

#include "phase_initialise_defs.mac"

/******************************************************************************/
PHASE (scp, "Loading SAC program", ALWAYS)

SUBPHASE (loc, "Locating source code", SPdoLocateSource, ALWAYS, scp)

SUBPHASE (cpp, "Running C preprocessor", SPdoRunPreProcessor, ALWAYS, scp)

SUBPHASE (prs, "Parsing input file", SPdoScanParse, ALWAYS, scp)

ENDPHASE (scp)

/******************************************************************************/

PHASE (pre, "Preprocessing SAC program", ALWAYS)

SUBPHASE (hs, "Hiding struct definitions behind typedefs and accessors", HSdoHideStructs,
          ALWAYS, pre)

SUBPHASE (iotc, "Introducing user-tracing calls", IUTCdoIntroduceUserTraceCalls,
          global.dousertrace, pre)

SUBPHASE (zgwl, "Handling zero-generator with-loops", HZGWLdoHandleZeroGeneratorWithLoops,
          ALWAYS, pre)

SUBPHASE (mgwl, "Handling multi-generator with-loops", HWLGdoHandleWithLoops, ALWAYS, pre)

SUBPHASE (mowl, "Handling multi-operator with-loops", HWLOdoHandleWithLoops, ALWAYS, pre)

SUBPHASE (acn, "Resolving axis control and dot notation", HDdoEliminateSelDots, ALWAYS,
          pre)

SUBPHASE (rpr, "Resolving pragma annotations", RSPdoResolvePragmas, ALWAYS, pre)

SUBPHASE (obi, "Generating object initializers", OIdoObjectInit, ALWAYS, pre)

SUBPHASE (csgd, "Checking and simplifying generic definitions",
          CSGDdoCheckAndSimplifyGenericDefinitions, ALWAYS, pre)

ENDPHASE (pre)

/******************************************************************************/

PHASE (mod, "Running module system", ALWAYS)

SUBPHASE (rsa, "Processing use and import statements", RSAdoResolveAll, !global.makedeps,
          mod)

SUBPHASE (ans, "Annotating namespaces", ANSdoAnnotateNamespace, !global.makedeps, mod)

SUBPHASE (gdp, "Gathering dependencies", GDPdoGatherDependencies, ALWAYS, mod)

SUBPHASE (pdp, "Printing dependencies", DEPdoPrintDependencies, global.makedeps, mod)

SUBPHASE (imp, "Retrieving imported symbols", IMPdoImportSymbols, ALWAYS, mod)

SUBPHASE (uss, "Retrieving used symbols", USSdoUseSymbols, ALWAYS, mod)

SUBPHASE (asf, "Loading prelude functions", ASFdoAddSpecialFunctions, ALWAYS, mod)

ENDPHASE (mod)

/******************************************************************************/

PHASE (sim, "Simplifying source code", ALWAYS)

SUBPHASE (w2d, "Transforming while-loops into do-loops", W2DdoTransformWhile2Do, ALWAYS,
          sim)

SUBPHASE (ece, "Eliminating conditional expressions", HCEdoHandleConditionalExpressions,
          ALWAYS, sim)

SUBPHASE (moe, "Handling multiple operator expressions", HMdoHandleMops, ALWAYS, sim)

SUBPHASE (flt, "Flattening nested expressions", FLATdoFlatten, ALWAYS, sim)

SUBPHASE (udt, "Processing user defined types", RSTdoResolveSymbolTypes, ALWAYS, sim)

SUBPHASE (ggtc, "Generating generic type conversion functions",
          GGTCdoGenerateGenericTypeConversions, ALWAYS, sim)

ENDPHASE (sim)

/******************************************************************************/

PHASE (ptc, "Converting to static single assignment form", ALWAYS)

SUBPHASE (ivd, "Inserting variable declarations", INSVDdoInsertVardec, ALWAYS, ptc)

SUBPHASE (itc, "Converting type decls into type conversions", INSTCdoInsertTypeConv,
          ALWAYS, ptc)

SUBPHASE (cwf, "Creating wrapper functions", CRTWRPdoCreateWrappers, ALWAYS, ptc)

SUBPHASE (gon, "Running global object analysis", OANdoObjectAnalysis, ALWAYS, ptc)

SUBPHASE (goi, "Generating global object initialiser", GOIdoGenerateObjectInitialiser,
          ALWAYS, ptc)

SUBPHASE (rso, "Resolving global objects", RSOdoResolveObjects, ALWAYS, ptc)

SUBPHASE (rrp, "Resolving reference parameters", RRAdoResolveReferenceArgs, ALWAYS, ptc)

SUBPHASE (ewt, "Extending dispatch information", EWTdoExtendWrapperTypes, ALWAYS, ptc)

SUBPHASE (l2f, "Eliminating loops and conditionals", L2FdoLac2Fun, ALWAYS, ptc)

SUBPHASE (elf, "Extending LaC funs", ELFdoExtendLacFuns, global.elf, ptc)

SUBPHASE (ssa, "Establishing static single assignment form", SSATdoTransform, ALWAYS, ptc)

ENDPHASE (ptc)

/******************************************************************************/

PHASE (tc, "Running type inference system", ALWAYS)

SUBPHASE (esp, "Enforcing Specializations", ESPdoEnforceSpecialization, ALWAYS, tc)

SUBPHASE (sossk, "Specialization Oracle for Static Shape Knowledge",
          SOSSKdoSpecializationOracleSSK, global.dotogstuff, tc)

SUBPHASE (ti, "Running type inference system", NTCdoNewTypeCheck, ALWAYS, tc)

SUBPHASE (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes, ALWAYS, tc)

SUBPHASE (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes, ALWAYS, tc)

SUBPHASE (swr, "Splitting Wrappers", SWRdoSplitWrappers, ALWAYS, tc)

ENDPHASE (tc)

/******************************************************************************/

PHASE (exp, "Processing exports", ALWAYS)

SUBPHASE (exp, "Exporting symbols", EXPdoExport, ALWAYS, exp)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr,
          exp)

SUBPHASE (ser, "Serializing syntax tree", SERdoSerialize,
          ((global.filetype == F_modimp) || (global.filetype == F_classimp)), exp)

SUBPHASE (rgd, "Removing generic function definitions", RGDdoRemoveGenericDefinitions,
          ALWAYS, exp)

SUBPHASE (iif, "Restoring bodies of imported inline functions", PPIdoPrepareInline,
          ALWAYS, exp)

ENDPHASE (exp)

/******************************************************************************/

PHASE (unq, "Checking uniqueness property of objects", ALWAYS)

SUBPHASE (cua, "Checking uniqueness annotations", CUAdoCheckUniquenessAnnotations, ALWAYS,
          unq)

SUBPHASE (cuq, "Checking uniqueness", CUdoCheckUniqueness, ALWAYS, unq)

ENDPHASE (unq)

/******************************************************************************/

PHASE (cwc, "Creating Wrapper Code and Eliminating User-Defined Types", ALWAYS)

#ifdef CG_STRUCT_TRY

SUBPHASE (dfc, "Trying to dispatch functions statically", DFCdoDispatchFunCalls, ALWAYS,
          cwc)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr,
          cwc)

SUBPHASE (des, "Removing all structs", DESdoDeStruct, ALWAYS, cwc)

SUBPHASE (ewt, "Extending dispatch information", EWTdoExtendWrapperTypes, ALWAYS, cwc)

SUBPHASE (cwb, "Creating Wrapper Bodies", CWCdoCreateWrapperCode, ALWAYS, cwc)

SUBPHASE (l2f, "Eliminating conditionals in wrapper code", L2FdoLac2Fun, ALWAYS, cwc)

SUBPHASE (ssa, "Establishing static single assignment form in wrapper code",
          SSATdoTransformAllowGOs, ALWAYS cwc)

#else /*  CG_STRUCT_TRY */

SUBPHASE (cwb, "Creating Wrapper Bodies", CWCdoCreateWrapperCode, ALWAYS, cwc)

SUBPHASE (l2f, "Eliminating conditionals in wrapper code", L2FdoLac2Fun, ALWAYS, cwc)

SUBPHASE (ssa, "Establishing static single assignment form in wrapper code",
          SSATdoTransform, ALWAYS, cwc)

SUBPHASE (dfc, "Trying to dispatch functions statically", DFCdoDispatchFunCalls, ALWAYS,
          cwc)

SUBPHASE (des, "Removing all structs", DESdoDeStruct, ALWAYS, cwc)

#endif /*  CG_STRUCT_TRY */

SUBPHASE (eudt, "Eliminating User-Defined Types", RCdoRemoveCasts, ALWAYS, cwc)

SUBPHASE (icc, "Inserting Conformity Checks", ICCdoInsertConformityChecks,
          global.insertconformitychecks, cwc)

SUBPHASE (ti, "Running type inference system", NTCdoNewReTypeCheckFromScratch, ALWAYS,
          cwc)

SUBPHASE (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypes, ALWAYS, cwc)

SUBPHASE (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypes, ALWAYS, cwc)

ENDPHASE (cwc)

/******************************************************************************/

PHASE (ewl, "Enhancing with-loops", ALWAYS)

SUBPHASE (accu, "Introducing explicit accumulators", EAdoExplicitAccumulate, ALWAYS, ewl)

SUBPHASE (adp, "Adding default partitions", WLDPdoWlDefaultPartition, ALWAYS, ewl)

SUBPHASE (cf, "Applying constant folding", CFdoConstantFolding, global.optimize.docf, ewl)

SUBPHASE (cse, "Applying common subexpression elimination",
          CSEdoCommonSubexpressionEliminationModule, global.optimize.docse, ewl)

SUBPHASE (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
          ALWAYS, ewl)

SUBPHASE (wlbsc, "Ensuring structual constants for with-loop partition bounds",
          WLBSCdoWlbounds2structConsts, ALWAYS, ewl)

ENDPHASE (ewl)

/******************************************************************************/

PHASE (opt, "Running SAC optimizations", ALWAYS)

SUBPHASE (dfr, "Removing dead functions", DFRdoDeadFunctionRemoval, global.optimize.dodfr,
          opt)

SUBPHASE (inl, "Applying function inlining", INLdoInlining, global.optimize.doinl, opt)

SUBPHASE (dfr2, "Removing dead functions", DFRdoDeadFunctionRemoval,
          global.optimize.dodfr, opt)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr,
          opt)

SUBPHASE (lir, "Applying do-loop/with-loop invariant removal", LIRdoLoopInvariantRemoval,
          FALSE, // global.optimize.dolir,
          opt)

SUBPHASE (glf, "Grouping local functions", GLFdoGroupLocalFuns, ALWAYS, opt)

CYCLE (cyc, "Optimization cycle", global.optimize.docyc, opt, RESET)

FUNBEGIN (cyc, opt, cyc)

CYCLEPHASEFUN (cse, "Applying common subexpression elimination",
               CSEdoCommonSubexpressionElimination, global.optimize.docse, opt, cyc)

CYCLEPHASEFUN (ili, "Inferring loop invariant variables",
               IIPIdoIterationInvariantParameterInference, ALWAYS, opt, cyc)

CYCLEPHASEFUN (tup, "Applying type upgrade", NTCdoNewTypeCheckOneFunction,
               global.optimize.dotup, opt, cyc)

CYCLEPHASEFUN (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypesOneFunction,
               global.optimize.dotup, opt, cyc)

CYCLEPHASEFUN (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypesOneFunction,
               global.optimize.dotup, opt, cyc)

CYCLEPHASEFUN (dfc, "Applying function call dispatch", DFCdoDispatchFunCallsOneFundef,
               ALWAYS, opt, cyc)

CYCLEPHASEFUN (inl, "Applying inlining", INLdoInlining, global.optimize.doinl, opt, cyc)

CYCLEPHASEFUN (wlpr, "Applying with-loop propagation", WLPROPdoWithloopPropagation,
               global.optimize.dowlprop, opt, cyc)

CYCLEPHASEFUN (cf, "Applying constant folding", CFdoConstantFoldingOneFundef,
               global.optimize.docf, opt, cyc)

CYCLEPHASEFUN (linl, "Inlining degenerated LaC functions", LINLdoLACInliningOneFundef,
               global.lacinline, opt, cyc)

CYCLEPHASEFUN (vp, "Propagating variables", VPdoVarPropagationOneFundef,
               global.optimize.dovp, opt, cyc)

CYCLEPHASEFUN (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
               global.optimize.dowlpg, opt, cyc)

CYCLEPHASEFUN (wlbsc, "Ensuring structual constants for with-loop partition bounds",
               WLBSCdoWlbounds2structConsts, global.optimize.dowlpg, opt, cyc)

CYCLEPHASEFUN (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification,
               global.optimize.dowlsimp, opt, cyc)

CYCLEPHASEFUN (cwle, "Eliminate copy with-loops", CWLEdoTemplateTraversal,
               global.optimize.docwle, opt, cyc)

CYCLEPHASEFUN (wli, "Inferring foldable with-loops", WLIdoWLI, global.optimize.dowlf, opt,
               cyc)

CYCLEPHASEFUN (wlf, "Applying with-loop folding", WLFdoWLF, global.optimize.dowlf, opt,
               cyc)

CYCLEPHASEFUN (wlfssa, "Restoring SSA form after with-loop folding",
               SSATdoTransformOneFunction, global.optimize.dowlf, opt, cyc)

CYCLEPHASEFUN (shwlc, "Activating display of WL-Cost information", SHWLCactivate,
               global.optimize.doawlf, opt, cyc)

CYCLEPHASEFUN (unshwlc, "Deactivating display of WL-Cost information", SHWLCdeactivate,
               global.optimize.doawlf, opt, cyc)

CYCLEPHASEFUN (dcr, "Applying dead code removal", DCRdoDeadCodeRemovalOneFunction,
               global.optimize.dodcr, opt, cyc)

CYCLEPHASEFUN (linl2, "Inlining degenerated LaC functions", LINLdoLACInliningOneFundef,
               global.lacinline, opt, cyc)

CYCLEPHASEFUN (lir, "Applying do-loop/with-loop invariant removal",
               LIRdoLoopInvariantRemovalOneFundef, global.optimize.dolir, opt, cyc)

CYCLEPHASEFUN (wls, "Applying with-loop scalarization", WLSdoWithloopScalarization,
               global.optimize.dowls, opt, cyc)

CYCLEPHASEFUN (prfunr, "Applying prf unrolling", UPRFdoUnrollPRFs,
               global.optimize.doprfunr, opt, cyc)

CYCLEPHASEFUN (lur, "Applying loop unrolling", LURdoLoopUnrolling, global.optimize.dolur,
               opt, cyc)

CYCLEPHASEFUN (lurssa, "Restoring SSA form after loop unrolling",
               SSATdoTransformOneFunction, global.optimize.dolur, opt, cyc)

CYCLEPHASEFUN (wlur, "Applying withloop unrolling", WLURdoWithloopUnrolling,
               global.optimize.dowlur, opt, cyc)

CYCLEPHASEFUN (wlurssa, "Restoring SSA form after withloop unrolling",
               SSATdoTransformOneFunction, global.optimize.dowlur, opt, cyc)

CYCLEPHASEFUN (etc, "Eliminating typeconv primitives", ETCdoEliminateTypeConversions,
               global.optimize.doetc, opt, cyc)

CYCLEPHASEFUN (esd, "Eliminating subtraction and division operators", ESDdoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, cyc)

CYCLEPHASEFUN (esdcf, "Applying constant folding (esd case)",
               CFdoConstantFoldingOneFundef,
               (global.optimize.docf && (global.optimize.doal || global.optimize.dodl)),
               opt, cyc)

CYCLEPHASEFUN (esdcse, "Applying common subexpression elimination (esd case)",
               CSEdoCommonSubexpressionElimination,
               (global.optimize.docse && (global.optimize.doal || global.optimize.dodl)),
               opt, cyc)

CYCLEPHASEFUN (al, "Applying associative law", ALdoAssocLawOptimizationOneFundef,
               global.optimize.doal, opt, cyc)

CYCLEPHASEFUN (dl, "Applying distributive law", DLdoDistribLawOptimizationOneFundef,
               global.optimize.dodl, opt, cyc)

CYCLEPHASEFUN (uesd, "Reintroducing subtraction and division operators",
               UESDdoUndoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, cyc)

CYCLEPHASEFUN (dcr2, "Applying dead code removal", DCRdoDeadCodeRemovalOneFunction,
               global.optimize.dodcr, opt, cyc)

CYCLEPHASEFUN (linl3, "Inlining degenerated LaC functions", LINLdoLACInliningOneFundef,
               global.lacinline, opt, cyc)

FUNEND (cyc)

CYCLEPHASE (sisi, "Simplifying function signatures", SISIdoSignatureSimplification,
            global.optimize.dosisi &&global.optimize.dodcr, opt, cyc)

CYCLEPHASE (lof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS, opt, cyc)

ENDCYCLE (cyc)

/*************************************************/

CYCLE (scyc, "Type stabilization cycle",
       global.run_stabilization_cycle &&global.optimize.doscyc, opt, !RESET)

FUNBEGIN (scyc, opt, scyc)

CYCLEPHASEFUN (tup, "Applying type upgrade", NTCdoNewTypeCheckOneFunction,
               global.optimize.dotup, opt, scyc)

CYCLEPHASEFUN (etv, "Eliminating Type Variables", EATdoEliminateAlphaTypesOneFunction,
               global.optimize.dotup, opt, scyc)

CYCLEPHASEFUN (ebt, "Eliminating Bottom Types", EBTdoEliminateBottomTypesOneFunction,
               global.optimize.dotup, opt, scyc)

CYCLEPHASEFUN (dfc, "Applying function call dispatch", DFCdoDispatchFunCallsOneFundef,
               ALWAYS, opt, scyc)

FUNEND (scyc)

CYCLEPHASE (lof, "Lifting optimization flags", LOFdoLiftOptFlags, ALWAYS, opt, scyc)

ENDCYCLE (scyc)

/*************************************************/

SUBPHASE (ls, "Applying Loop Scalarization", LSdoLoopScalarization, global.optimize.dols,
          opt)

SUBPHASE (lir2, "Applying do-loop/with-loop invariant removal", LIRdoLoopInvariantRemoval,
          global.optimize.dolir, opt)

SUBPHASE (dfr3, "Removing dead functions", DFRdoDeadFunctionRemoval,
          global.optimize.dodfr, opt)

SUBPHASE (isaa2, "Inserting symbolic array attributes", ISAAdoInsertShapeVariables,
          global.optimize.dosaa, opt)

SUBPHASE (flt, "Flattening with-loop generators", FLATGdoFlatten,
          global.optimize.doawlf || global.doivext, opt)

SUBPHASE (ivexi, "Inserting index vector extrema", IVEXIdoInsertIndexVectorExtrema,
          global.doivext, opt)

/* See comments in arrayopt/ivextrema.c regarding phase
 * ordering for ivext, dcr2, ivexp, awlfi, awlf, dcr4, scc.
 *  DCR must follow ivexi almost immediately.
 */

SUBPHASE (dcr2, "Applying dead code removal again", DCRdoDeadCodeRemovalModule,
          global.optimize.dodcr, opt)

/*************************************************/

CYCLE (saacyc, "Symbolic array attribute cycle 2", global.optimize.dosaacyc, opt, RESET)

FUNBEGIN (saacyc, opt, saacyc)

CYCLEPHASEFUN (cse, "Eliminating common subexpressions",
               CSEdoCommonSubexpressionElimination, global.optimize.docse, opt, saacyc)

CYCLEPHASEFUN (ili, "Inferring loop invariant variables",
               IIPIdoIterationInvariantParameterInference, ALWAYS, opt, saacyc)

CYCLEPHASEFUN (tup, "Applying type upgrade", NTCdoNewTypeCheckOneFunction,
               global.optimize.dotup, opt, saacyc)

CYCLEPHASEFUN (etv, "Eliminating type variables", EATdoEliminateAlphaTypesOneFunction,
               global.optimize.dotup, opt, saacyc)

CYCLEPHASEFUN (ebt, "Eliminating bottom types", EBTdoEliminateBottomTypesOneFunction,
               global.optimize.dotup, opt, saacyc)

CYCLEPHASEFUN (dfc, "Applying function call dispatch", DFCdoDispatchFunCallsOneFundef,
               ALWAYS, opt, saacyc)

CYCLEPHASEFUN (inl, "Applying inlining", INLdoInlining, global.optimize.doinl, opt,
               saacyc)

CYCLEPHASEFUN (wlpr, "Applying with-loop propagation", WLPROPdoWithloopPropagation,
               global.optimize.dowlprop, opt, saacyc)

CYCLEPHASEFUN (cf, "Applying constant folding", CFdoConstantFoldingOneFundef,
               global.optimize.docf, opt, saacyc)

CYCLEPHASEFUN (linl, "Inlining degenerated LaC functions", LINLdoLACInliningOneFundef,
               global.lacinline, opt, saacyc)

CYCLEPHASEFUN (vp, "Propagating variables", VPdoVarPropagationOneFundef,
               global.optimize.dovp, opt, saacyc)

CYCLEPHASEFUN (wlpg, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
               global.optimize.dowlpg, opt, saacyc)

CYCLEPHASEFUN (wlbsc, "Ensuring structual constants for with-loop partition bounds",
               WLBSCdoWlbounds2structConsts, global.optimize.dowlpg, opt, saacyc)

CYCLEPHASEFUN (wlsimp, "Simplifying with-loops", WLSIMPdoWithloopSimplification,
               global.optimize.dowlsimp, opt, saacyc)

CYCLEPHASEFUN (cwle, "Eliminate copy with-loops", CWLEdoTemplateTraversal,
               global.optimize.docwle, opt, saacyc)

CYCLEPHASEFUN (ivexp, "Propagating index vector extrema",
               IVEXPdoIndexVectorExtremaPropOneFunction, global.optimize.doawlf, opt,
               saacyc)

CYCLEPHASEFUN (awlfi, "Inferring algebraically foldable with-loops",
               AWLFIdoAlgebraicWithLoopFoldingOneFunction, global.optimize.doawlf, opt,
               saacyc)

CYCLEPHASEFUN (awlf, "Applying algebraic with-loop folding",
               AWLFdoAlgebraicWithLoopFoldingOneFunction, global.optimize.doawlf, opt,
               saacyc)

CYCLEPHASEFUN (dcr, "Removing dead code", DCRdoDeadCodeRemovalOneFunction,
               global.optimize.dodcr, opt, saacyc)

CYCLEPHASEFUN (linl2, "Inlining degenerated LaC functions", LINLdoLACInliningOneFundef,
               global.lacinline, opt, saacyc)

CYCLEPHASEFUN (lir, "Applying do-loop/with-loop invariant removal",
               LIRdoLoopInvariantRemovalOneFundef, global.optimize.dolir, opt, saacyc)

CYCLEPHASEFUN (wls, "Applying with-loop scalarization", WLSdoWithloopScalarization,
               global.optimize.dowls, opt, saacyc)

CYCLEPHASEFUN (prfunr, "Applying prf unrolling", UPRFdoUnrollPRFs,
               global.optimize.doprfunr, opt, saacyc)

CYCLEPHASEFUN (lur, "Applying loop unrolling", LURdoLoopUnrolling, global.optimize.dolur,
               opt, saacyc)

CYCLEPHASEFUN (lurssa, "Restoring SSA form after loop unrolling",
               SSATdoTransformOneFunction, global.optimize.dolur, opt, saacyc)

CYCLEPHASEFUN (wlur, "Applying withloop unrolling", WLURdoWithloopUnrolling,
               global.optimize.dowlur, opt, saacyc)

CYCLEPHASEFUN (wlurssa, "Restoring SSA form after withloop unrolling",
               SSATdoTransformOneFunction, global.optimize.dowlur, opt, saacyc)

CYCLEPHASEFUN (etc, "Eliminating typeconv primitives", ETCdoEliminateTypeConversions,
               global.optimize.doetc, opt, saacyc)

CYCLEPHASEFUN (esd, "Eliminating subtraction and division operators", ESDdoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, saacyc)

CYCLEPHASEFUN (esdcf, "Applying constant folding (esd case)",
               CFdoConstantFoldingOneFundef,
               (global.optimize.docf && (global.optimize.doal || global.optimize.dodl)),
               opt, saacyc)

CYCLEPHASEFUN (esdcse, "Applying common subexpression elimination (esd case)",
               CSEdoCommonSubexpressionElimination,
               (global.optimize.docse && (global.optimize.doal || global.optimize.dodl)),
               opt, saacyc)

CYCLEPHASEFUN (al, "Applying associative law", ALdoAssocLawOptimizationOneFundef,
               global.optimize.doal, opt, saacyc)

CYCLEPHASEFUN (dl, "Applying distributive law", DLdoDistribLawOptimizationOneFundef,
               global.optimize.dodl, opt, saacyc)

CYCLEPHASEFUN (uesd, "Reintroducing subtraction and division operators",
               UESDdoUndoElimSubDiv,
               global.optimize.dosde && (global.optimize.doal || global.optimize.dodl),
               opt, saacyc)

CYCLEPHASEFUN (dcr2, "Removing dead code", DCRdoDeadCodeRemovalOneFunction,
               global.optimize.dodcr, opt, saacyc)

CYCLEPHASEFUN (linl3, "Inlining degenerated LaC functions", LINLdoLACInliningOneFundef,
               global.lacinline, opt, saacyc)

CYCLEPHASEFUN (sisi, "Simplifying function signatures",
               SISIdoSignatureSimplificationOneFundef,
               global.optimize.dosisi &&global.optimize.dodcr, opt, saacyc)

CYCLEPHASEFUN (lof, "Lifting optimization flags", LOFdoLiftOptFlagsOneFundef, ALWAYS, opt,
               saacyc)

FUNEND (saacyc)

ENDCYCLE (saacyc)

/*************************************************/

SUBPHASE (uglf, "Ungrouping local functions", UGLFdoUngroupLocalFuns, ALWAYS, opt)

SUBPHASE (tup, "Running final type inference", NTCdoNewReTypeCheck, ALWAYS, opt)

SUBPHASE (etv, "Eliminating type variables", EATdoEliminateAlphaTypes, ALWAYS, opt)

SUBPHASE (ebt, "Eliminating bottom types", EBTdoEliminateBottomTypes, ALWAYS, opt)

SUBPHASE (wlfs, "Applying with-loop fusion", WLFSdoWithloopFusion, global.optimize.dowlfs,
          opt)

SUBPHASE (wlfscse, "Eliminating common subexpressions after fusion",
          CSEdoCommonSubexpressionEliminationModule,
          global.optimize.dowlfs &&global.optimize.docse, opt)

SUBPHASE (wlfsdcr, "Removing dead code after fusion", DCRdoDeadCodeRemovalModule,
          global.optimize.dowlfs &&global.optimize.dodcr, opt)

/*
 * !!! If they should ever work again, WLAA, TSI, and AP must run here
 */

SUBPHASE (wlpg2, "Generating full with-loop partitions", WLPGdoWlPartitionGeneration,
          ALWAYS,
          /*
           * Another MANDATORY run of WLPG. This is necessary to prevent AKSIV
           * with-loops to arrive at wltransform
           */
          opt)

SUBPHASE (wlbsc2, "Ensuring structual constants for with-loop partition bounds",
          WLBSCdoWlbounds2structConsts, ALWAYS, opt)

SUBPHASE (wrci, "Inferencing with-loop reuse candidates",
          WRCIdoWithloopReuseCandidateInference, global.optimize.douip, opt)

SUBPHASE (wlidx, "Annoting offset variable at with-loops", WLIDXdoAnnotateWithloopIdxs,
          ALWAYS, opt)

SUBPHASE (ivexc, "Cleaning up index vector extrema", IVEXCdoIndexVectorExtremaCleanup,
          global.optimize.doawlf, opt)

SUBPHASE (scc, "Stripping conformity checks and dataflow guards",
          SCCdoStripConformityChecks,
          global.doivext || global.optimize.doawlf || global.insertconformitychecks, opt)

SUBPHASE (ivesplit, "Eliminating index vectors (split selections)",
          IVESPLITdoSplitSelections, global.optimize.doive, opt)

SUBPHASE (ivevp, "Propagating variables (for IVE)", VPdoVarPropagation,
          global.optimize.doive &&global.optimize.dovp, opt)

SUBPHASE (iveras, "Eliminating index vectors (reuse WL-offsets and scalarize)",
          IVERASdoWithloopReuseAndOptimisation, global.optimize.doive, opt)

SUBPHASE (wlflt, "Trying to flatten multi-dimensional withloops",
          WLFLTdoWithloopFlattening, global.optimize.dowlflt, opt)

SUBPHASE (esaa2, "Eliminating symbolic array attributes", ESVdoEliminateShapeVariables,
          global.optimize.dosaa, opt)

SUBPHASE (lir3, "Applying do-loop/with-loop invariant removal", LIRdoLoopInvariantRemoval,
          (global.optimize.dosaa || global.optimize.doive) && global.optimize.dolir, opt)

SUBPHASE (ussai, "Undo SSAIV Transform", USSAIdoUndoSSAivTransform, global.ssaiv, opt)

SUBPHASE (cse2, "Eliminating common subexpression",
          CSEdoCommonSubexpressionEliminationModule, global.optimize.docse, opt)

SUBPHASE (dcr3, "Removing dead code", DCRdoDeadCodeRemovalModule,
          (global.optimize.dosaa || global.optimize.doive
           || !global.runtimecheck.conformity)
            && global.optimize.dodcr,
          opt)

SUBPHASE (fprc, "Filtering partial reuse candidates", FPRCdoFilterPartialReuseCandidates,
          (global.optimize.douip && global.optimize.dopr), opt)

SUBPHASE (wllom, "Withloop lock optimization marking", WLLOMdoLockOptimizationMarking,
          global.optimize.dowllo, opt)

SUBPHASE (wllos, "Withloop lock optimization shifting", WLLOSdoLockOptimizationShifting,
          global.optimize.dowllo, opt)

SUBPHASE (fdi, "Freeing dispatch information", FDIdoFreeDispatchInformation, ALWAYS, opt)

SUBPHASE (pfap, "Profiling function applications", PFdoProfileFunCalls, global.doprofile,
          opt)

SUBPHASE (stat, "Displaying optimisation statistics", STATdoPrintStatistics,
          global.verbose_level >= 3, opt)

ENDPHASE (opt)

/******************************************************************************/

PHASE (cuda, "Automatic parallelisation for GPUs", global.backend == BE_cuda)

SUBPHASE (acuwl, "CUDA Annotate CUDA withloops", ACUWLdoAnnotateCUDAWL,
          global.backend == BE_cuda, cuda)

/*
SUBPHASE( scuwl,
          "Split cudarizable withloop",
          SCUWLdoSplitCudaWithloops,
          global.backend == BE_cuda,
          cuda)
*/

SUBPHASE (imem, "CUDA Insert CUDA memory transfer primitives",
          IMEMdoInsertMemoryTransfers, global.backend == BE_cuda, cuda)

SUBPHASE (vp, "Propagating variables", VPdoVarPropagation, global.backend == BE_cuda,
          cuda)

SUBPHASE (cp, "Propagating constants", CPdoConstantPropagation, global.backend == BE_cuda,
          cuda)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemovalModule,
          global.backend == BE_cuda, cuda)

SUBPHASE (sptn, "CUDA Split partitions", SPTNdoSplitPartitions, global.backend == BE_cuda,
          cuda)

SUBPHASE (acuptn, "CUDA Annotate CUDA partitions", ACUPTNdoAnnotateCUDAPartition,
          global.backend == BE_cuda, cuda)

SUBPHASE (mtran, "CUDA Minimise the number of device-host data transfers",
          MTRANdoMinimizeTransfers, global.backend == BE_cuda, cuda)

/*
SUBPHASE( wlds,
          "Unscalarize cudarizbale withloops",
          WLDSdoWithloopDescalarization,
          global.backend == BE_cuda,
          cuda)
*/

ENDPHASE (cuda)

/******************************************************************************/

PHASE (wlt, "Transforming with-loop representation", ALWAYS)

SUBPHASE (wlbsc, "Ensuring structual constants for with-loop partition bounds",
          WLBSCdoWlbounds2structConsts, ALWAYS, wlt)

SUBPHASE (wltr, "Transforming with-loop representation", WLTRAdoWlTransform, ALWAYS, wlt)

SUBPHASE (wlsd, "MUTC Splitting withloops by dimensions", WLSDdoWithLoopSplitDimensions,
          global.backend == BE_mutc, wlt)

SUBPHASE (rw3, "MUTC Remove unneeded With3s", RW3doRemoveWith3,
          global.backend == BE_mutc && global.optimize.dorw3, wlt)

SUBPHASE (ass, "MUTC Add syncs", ASdoAddSyncs, global.backend == BE_mutc, wlt)

SUBPHASE (vp, "Propagating variables", VPdoVarPropagation, global.optimize.dovp, wlt)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr,
          wlt)

ENDPHASE (wlt)

/******************************************************************************/

#ifndef PRODUCTION

PHASE (mt3, "Running 3rd generation multithreading", NEVER)

SUBPHASE (tem, "Tagging execution modes", TEMdoTagExecutionmode, ALWAYS, mt3)

SUBPHASE (crwiw, "Creating with in with", CRWIWdoCreateWithinwith, ALWAYS, mt3)

SUBPHASE (pem, "Propagating execution modes", PEMdoPropagateExecutionmode, ALWAYS, mt3)

SUBPHASE (cdfg, "Creating data flow graph", CDFGdoCreateDataflowgraph, ALWAYS, mt3)

SUBPHASE (asmra, "Rearringing assignments", ASMRAdoAssignmentsRearrange, ALWAYS, mt3)

SUBPHASE (crece, "Creating execution mode cells", CRECEdoCreateCells, ALWAYS, mt3)

SUBPHASE (cegro, "Extending execution mode cells", CEGROdoCellGrowth, ALWAYS, mt3)

SUBPHASE (repfun, "Replicating functions", REPFUNdoReplicateFunctions, ALWAYS, mt3)

SUBPHASE (mtdfr, "Removing superfluous functions", DFRdoDeadFunctionRemoval, ALWAYS, mt3)

SUBPHASE (concel, "Consolidating execution mode cells", CONCELdoConsolidateCells, ALWAYS,
          mt3)

SUBPHASE (abort, "Aborting MT3 compilation", MTABabort, ALWAYS, mt3)

ENDPHASE (mt3)

#endif /* PRODUCTION */

/******************************************************************************/

PHASE (mem, "Introducing memory management instructions", ALWAYS)

SUBPHASE (simd, "SIMD inference", SIMDdoInferSIMD, global.simd, mem)

SUBPHASE (cp, "Propagating constants", CPdoConstantPropagation, global.optimize.docp, mem)

SUBPHASE (cnstass, "CUDA Flatten generators", CNSTASSdoCUDAconstantAssignment,
          global.backend == BE_cuda, mem)

SUBPHASE (asd, "AUD/SCL distinction", ASDdoAudSclDistinction, ALWAYS, mem)

SUBPHASE (copy, "Making copy operations explicit", EMECdoExplicitCopy, ALWAYS, mem)

SUBPHASE (racc, "Removing alias results from conformity checks",
          EMRACCdoRemoveAliasResultsFromConformityChecks,
          global.runtimecheck.conformity &&global.insertconformitychecks, mem)

SUBPHASE (alloc, "Introducing explicit allocation statements ", EMALdoAlloc, ALWAYS, mem)

SUBPHASE (dcr, "Removing dead code", DCRdoDeadCodeRemovalModule, global.optimize.dodcr,
          mem)

SUBPHASE (rci, "Inferring reuse candidates", EMRIdoReuseInference, global.optimize.douip,
          mem)

SUBPHASE (shal, "Activating display of alias information", SHALactivate, ALWAYS, mem)

SUBPHASE (ia, "Interface aliasing analysis", EMIAdoInterfaceAnalysis,
          global.optimize.dosrf, mem)

SUBPHASE (lro, "Applying loop reuse optimization", EMLRdoLoopReuseOptimization,
          global.optimize.dosrf &&global.optimize.dolro, mem)

SUBPHASE (aa, "Aliasing analysis", EMAAdoAliasAnalysis, global.optimize.dosrf, mem)

SUBPHASE (srce, "Removing non-local reuse-candidates", SRCEdoRemoveReuseCandidates,
          global.optimize.douip, mem)

SUBPHASE (frc, "Removing invalid reuse candidates", FRCdoFilterReuseCandidates,
          global.optimize.douip, mem)

SUBPHASE (sr, "Static reuse", EMSRdoStaticReuse,
          global.optimize.douip &&global.optimize.dosrf, mem)

SUBPHASE (rb, "Introducing reuse branches", EMRBdoReuseBranching,
          global.optimize.doipc || (global.optimize.douip && global.optimize.dodr), mem)

SUBPHASE (ipc, "Identifying in-place updates", EMIPdoInplaceComputation,
          global.optimize.doipc, mem)

SUBPHASE (dr, "Exploiting data reuse", EMDRdoDataReuse,
          global.optimize.douip &&global.optimize.dodr, mem)

SUBPHASE (dcr2, "Removing dead code again", DCRdoDeadCodeRemovalModule,
          global.optimize.dodcr, mem)

SUBPHASE (unshal, "Deactivating display of alias information", SHALdeactivate, ALWAYS,
          mem)

SUBPHASE (rc, "Running reference count inference", RCIdoReferenceCounting, ALWAYS, mem)

SUBPHASE (rcm, "Reducing reference counting instructions", RCMdoRefcountMinimization,
          ALWAYS, mem)

SUBPHASE (rco, "Optimizing reference counting instructions", EMRCOdoRefCountOpt,
          global.optimize.dorco, mem)

#if 0
SUBPHASE( mvsmi,
          "Moving shared memory management instructions out of SPMD functions",
          MVSMIdoMoveSharedMemoryManagementInstructions, 
          (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop),
          mem)
#endif

SUBPHASE (re, "Removing reuse instructions", EMREdoReuseElimination, ALWAYS, mem)

ENDPHASE (mem)

/******************************************************************************/

PHASE (ussa, "Converting from static single assignment form", ALWAYS)

SUBPHASE (ussa, "Converting from SSA form", USSATdoUndoSsaTransform, ALWAYS, ussa)

SUBPHASE (f2l, "Reintroducing loops and conditionals", F2LdoFun2Lac, ALWAYS, ussa)

SUBPHASE (linl, "Inlining LaC functions", LINLdoLACInlining, ALWAYS, ussa)

SUBPHASE (rec, "Removing external code", RECdoRemoveExternalCode, ALWAYS, ussa)

#if 0
SUBPHASE( spmdfix, 
          "Fixing SPMD function signatures",
          FSFSdoFixSpmdFunctionSignatures, 
          ALWAYS,
          ussa)
#endif

SUBPHASE (rera, "Restoring reference arguments", RERAdoRestoreReferenceArguments, ALWAYS,
          ussa)

SUBPHASE (reso, "Restoring global objects", RESOdoRestoreObjects, ALWAYS, ussa)

ENDPHASE (ussa)

/******************************************************************************/

PHASE (mt, "Running automatic parallelisation",
       (global.mtmode == MT_createjoin) || (global.mtmode == MT_startstop))

SUBPHASE (mtcm, "Running multithreading cost model", MTCMdoRunCostModel, ALWAYS, mt)

SUBPHASE (mtstf, "Creating MT and ST functions", MTSTFdoCreateMtStFuns, ALWAYS, mt)

SUBPHASE (mtspmdf, "Creating SPMD functions", MTSPMDFdoCreateSpmdFuns, ALWAYS, mt)

SUBPHASE (mtrmi, "Restoring memory instructions", MTRMIdoRestoreMemoryInstrs, ALWAYS, mt)

SUBPHASE (mtdcr, "Removing dead code", MTDCRdoMtDeadCodeRemoval, ALWAYS, mt)

SUBPHASE (mtas, "Annotating scheduling information", MTASdoAnnotateScheduling, ALWAYS, mt)

SUBPHASE (sspmdls, "Applying SPMD linksign pragma", SSPMDLSdoSetSpmdLinksign, ALWAYS, mt)

ENDPHASE (mt)

/******************************************************************************/

PHASE (pc, "Preparing C code generation", ALWAYS)

SUBPHASE (lw3, "MUTC Lifting With-Loop bodies into threads", LW3doLiftWith3,
          global.backend == BE_mutc, pc)

SUBPHASE (mmv, "Marking memval identifiers", MMVdoMarkMemVals, ALWAYS, pc)

#if 0
SUBPHASE( pknlg,
          "Prepare kernel generation",
          PKNLGdoPrepareKernelGeneration,
          global.backend == BE_cuda,
          pc)
#endif

SUBPHASE (cuknl, "CUDA Create Cuda kernel functions", CUKNLdoCreateCudaKernels,
          global.backend == BE_cuda, pc)

#if 0
SUBPHASE( culknl,
          "Create Cuda loop kernel functions",
          CULKNLdoCreateCudaLoopKernels,
          global.backend == BE_cuda,
          pc)
#endif

SUBPHASE (dvr, "Removing obsolete variable declarations", DVRdoDeadVardecRemoval, ALWAYS,
          pc)

SUBPHASE (dst, "MUTC Computing static thread mapping", DSTdoDistributeThreads,
          ((global.backend == BE_mutc) && (global.filetype == F_prog)), pc)

SUBPHASE (sls, "Applying linksign pragma", SLSdoSetLinksign, ALWAYS, pc)

SUBPHASE (moi, "Manage object initialisers", MOIdoManageObjectInitialisers, ALWAYS, pc)

SUBPHASE (rcs, "Resolving code sharing in With-Loops", RCSdoResolveCodeSharing, ALWAYS,
          pc)

/*
 * WARNING: no phases that duplicate code below this line!
 *          FPC builds the argtabs which CANNOT be maintained
 *          by duptree!
 */

SUBPHASE (fpc, "Reorganising function prototypes", FPCdoFunctionPrecompile, ALWAYS, pc)

SUBPHASE (tcp, "Applying type conversions", TCPdoTypeConversions, ALWAYS, pc)

SUBPHASE (mng, "Mark NoOp Grids", MNGdoMarkNoopGrids, ALWAYS, pc)

SUBPHASE (tmft, "MUTC tag main function as thread function", TMFTdoTagMainFunThread,
          ((global.backend == BE_mutc) && (global.filetype == F_prog)), pc)

SUBPHASE (tft, "MUTC tag functions as thread functions if needed",
          TFTdoTagFunctionsAsThreads, (global.backend == BE_mutc), pc)

SUBPHASE (rid, "Consistently renaming identifiers", RIDdoRenameIdentifiers, ALWAYS, pc)

ENDPHASE (pc)

/******************************************************************************/

PHASE (cg, "Generating Code", ALWAYS)

SUBPHASE (tp, "Tag preparation", TPdoTagPreparation, ALWAYS, cg)

SUBPHASE (ctr, "Converting to old type representation", CTRdoConvertToOldTypes, ALWAYS,
          cg)

SUBPHASE (cpl, "Creating intermediate code macros", COMPdoCompile, ALWAYS, cg)

SUBPHASE (prt, "Generating C file(s)", PRTdoPrint, ALWAYS, cg)

SUBPHASE (frtr, "De-allocating syntax tree representation", FREEdoFreeTree, ALWAYS, cg)

ENDPHASE (cg)

/******************************************************************************/

PHASE (icc, "Creating binary code", ALWAYS)

SUBPHASE (hdep, "Handling dependencies", DEPdoHandleDependencies, ALWAYS, icc)

SUBPHASE (ivcc, "Invoking C compiler", CCMinvokeCC, ALWAYS, icc)

SUBPHASE (crl, "Creating SAC library", LIBBcreateLibrary, global.filetype != F_prog, icc)

ENDPHASE (icc)

/******************************************************************************/

#include "phase_undefine_defs.mac"
