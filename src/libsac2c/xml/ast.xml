<?xml-stylesheet href="ast2html.xsl" type="text/xsl" name="HTML" media="screen"?>
<definition>
  <attributetypes>
    <type name="IdagFun" ctype="idag_fun_t " init="NULL"
    copy="function" />
    <type name="Vertex" ctype="vertex*" init="NULL"
    copy="function" />
    <type name="Dag" ctype="dag*" init="NULL"
    copy="function" />
    <type name="String" ctype="char*" init="NULL"
    copy="function" />
    <type name="SharedString" ctype="const char*" init="NULL"
    copy="function" />
    <type name="Namespace" ctype="namespace_t*" init="NULL"
    copy="function" />
    <type name="Integer" ctype="int" init="0" copy="literal" />
    <type name="Byte" ctype="char" vtype="int" init="0" copy="literal" />
    <type name="Short" ctype="short" vtype="int" init="0" copy="literal" />
    <type name="Int" ctype="int" vtype="int" init="0" copy="literal" />
    <type name="Long" ctype="long" vtype="long long" init="0" copy="literal" />
    <type name="Longlong" ctype="long long" vtype="long long" init="0" copy="literal" />
    <type name="Ubyte" ctype="unsigned char" vtype="unsigned int" init="0" copy="literal" />
    <type name="Ushort" ctype="unsigned short" vtype="unsigned int" init="0" copy="literal" />
    <type name="Uint" ctype="unsigned int" vtype="unsigned int" init="0" copy="literal" />
    <type name="Ulong" ctype="unsigned long" vtype="unsigned long int" init="0" copy="literal" />
    <type name="Ulonglong" ctype="unsigned long long" vtype="unsigned long long int" init="0" copy="literal" />
    <type name="Bool" ctype="bool" vtype="int" init="FALSE" copy="literal" />
    <type name="Float" ctype="float" vtype="double" init="0.0" copy="literal" />
    <type name="Floatvec" ctype="floatvec" vtype="floatvec" init="(floatvec){0., 0., 0., 0.}" copy="literal" />
    <type name="Double" ctype="double" init="0.0" copy="literal" />
    <type name="Char" ctype="unsigned char" vtype="int" init="'\0'" 
          copy="literal" />
    <type name="OldType" ctype="types*" init="NULL"
    copy="function" persist="no" />
    <type name="Node" ctype="node*" init="NULL" copy="function" />
    <!-- a Link pointing to a node within the tree -->
    <type name="Link" ctype="node*" init="NULL" copy="hash" persist="yes" />
    <!-- a Link pointing outside of the current context, e.g. to another
         son of a module node -->
    <type name="ExtLink" ctype="node*" init="NULL" copy="hash" persist="yes" />
    <!-- a Link pointing from a N_part node to a N_code node -->
    <type name="CodeLink" ctype="node*" init="NULL" copy="hash" persist="yes" />
    <type name="FileType" ctype="file_type" init="FT_unknown"
    copy="literal" />
    <type name="LUT" ctype="lut_t*" init="NULL" copy="function" persist="no" />
    <type name="Prf" ctype="prf" init="(prf)0" copy="literal" />
    <type name="NodeList" ctype="nodelist*" init="NULL"
    copy="function" />
    <type name="DFMask" ctype="dfmask_t*" init="NULL"
    copy="function" persist="no" />
    <type name="DFMaskBase" ctype="dfmask_base_t*" init="NULL"
    copy="function" persist="no" />
    <type name="NewType" ctype="ntype*" init="NULL"
    copy="function" />
    <type name="ArgTab" ctype="argtab_t*" init="NULL"
    copy="function" />
    <type name="Shape" ctype="shape*" init="NULL"
    copy="function" />
    <type name="SimpleType" ctype="simpletype" init="T_unknown" 
    copy="literal" />
    <type name="AccessInfo" ctype="access_info_t*" init="NULL"
    copy="function" persist="no" />
    <type name="ReuseInfo" ctype="reuse_info_t*" init="NULL"
    copy="function" persist="no" />
    <type name="CudaAccessInfo" ctype="cuda_access_info_t*" init="NULL"
    copy="function" persist="no" />
    <type name="AccessFeature" ctype="feature_t" init="0"
    copy="literal"  />
    <type name="ShpSeg" ctype="shpseg*" init="NULL"
    copy="function" />
    <type name="Scheduling" ctype="sched_t*" init="NULL"
    copy="function" persist="no" />
    <type name="TaskSel" ctype="tasksel_t*" init="NULL"
    copy="function" persist="no" />
    <type name="BitField" ctype="int" init="0" copy="literal" />
    <type name="Constant" ctype="constant*" init="NULL"
    copy="function" />
    <type name="MTExecMode" ctype="mtexecmode_t" init="MUTH_ANY"
    copy="literal" />
    <type name="StringSet" ctype="stringset_t*" init="NULL"
    copy="function" persist="no" />
    <type name="IndexInfo" ctype="index_info*" init="NULL"
    copy="function" persist="no" />
    <type name="TypeCheckingStatus" ctype="NTC_stat" init="NTC_not_checked"
    copy="literal" persist="yes" />
    <type name="CompilerPhase" ctype="compiler_phase_t" init="PH_initial"
    copy="literal" />
    <type name="CompInfo" ctype="compinfo*" init="NULL"
    copy="function" />
    <type name="VertexWrapper" ctype="vertex*" init="NULL"
    copy="function" />
    <type name="OmpOP" ctype="omp_reduction_op" init="OMP_REDUCTION_NONE"
    copy="literal" />
  </attributetypes>
  <traversals>
    <!-- id is the short id of the traversal 
         name is a descriptive name
         default gives the default traversal mode
           user  a user defined function
           sons  TravSons
           none  TravNone
           error TravError
         include the include file needed for the traversal
    -->

   <!-- Added by Fangyong -->
    <traversal id="IUCFB" name="Insert user-defined constraint to function body" default="sons" include="insert_udc_funbody.h">
        <travuser>
          <node name="Fundef" />
          <node name="Udcs" />
        </travuser>
      </traversal>

    <traversal id="ARMP" name="Add RC Mode PRF" default="sons" include="add_rc_mode_prf.h">
        <travuser>
          <node name="With3" />
          <node name="Assign" />
          <node name="Ap" />
          <node name="Id" />
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="RTSPEC" name="Runtime Specialization" default="sons" include="runtime_specialization.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="CLF" name="Create loop functions" default="sons" include="create_loop_fun.h">
        <travuser>
          <node name="Assign" />
          <node name="Ids" />
          <node name="Id" />
        </travuser>
      </traversal>
      <traversal id="CCF" name="Create conditional functions" default="sons" include="create_cond_fun.h">
        <travuser>
          <node name="Assign" />
          <node name="Ids" />
          <node name="Id" />
        </travuser>
      </traversal>
      <traversal id="RTFILTER" name="Filtering of unneeded functions for runtime optimization" default="sons" include="runtime_filtering.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Arg" />
        </travuser>
      </traversal>
      <traversal id="TFTOP" name="Do a topological sort of the subtyping hierarchy" default="sons" include="topo.h" >
        <travuser>
          <node name="Tfdag" />
          <node name="Tfvertex" />
        </travuser>
      </traversal>
      <traversal id="TFMIN" name="Computing the minimum equivalent graph" default="sons" include="mineq.h" >
        <travuser>
          <node name="Tfdag" />
          <node name="Tfvertex" />
        </travuser>
      </traversal>
      <traversal id="TFDFW" name="Do a depth first walk of the subtyping hierarchy" default="sons" include="dfwalk.h" >
        <travuser>
          <node name="Tfdag" />
          <node name="Tfvertex" />
        </travuser>
      </traversal>
      <traversal id="TFCTR" name="Classify edges and build cross-edge based reachability information" default="sons" include="ctransitive.h" >
        <travuser>
          <node name="Tfdag" />
          <node name="Tfvertex" />
        </travuser>
      </traversal>
      <traversal id="TFRCH" name="Build link count matrix and label vertices for reachability analysis" default="sons" include="reachlabel.h" >
        <travuser>
          <node name="Tfdag" />
          <node name="Tfvertex" />
        </travuser>
      </traversal>
      <traversal id="TFPLB" name="Preprocess subtyping graph for LUB queries" default="sons" include="lub.h" >
        <travuser>
          <node name="Tfdag" />
          <node name="Tfvertex" />
        </travuser>
      </traversal>
      <traversal id="ESBL" name="CUDA Expand shared memory boundary load" default="sons" include="expand_shmem_boundary_load.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="ASHA" name="CUDA Adjust shared memory access" default="sons" include="adjust_shmem_access.h" >
        <travuser>
          <node name="Let" />
          <node name="With" />
          <node name="Part" />
          <node name="Code" />
          <node name="Prf" />
          <node name="Assign" />
          <node name="Arg" />
          <node name="Vardec" />
        </travuser>
        <travnone>
          <node name="With2" />
        </travnone>
      </traversal>
      <traversal id="PFD" name="CUDA Partial folding" default="sons" include="partial_fold.h" >
        <travuser>
          <node name="With" />
          <node name="Withid" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Fold" />
          <node name="Let" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Code" />
          <node name="Prf" />
          <node name="Module" />
        </travuser>
      </traversal>
      <traversal id="SHMEM" name="CUDA Exploiting data reuse with shared memory" default="sons" include="shared_memory_reuse.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="With" />
          <node name="Part" />
          <node name="Code" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="CUDR" name="CUDA Exploiting data reuse with cuda shared memory" default="sons" include="cuda_data_reuse.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Assign" />
          <node name="With" />
          <node name="Part" />
          <node name="Code" />
          <node name="With3" />
          <node name="Range" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="DAA" name="CUDA Data access analysis" default="sons" include="data_access_analysis.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Assign" />
          <node name="With" />
          <node name="Part" />
          <node name="Code" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="IRA" name="CUDA Infer reusable arrays in withloops" default="sons" include="infer_reusable_arrays.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="With" />
          <node name="Part" />
          <node name="Code" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="RLAC" name="CUDA Remove unused lac functions" default="sons" include="remove_unused_lac.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Module" />
          <node name="Ap" />
        </travuser>
      </traversal>
      <traversal id="SCUF" name="CUDA Split CUDA fold withloops" default="sons" include="split_cuda_fold.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="With" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Fold" />          
          <node name="Code" />
          <node name="Prf" />
          <node name="Withid" />
        </travuser>
      </traversal>
      <traversal id="CUSKC" name="CUDA Sink scalar code into CUDA withloop" default="sons" include="cuda_sink_code.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Ids" />
          <node name="Id" />         
          <node name="Let" />
          <node name="Block" />
          <node name="With" />
        </travuser>
      </traversal>
      <traversal id="CUASR" name="CUDA Adjust return ids of single threaded kernel" default="sons" include="adjust_stknl_rets.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Ap" />
          <node name="Return" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Module" />
          <node name="Let" />
          <node name="Arg" />
          <node name="Ret" />
        </travuser>
      </traversal>
      <traversal id="STKNL" name="CUDA Create single threaded CUDA kerenls" default="sons" include="single_thread_kernels.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Cudast" />
        </travuser>
      </traversal>
      <traversal id="CUCC" name="CUDA Create cells" default="sons" include="cuda_create_cells.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
        </travuser>
      </traversal>
      <traversal id="CUTEM" name="CUDA Tag execution mode" default="sons" include="cuda_tag_executionmode.h" >
        <travuser>
          <node name="With" />
          <node name="Assign" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Ap" />
          <node name="Let" />
          <node name="Fundef" />
          <node name="Vardec" />
          <node name="Cond" />
          <node name="Block" />
          <node name="Arg" />
        </travuser>
        <travnone>
          <node name="Return" />
          <node name="Funcond" />
        </travnone>
      </traversal>
      <traversal id="SPTN" name="Split partitions" default="sons" include="split_partitions.h" >
        <travuser>
          <node name="With" />
          <node name="Part" />
          <node name="Generator" />
        </travuser>
      </traversal>
      <traversal id="KPP" name="Kernel post processing" default="sons" include="kernel_post_processing.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Id" />
          <node name="Let" />
          <node name="Prf" />
          <node name="With3" />
          <node name="Range" />
          <node name="Genarray" />
        </travuser>
      </traversal>
      <traversal id="SCUWL" name="Split Cudarizable withloop" default="sons" include="split_cuda_withloop.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Let" />
          <node name="Assign" />
          <node name="With" />
          <node name="Modarray" />
          <node name="Genarray" />
        </travuser>
      </traversal>
      <traversal id="PKNLG" name="Prepare cuda kernel generation" default="sons" include="prepare_kernel_generation.h" >
        <travuser>
          <node name="Fundef" />
          <node name="With" />
          <node name="With2" />
          <node name="Genarray" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
          <node name="Cond" />
        </travuser>
      </traversal>
      <traversal id="PFG" name="Prepare for loop generation" default="sons" include="prepare_forloop_generation.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Do" />
          <node name="Id" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="ACUPTN" name="Annotate CUDA partitions" default="sons" include="annotate_cuda_partition.h" >
        <travuser>
          <node name="With" />
          <node name="Part" />
          <node name="Generator" />
        </travuser>
      </traversal>
      <traversal id="ACTRAN" name="Annoate memory transfers in conditional function" default="sons" include="annotate_cond_transfers.h" >
        <travuser>
          <node name="Assign" />
          <node name="Fundef" />
          <node name="Prf" />
          <node name="Id" />
          <node name="Let" />
          <node name="Funcond" />
        </travuser>
      </traversal>
      <traversal id="AMTRAN" name="Annoate a memory transfer" default="sons" include="annotate_memory_transfers.h" >
        <travuser>
          <node name="Assign" />
          <node name="Fundef" />
          <node name="Prf" />
          <node name="Ap" />
          <node name="Id" />
          <node name="Arg" />
          <node name="Let" />
          <node name="Funcond" />
        </travuser>
      </traversal>
      <traversal id="MTRAN" name="Minimise the number of device-host data transfers" default="sons" include="minimize_transfers.h" >
        <travuser>
        </travuser>
      </traversal>
      <traversal id="MLTRAN" name="Minimise the number of device-host data transfers in a loop" default="sons" include="minimize_loop_transfers.h" >
        <travuser>
          <node name="Assign" />
          <node name="Let" />
          <node name="Fundef" />
          <node name="Prf" />
          <node name="Ap" />
          <node name="Id" />
          <node name="Arg" />
          <node name="Funcond" />
          <node name="Return" />
        </travuser>
      </traversal>
      <traversal id="MCTRAN" name="Minimise the number of device-host data transfers in a cond-fun" default="sons" include="minimize_cond_transfers.h" >
        <travuser>
          <node name="Assign" />
          <node name="Let" />
          <node name="Fundef" />
          <node name="Prf" />
          <node name="Ap" />
          <node name="Id" />
          <node name="Arg" />
          <node name="Funcond" />
          <node name="Return" />
          <node name="Cudast" />
        </travuser>
      </traversal>
      <traversal id="MBTRAN2" name="Minimise the number of device-host data transfers in code blocks" default="sons" include="minimize_block_transfers2.h" >
        <travuser>
          <node name="Block" />
          <node name="Assign" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="MCSTRAN" name="Minimise the number of device-host data transfers in a Cudast" default="sons" include="minimize_cudast_transfers.h" >
        <travuser>
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
          <node name="Cudast" />
        </travuser>
      </traversal>
      <traversal id="SFWO" name="Set Fundef Was Optimized" default="sons" include="setfundefwasoptimized.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="CUKNL" name="Create cuda kernel functions" default="sons" include="create_cuda_kernels.h" >
        <travuser>
          <node name="Assign" />
          <node name="Do" />
          <node name="Let" />
          <node name="With" />
          <node name="With2" />
          <node name="Withid" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Part" />
          <node name="Code" />
          <node name="Generator" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="CNSTASS" name="Insert shape, lower bound and upper bound constant assignments" default="sons" include="create_constant_assignments.h" >
        <travuser>
          <node name="Assign" />
          <node name="With" />
          <node name="Withs" />
          <node name="Fundef" />
          <node name="Generator" />
        </travuser>
      </traversal>
      <traversal id="IWLMEM" name="Insert CUDA memory transfer primitives for withloops" default="sons" include="insert_withloop_memtran.h" >
        <travuser>
          <node name="Let" />
          <node name="Assign" />
          <node name="With" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Code" />
          <node name="Funcond" />
        </travuser>
      </traversal>
      <traversal id="ICSMEM" name="Insert CUDA memory transfer primitives for cudasts" default="sons" include="insert_cudast_memtran.h" >
        <travuser>
          <node name="Assign" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Cudast" />  
          <node name="Let" />
          <node name="Funcond" />            
        </travuser>
        <travnone>
          <node name="Return" />
        </travnone>
      </traversal>
      <traversal id="ACUWL" name="Annotate CUDA withloops" default="sons" include="annotate_cuda_withloop2.h" >
        <travuser>
          <node name="With" />
          <node name="Code" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Fold" />
          <node name="Break" />
          <node name="Propagate" />
          <node name="Genarray" />
          <node name="Id" />
          <node name="Let" />
        </travuser>
      </traversal>
    <traversal id="IMA" name="Infer memory accesses" default="sons" include="infer_memory_accesses.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Let" />
        <node name="With" />
        <node name="With2" />
        <node name="Genarray" />
        <node name="Modarray" />
        <node name="Prf" />
      </travuser>
    </traversal>
    <traversal id="CUCM" name="CUDA cost model" default="sons" include="cuda_cost_model.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Let" />
        <node name="With" />
        <node name="Genarray" />
        <node name="Modarray" />
        <node name="Fold" />
        <node name="Part" />
      </travuser>
    </traversal>
    <traversal id="CADT" name="Change arrays to distributed type" default="sons" include="change_arrays_to_dist.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Ret" />
        <node name="Avis" />
      </travuser>
    </traversal>
    <traversal id="IMEMDIST" name="Insert memory transfer primitives for distributed variables" default="sons" include="insert_memtrans_dist.h" >
      <travuser>
        <node name="Let" />
        <node name="Ap" />
        <node name="Block" />
        <node name="Assign" />
        <node name="With" />
        <node name="With2" />
        <node name="Id" />
        <node name="Ids" />
        <node name="Fundef" />
        <node name="Prf" />
        <node name="Return" />
      </travuser>
    </traversal>
    <traversal id="DISTCOND" name="Create distributed with-loop conditional" default="sons" include="create_dist_wl_cond.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Let" />
        <node name="Withs" />
        <node name="With" />
        <node name="With2" />
      </travuser>
    </traversal>
    <traversal id="IAL" name="Introduce Availability Loops" default="sons" include="introduce_availability_loop.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Prf" />
        <node name="With" />
        <node name="Part" />
        <node name="Generator" />
        <node name="Exprs" />
        <node name="Genarray" />
        <node name="Modarray" />
      </travuser>
    </traversal>
    <traversal id="PDS" name="Prepare distributed with-loop schedulers" default="sons" include="prepare_dist_scheduler.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Cond" />
      </travuser>
    </traversal>
      <traversal id="SOSSK" name="Specialization Oracle for Static Shape Knowledge" default="sons" include="specialization_oracle_static_shape_knowledge.h" >
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Assign" />
          <node name ="Cond" />
          <node name="Exprs" />
          <node name="Fold" />
          <node name="Genarray" />
          <node name ="Modarray" />
          <node name="Generator" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Ret" />
          <node name="Return" />
          <node name="Prf" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Code" />
          <node name="Part" />
          <node name="Withid" />
          <node name="With" />
        </travuser>
      </traversal>
      <traversal id="LW3" name="Lift with3s into functions" default="sons" include="lift_with3_bodies.h" >
        <travuser>
          <node name="Module" />
          <node name="Range" />
          <node name="With3" />
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="DMUI" name="Dynamic memory usage inference" default="sons" include="dynamic_memory_usage_inference.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="DST" name="Distribute threads" default="sons" include="distribute_threads.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="With3" />
          <node name="Range" />
        </travuser>
      </traversal>
      <traversal id="WLLOM" name="Withloop lock optimization marking" default="sons" include="wl_lock_optimization_marking.h" >
        <travuser>
          <node name="With" />
          <node name="Code" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Ids" />
          <node name="Id" />
          <node name="Prf" />
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="WLLOS" name="Withloop lock optimization shifting" default="sons" include="wl_lock_optimization_shifting.h" >
        <travuser>
        <node name="With" />
        <node name="Block" />
        <node name="Assign" />
        <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="PRT" name="Print Syntax Tree" default="user" include="print.h" >
        <travsons>
          <node name="SSAstack" />
          <node name="Nums" />
          <node name="Idag" />
          <node name="IdagVFam" />
          <node name="IdagEFam" />
          <node name="IdagEFams" />
          <node name="IdagVertices" />
        </travsons>
      </traversal>

      <traversal id="VISUAL" name="Visualize Syntax Tree" default="user" include="visualize.h">
	<travsons>
	  <node name="SSAstack" />
          <node name="Nums" />
          <node name="Idag" />
          <node name="IdagVFam" />
          <node name="IdagEFam" />
          <node name="IdagEFams" />
          <node name="IdagVertices" />
	</travsons>
      </traversal>

      <traversal id="DUP" name="Tree duplication" default="user" include="DupTree.h">
	<travsons>
          <node name="Idag" />
          <node name="IdagVFam" />
          <node name="IdagEFam" />
          <node name="IdagEFams" />
          <node name="IdagVertices" />
	</travsons>
      </traversal>
      <traversal id="FREE" name="Free Tree" default="user" include="free_node.h" >
      </traversal>
      <traversal id="UWT" name="Update Wrapper Types" default="sons" include="update_wrapper_type.h" >
        <travuser>
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="REN" name="Rename identifiers" default="sons" include="rename.h" >
        <travuser>
          <node name="Arg" />
          <node name="Vardec" />
          <node name="Id" />
          <node name="Ids" />
        </travuser>
      </traversal>
      <traversal id="MCG" name="Map Call Graph" default="sons" include="map_call_graph.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Ap" />
        </travuser>
      </traversal>
      <traversal id="MFT" name="Map Traversal on Fundefs" default="sons" include="map_fun_trav.h" >
        <travuser>
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="MAT" name="Map Traversal on Avis nodes" default="sons" include="map_avis_trav.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Avis" />
          <node name="Block" />
        </travuser>
      </traversal>
      <traversal id="GGS" name="Generate Guard Solvers" default="sons" include="generate_guard_solvers.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Prf" />
        </travuser>
      </traversal> 
      <traversal id="POGO" name="Polyhedral Guard Optimization" default="sons" include="polyhedral_guard_optimization.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Part" />
          <node name="With" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
        </travuser>
      </traversal> 
      <traversal id="GLF" name="Group Local functions" default="sons" include="group_local_funs.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
        </travuser>
      </traversal> 
      <traversal id="PMBL" name="Pattern Matching Build Lut" default="sons" include="pattern_match_build_lut.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Arg" />
        </travuser>
      </traversal> 
      <traversal id="IVEXI" name="Index Variable Extrema Insertion" default="sons" include="ivextrema.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Block" />
          <node name="Funcond" />
          <node name="Cond" />
          <node name="While" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
          <node name="With" />
          <node name="Part" />
          <node name="Ap" />
        </travuser>
      </traversal> 
      <traversal id="SWLD" name="Set Withloop Depth" default="sons" include="set_withloop_depth.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="With" />
          <node name="Part" />
          <node name="Withid" />
          <node name="Ids" />
          <node name="Vardec" />
          <node name="Arg" />
        </travuser>
      </traversal> 
      <traversal id="IVEXP" name="Index Variable Extrema Propagation" default="sons" include="ivexpropagation.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="With" />
          <node name="Part" />
          <node name="Cond" />
          <node name="Funcond" />
          <node name="While" />
        </travuser>
      </traversal> 
      <traversal id="IVEXC" name="Index Vector Extrema Cleanup" default="sons" include="ivexcleanup.h" >
        <travuser>
          <node name="Part" />
          <node name="Code" />
          <node name="Let" />
          <node name="Avis" />
          <node name="Prf" />
          <node name="Id" />
          <node name="Ids" />
        </travuser>
      </traversal> 
      <traversal id="UGLF" name="Ungroup Local functions" default="sons" include="ungroup_local_funs.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
        </travuser>
      </traversal> 
      <traversal id="FLAS" name="Free Lhs Avis Sons" default="sons" include="free_lhs_avis_sons.h" >
        <travuser>
          <node name="Ids" />
        </travuser>
      </traversal> 
      <traversal id="PINL" name="Prepare inlining" default="sons" include="prepare_inlining.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Vardec" />
          <node name="Avis" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Arg" />
          <node name="Id" />
          <node name="Ids" />
        </travuser>
      </traversal>
      <traversal id="SBT" name="Serialize Build Stack" default="user" include="serialize_buildstack.h" />
      <traversal id="SET" name="Serialize Node Traversal" default="user" include="serialize_node.h" />
      <traversal id="SEL" name="Serialize Link Traversal" default="user" include="serialize_link.h" />
      <traversal id="AFB" name="Add Function Body Traversal" default="sons" include="add_function_body.h">
        <travuser>
          <node name="Fundef" />
          <node name="Return" />
          <node name="Block" />
          <node name="Arg" />
          <node name="Ap" />
        </travuser>
      </traversal>
      <traversal id="CFP" name="MUTC create function pairs" default="sons" include="create_function_pairs.h">
        <travuser>
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="TMFT" name="Tag main function as thread function" default="sons" include="tag_main_fun_thread.h">
        <travuser>
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="TFT" name="Tag functions as thread functions when needed" default="sons" include="tag_fun_thread.h">
        <travuser>
          <node name="Fundef" />
          <node name="Ap" />
          <node name="With3" />
        </travuser>
      </traversal>
      <traversal id="CSPF" name="MUTC create spawn functions" default="sons" include="create_spawn_funs.h">
        <travuser>
          <node name="Module" />
          <node name="Ap" />
        </travuser>
      </traversal>
      <traversal id="TP" name="Tag Preparation" default="sons" include="tag_preparation.h" >
        <travuser>
          <node name="Arg" />
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="CTR" name="Converting to old type representation" default="sons" include="convert_type_representation.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Block" />
          <node name="Vardec" />
          <node name="Ret" />
        </travuser>
      </traversal>
      <traversal id="CUD" name="Cleanup Declarations" default="sons" include="cleanup_decls.h" >
        <travuser>
          <node name="Block" />
          <node name="Fundef" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Vardec" />
        </travuser>
      </traversal>
      <traversal id="UW3" name="Unroll With3s" default="sons" include="unroll_with3.h">
        <travuser>
          <node name="Assign" />
          <node name="With3" />
          <node name="Range" />
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="MS" name="MUTC move syncs" default="sons" include="move_syncs.h">
      </traversal>
      <traversal id="MA" name="MUTC move assigns" default="sons" include="move_assigns.h">
        <travuser>
          <node name="Let" />
          <node name="Assign" />
        </travuser>
      </traversal>
      <traversal id="F2L" name="Fun2Lac Traversal" default="sons" include="fun2lac.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Arg" />
        </travuser>
      </traversal>
      <traversal id="USSAT" name="UndoSSATransform Traversal" default="sons" include="UndoSSATransform.h" >
        <travuser>
          <node name="Assign" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Block" />
          <node name="Vardec" />
          <node name="Avis" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Cond" />
          <node name="Funcond" />
        </travuser>
      </traversal>
      <traversal id="INFDFMS" name="Infer DataFlowMask Traversal" default="sons" include="infer_dfms.h" >
        <travuser>
          <node name="Assign" />
          <node name="Do" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Arg" />
          <node name="Code" />
          <node name="Range" />
          <node name="Ap" />
          <node name="Id" />
          <node name="Ids" />
          <node name="With" />
          <node name="With2" />
          <node name="With3" />
          <node name="Cond" />
          <node name="Block" />
        </travuser>
	<traverror>
          <node name="Icm" />
	</traverror>
      </traversal>
      <traversal id="RDFMS" name="Remove DataFlowMask Traversal" default="sons" include="remove_dfms.h" >
        <travuser>
          <node name="Do" />
          <node name="Fundef" />
          <node name="With" />
          <node name="With2" />
          <node name="With3" />
          <node name="Cond" />
          <node name="Block" />
        </travuser>
      </traversal>
      <traversal id="CMPT" name="Compare Tree Traversal" default="CMPTunknown" prefun="CMPTnodeType" include="compare_tree.h" >
        <travuser>
          <node name="Num" />
          <node name="NumByte" />
	        <node name="NumShort" />
      	  <node name="NumInt" />
      	  <node name="NumLong" />
      	  <node name="NumLonglong" />
      	  <node name="NumUbyte" />
      	  <node name="NumUshort" />
    	    <node name="NumUint" />
  	      <node name="NumUlong" />
          <node name="NumUlonglong" />
          <node name="Char" />
          <node name="Bool" />
          <node name="Float" />
          <node name="Floatvec" />
	    	  <node name="Double" />
    		  <node name="Type" />
		      <node name="Str" />
    		  <node name="Id" />
		      <node name="Ids" />
    		  <node name="Array" />
		      <node name="Prf" />
    		  <node name="Ap" />
		      <node name="Generator" />
    		  <node name="Fold" />

		  <node name="Block" />
		  <node name="Assign" />
		  <node name="Let" />
		  <node name="Return" />
		  <node name="Cond" />
		  <node name="Do" />
		  <node name="Funcond" />
		  <node name="Exprs" />
		  <node name="With" />
		  <node name="Part" />
		  <node name="Withid" />
		  <node name="Code" />
		  <node name="Genarray" />
		  <node name="Modarray" />
		</travuser>
	      </traversal>
	      <traversal id="CHK" name="Check the Tree" default="user" ifndef="DBUG_OFF" include="check.h" />
	      <traversal id="CHKRST" name="Reset for Tree Check" default="user" ifndef="DBUG_OFF" include="check_reset.h" />
	      <traversal id="CHKM" name="Check the memspace" default="user" ifndef="DBUG_OFF" include="check_node.h" />
	      <traversal id="CHKLACF" name="Check LaC functions" 
		       default="sons" include="check_lacfuns.h" >
		<travuser>
		  <node name="Module" />
		  <node name="Fundef" />
		  <node name="Block" />
		  <node name="Ap" />
		</travuser>
	      </traversal>
	      <traversal id="HM" name="Handle Mops" default="sons" include="handle_mops.h" >
		<travuser>
		  <node name="SPMop" />
		</travuser>
	      </traversal>
	      <traversal id="HWLG" name="Handle multi-generator with-loops"
			 default="sons" include="handle_with_loop_generators.h" >
		<travuser>
		  <node name="Let" />
		  <node name="Assign" />
		  <node name="With" />
		  <node name="Genarray" />
		  <node name="Modarray" />
		  <node name="SPFold" />
		  <node name="Propagate" />
		</travuser>
	      </traversal>
	      <traversal id="HWLO" name="Handle multi-operator with-loops"
			 default="sons" include="handle_with_loop_operators.h" >
		<travuser>
		  <node name="Assign" />
		  <node name="Let" />
		  <node name="With" />
		  <node name="Genarray" />
		  <node name="Modarray" />
		  <node name="SPFold" />
		  <node name="Propagate" />
		</travuser>
	      </traversal>
	      <traversal id="HZGWL" name="Handle zero-generator withloops"
			 default="sons" include="handle_zero_generator_with_loops.h" >
		<travuser>
		  <node name="With" />
		  <node name="Modarray" />
		  <node name="Genarray" />
		  <node name="SPFold" />
		  <node name="Propagate" />
		  <node name="Let" />
		  <node name="Assign" />
		  <node name="Return" />
		</travuser>
	      </traversal>
	      <traversal id="IUTC" name="Introduce User Trace Calls" default="sons" include="introduce_user_tracing_calls.h">
		<travuser>
		  <node name="Fundef" />
		  <node name="Arg" />
		  <node name="SPIds" />
		  <node name="Assign" />
		  <node name="Return" />
		  <node name="Block" />
		</travuser>
		<travnone>
		  <node name="Withid" />
		</travnone>
	      </traversal>
	      <traversal id="HD" name="Handle Dots" default="sons" include="handle_dots.h">
		<travuser>
		  <node name="SPId" />
		  <node name="With" />
		  <node name="Genarray" />
		  <node name="Modarray" />
		  <node name="Fold" />
		  <node name="Part" />
		  <node name="Generator" />
		  <node name="Dot" />
		  <node name="SPAp" />
		  <node name="Prf" />
		  <node name="Assign" />
		  <node name="SetWL" />
		  <node name="SPId" />
		</travuser>
	      </traversal>
	      <traversal id="CSGD" name="Check and Simplify Generic Definitions" default="sons" include="check_and_simplify_generic_definitions.h">
		<travuser>
		  <node name="Module" />
		  <node name="Fundef" />
		  <node name="Arg" />
		  <node name="Ret" />
		  <node name="Avis" />
		  <node name="Cast" />
		  <node name="Return" />
		  <node name="Assign" />
		</travuser>
	      </traversal>
	      <traversal id="GNTC" name="Generate Nested Type Conversions" default="sons" include="generate_nested_type_conversions.h">
	      	<travuser>
            <node name="Module" />
		        <node name="Typedef" />
      		</travuser>
	      </traversal>
	      <traversal id="GGTC" name="Generate Generic Type Conversions" default="sons" include="generate_generic_type_conversions.h">
		<travuser>
		  <node name="Module" />
		  <node name="Typedef" />
		  <node name="Export" />
		  <node name="Provide" />
		  <node name="Symbol" />
		</travuser>
	      </traversal>
	      <traversal id="RSP" name="Resolve pragmas" default="sons" include="resolvepragma.h">
		<travuser>
		  <node name="Typedef" />
		  <node name="Objdef" />
		  <node name="Fundef" />
		  <node name="Module" />
		  <node name="Ret" />
		  <node name="Arg" />
		</travuser>
	      </traversal>
	      <traversal id="W2D" name="While2do" default="sons" include="while2do.h" >
		<travuser>
		  <node name="While" />
		</travuser>
	      </traversal>
	      <traversal id="HCE" name="Handle conditional expressions" 
			 default="sons" include="handle_condexpr.h" >
		<travuser>
		  <node name="Assign" />
		  <node name="Code" />
		  <node name="Cond" />
		  <node name="Do" />
		  <node name="Funcond" />
		  <node name="With" />
		</travuser>
	      </traversal>
	      <traversal id="FLAT" name="Flatten" default="sons" include="flatten.h" >
		<travuser>
		  <node name="Assign" />
		  <node name="Module" />
		  <node name="Fundef" />
		  <node name="Cast" />
		  <node name="Exprs" />
		  <node name="SPAp" />
		  <node name="Block" />
		  <node name="Cond" />
		  <node name="Do" />
		  <node name="Array" />
		  <node name="Return" />
		  <node name="Prf" />
		  <node name="With" />
		  <node name="Withid" />
		  <node name="Part" />
		  <node name="Generator" />
		  <node name="Genarray" />
		  <node name="Modarray" />
		  <node name="Propagate" />
		  <node name="SPFold" />
		  <node name="Code" />
		</travuser>
	      </traversal>
	      <traversal id="FLATG" name="Flattengenerators" default="sons" include="flattengenerators.h" >
		<travuser>
		  <node name="Module" />
		  <node name="Fundef" />
		  <node name="With" />
		  <node name="Part" />
		  <node name="Generator" />
		  <node name="Assign" />
		  <node name="Cond" />
		  <node name="Do" />
		  <node name="While" />
		  <node name="Funcond" />
		  <node name="Prf" />
		  <node name="Let" />
		  <node name="Exprs" />
		</travuser>
	      </traversal>
	      <traversal id="L2F" name="Lac2Fun Traversal" default="sons" include="lac2fun.h" >
		<travuser>
		  <node name="Assign" />
		  <node name="Do" />
		  <node name="Fundef" />
		  <node name="Cond" />
		</travuser>
	      </traversal>
	      <traversal id="SSAT" name="SSA Transform Traversal" default="sons" include="SSATransform.h" >
		<travuser>
		  <node name="Assign" />
		  <node name="Ap" />
		  <node name="Fundef" />
		  <node name="Cond" />
		  <node name="Block" />
		  <node name="Code" />
		  <node name="Let" />
		  <node name="Arg" />
		  <node name="Vardec" />
		  <node name="Id" />
		  <node name="With" />
		  <node name="With2" />
		  <node name="Part" />
		  <node name="Withid" />
		  <node name="Funcond" />
		  <node name="Return" />
		  <node name="Ids" />
		</travuser>
	      </traversal>
	      <traversal id="RSA" name="Resolve All Flags" default="sons" include="resolveall.h" >
		<travuser>
		  <node name="Use" />
		  <node name="Import" />
		  <node name="Provide" />
		  <node name="Export" />
		  <node name="Module" />
		</travuser>
	      </traversal>
	      <traversal id="GDP" name="Gather Dependencies" default="sons" include="gatherdependencies.h">
		<travuser>
		  <node name="Use" />
		  <node name="Import" />
		  <node name="Typedef" />
		  <node name="Objdef" />
		  <node name="Avis" />
		  <node name="Ret" />
		  <node name="SPId" />
		  <node name="SPFold" />
		  <node name="Cast" />
		  <node name="Module" />
		</travuser>
	      </traversal>
	      <traversal id="ANS" name="Annotate Namespaces" default="sons" include="annotatenamespace.h">
		<travuser>
		  <node name="Symbol" />
		  <node name="Use" />
		  <node name="Import" />
		  <node name="Export" />
		  <node name="Provide" />
		  <node name="Fundef" />
		  <node name="Typedef" />
		  <node name="Objdef" />
		  <node name="While" />
		  <node name="Do" />
		  <node name="SPAp" />
		  <node name="SPMop" />
		  <node name="Avis" />
		  <node name="Array" />
		  <node name="Arg" />
		  <node name="Ret" />
		  <node name="Vardec" />
		  <node name="SPIds" />
		  <node name="SPId" />
		  <node name="Let" />
		  <node name="With" />
		  <node name="SPFold" />
		  <node name="Module" />
		  <node name="Cast" />
		</travuser>
	      </traversal>
	      <traversal id="USS" name="Use Symbols" default="sons" include="usesymbols.h" >
		<travuser>
		  <node name="Typedef" />
		  <node name="Objdef" />
		  <node name="SPFold" />
		  <node name="Avis" />
		  <node name="Cast" />
		  <node name="Array" />
		  <node name="Ret" />
		  <node name="SPAp" />
		  <node name="SPId" />
		  <node name="SPMop" />
		  <node name="Module" />
		</travuser>
	      </traversal>
	      <traversal id="IMP" name="Import Symbols" default="sons" include="importsymbols.h" >
		<travuser>
		  <node name="Module" />
		  <node name="Import" />
		  <node name="Export" />
		  <node name="Use" />
		  <node name="Provide" />
		  <node name="Symbol" />
		</travuser>
	      </traversal>
	      <traversal id="INSVD" name="Insert Vardecs" default="sons" include="insert_vardec.h" >
		<travuser>
		  <node name="Module" />
		  <node name="Fundef" />
		  <node name="SPAp" />
		  <node name="SPFold" />
		  <node name="SPId" />
		  <node name="SPIds" />
		  <node name="With" />
		  <node name="Let" />
		  <node name="Part" />
		  <node name="Code" />
		  <node name="Do" />
		</travuser>
	      </traversal>
	      <traversal id="INSTC" name="Insert Type Conversions" default="sons" include="insert_type_conv.h" >
		<travuser>
		  <node name="Fundef" />
		  <node name="Block" />
		  <node name="Avis" />
		  <node name="Assign" />
		  <node name="Ids" />
		  <node name="Id" />
		  <node name="With" />
		  <node name="Return" />
		</travuser>
	      </traversal>
	      <traversal id="CRTWRP" name="Create Wrappers" default="sons" include="create_wrappers.h">
		<travuser>
		  <node name="Module" />
		  <node name="Fundef" />
		  <node name="Let" />
		  <node name="SPAp" />
		  <node name="Genarray" />
		  <node name="SPFold" />
		</travuser>  
	      </traversal>
	      <traversal id="RST" name="Resolve Symbol Types" default="sons" include="resolvesymboltypes.h" >
		<travuser>
		  <node name="Module" />
		  <node name="Fundef" />
		  <node name="Arg" />
		  <node name="Ret" />
		  <node name="Avis" />
		  <node name="Array" />
		  <node name="Typedef" />
		  <node name="Objdef" />
		  <node name="Type" />
		  <node name="Cast" />
		</travuser>
	      </traversal>
	      <traversal id="OI" name="Object Initializer" default="sons" include="object_init.h">
		<travuser>
		  <node name="Module" />
		  <node name="Objdef" />
		</travuser>
	      </traversal>
	      <traversal id="OAN" name="Object Analysis" default="sons" include="object_analysis.h">
		<travuser>
		  <node name="Module" />
		  <node name="Globobj" />
		  <node name="Fundef" />
		  <node name="Ap" />
		  <node name="Objdef" />
		</travuser>
	      </traversal>
	      <traversal id="GOI" name="Generating Object Initialiser" default="sons" include="generate_object_initialiser.h" >
		<travuser>
		  <node name="Fundef" />
		  <node name="Module" />
		</travuser>
	      </traversal>
	      <traversal id="RSO" name="Resolve Objects" default="sons" include="resolve_objects.h" >
		<travuser>
		  <node name="Ap" />
		  <node name="Fundef" />
		  <node name="Globobj" />
		  <node name="Let" />
		  <node name="Module" />
		  <node name="Propagate" />
		  <node name="With" />
		</travuser>
	      </traversal>
	      <traversal id="RRA" name="Resolve Reference Args" default="sons" include="resolve_reference_args.h" >
		<travuser>
		  <node name="Fundef" />
		  <node name="Return" />
		  <node name="Let" />
		  <node name="Ap" />
		  <node name="Module" />
		</travuser>
	      </traversal>
	      <traversal id="EWT" name="Extend Wrapper Types" default="sons" include="extend_wrapper_types.h" >
		<travuser>
		  <node name="Fundef" />
		</travuser>
	      </traversal>
	      <traversal id="ESP" name="Enforce Specialization" default="sons" include="enforce_specialization.h" >
		<travuser> 
		  <node name="Module" />
		  <node name="Fundef" />
		</travuser>
	      </traversal>
	      <traversal id="NTC" name="New Type Inference" default="sons" include="new_typecheck.h" >
		<travuser> 
		  <node name="Module" />
		  <node name="Fundef" />
		  <node name="Block" />
		  <node name="Vardec" />
		  <node name="Assign" />
		  <node name="Cond" />
		  <node name="Funcond" />
		  <node name="Let" />
		  <node name="Return" />
		  <node name="Ap" />
		  <node name="Prf" />
		  <node name="Array" />
		  <node name="Cast" />
		  <node name="Exprs" />
		  <node name="Id" />
		  <node name="Globobj" />
		  <node name="Type" />
		  <node name="Num" />
		  <node name="NumByte" />
		  <node name="NumShort" />
		  <node name="NumInt" />
		  <node name="NumLong" />
		  <node name="NumLonglong" />
		  <node name="NumUbyte" />
		  <node name="NumUshort" />
		  <node name="NumUint" />
		  <node name="NumUlong" />
		  <node name="NumUlonglong" />
		  <node name="Bool" />
      <node name="Nested_init" />
		  <node name="Char" />
		  <node name="Double" />
          <node name="Float" />
          <node name="Floatvec" />
          <node name="With" />
          <node name="Generator" />
          <node name="Part" />
          <node name="Withid" />
          <node name="Code" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Break" />
          <node name="Propagate" />
          <node name="Str" />
        </travuser>
      </traversal>
      <traversal id="SWR" name="Split Wrappers" default="sons" include="split_wrappers.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="With" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Propagate" />
        </travuser>
      </traversal>
      <traversal id="CWC" name="Create Wrapper Code" default="sons" include="create_wrapper_code.h" >
        <travuser>
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="DFC" name="Dispatch Funcalls and Create Foldfuns" default="sons" include="dispatchfuncalls.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="With" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Propagate" />
          <node name="Let" />
        </travuser>
      </traversal>
      <traversal id="ELF" name="Extend LaC funs" default="sons" include="extend_lac_funs.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Ap" />
        </travuser>
      </traversal>
      <traversal id="EAT" name="Eliminate type variables and do some cleanup" default="sons" include="elim_alpha_types.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Avis" />
          <node name="Array" />
          <node name="Block" />
          <node name="Let" />
          <node name="Part" />
          <node name="Withid" />
          <node name="With" />
        </travuser>
      </traversal>
      <traversal id="EBT" name="Eliminate bottom types" default="sons" include="elim_bottom_types.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Block" />
          <node name="Ids" />
          <node name="Vardec" />
          <node name="Let" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Funcond" />
        </travuser>
      </traversal>
      <traversal id="FDI" name="Free Dispatch Information" default="sons" include="free_dispatch_information.h">
        <travuser>
          <node name="Ap" />
          <node name="Module" />
          <node name="Fundef" />
        </travuser>  
      </traversal>
      <traversal id="PF" name="Annotate Function Calls " default="sons" include="annotate_fun_calls.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Fundef" />
        </travuser>  
      </traversal>
      <traversal id="EXP" name="Export Symbols" default="sons" include="export.h">
        <travuser>
	  <node name="Use" />
	  <node name="Import" />
	  <node name="Provide" />
	  <node name="Export" />
	  <node name="Symbol" />
	  <node name="Fundef" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="SER" name="Serialize Module" default="sons" include="serialize.h">
        <travuser>
	  <node name="Fundef" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	</travuser>
      </traversal>
      <traversal id="EA" name="Explicit Accumulate" default="sons" include="ExplicitAccumulate.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="With" />
          <node name="Propagate" />
          <node name="Fold" />
          <node name="Code" />
        </travuser>
      </traversal>
      <traversal id="WLDP" name="With-Loop Default Partition" default="sons" include="wldefaultpartition.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="With" />
          <node name="Part" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Propagate" />
         </travuser>
      </traversal>
      <traversal id="WLPG" name="With-Loop Partition Generation" default="sons" include="WLPartitionGeneration.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="With" />
        </travuser>
      </traversal>
      <traversal id="WLBSC" name="With-Loop Bounds 2 Structure Constants" default="sons" include="wlbounds2structconsts.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="With" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Genarray" />
        </travuser>
      </traversal>
      <traversal id="WLA" name="With-Loop Analysis" default="sons" include="wlanalysis.h" >
        <travuser>
          <node name="With" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Genarray" />
         </travuser>
      </traversal>
      <traversal id="CUA" name="Check uniqueness annotations" default="sons" include="check_uniqueness_annotations.h">
        <travuser>
	  <node name="Objdef" />
	  <node name="Arg" />
	  <node name="Ret" />
	</travuser>
      </traversal>
      <traversal id="CU" name="Check uniqueness" default="sons" include="check_uniqueness.h">
        <travuser>
	  <node name="Avis" />
	  <node name="Block" />
    <node name="Code" />
	  <node name="Cond" />
	  <node name="Funcond" />
	  <node name="Fundef" />
	  <node name="Id" />
	  <node name="Ids" />
    <node name="Code" />
    <node name="Prf" />
	</travuser>
      </traversal>
      <traversal id="LOF" name="Lift OptFlags" default="sons" include="liftoptflags.h">
        <travuser>
	  <node name="Fundef" />
	</travuser>
      </traversal>
      <traversal id="PPI" name="Prepare Inline" default="sons" include="prepareinline.h">
        <travuser>
	  <node name="Fundef" />
	  <node name="Module" />
	  <node name="Ap" />
	  <node name="Fold" />
	</travuser>
      </traversal>
      <traversal id="DFR" name="Dead Function Removal" default="sons" include="DeadFunctionRemoval.h" >
        <travuser>
	  <node name="Module" />
	  <node name="Objdef" />
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Ap" />
	  <node name="Fold" />
	</travuser>
      </traversal>
      <traversal id="APC" name="Array Padding Collect" default="sons" include="pad_collect.h" >
        <travuser>
          <!-- <node name="Fundef" /> -->
          <!-- <node name="Let" /> -->
          <!-- <node name="Prf" /> -->
          <!-- <node name="Ap" /> -->
          <!-- <node name="With" /> -->
          <!-- <node name="Genarray" /> -->
          <!-- <node name="Modarray" /> -->
          <!-- <node name="Fold" /> -->
          <!-- <node name="Code" /> -->
          <!-- <node name="Id" /> -->
          <!-- <node name="Array" /> -->
        </travuser>
      </traversal>
      <traversal id="APT" name="Array Padding Transform" default="sons" include="pad_transform.h" >
        <travuser>
          <!-- <node name="Fundef" /> -->
          <!-- <node name="Arg" /> -->
          <!-- <node name="Block" /> -->
          <!-- <node name="Let" /> -->
          <!-- <node name="Vardec" /> -->
          <!-- <node name="Assign" /> -->
          <!-- <node name="Array" /> -->
          <!-- <node name="With" /> -->
          <!-- <node name="Genarray" /> -->
          <!-- <node name="Modarray" /> -->
          <!-- <node name="Fold" /> -->
          <!-- <node name="Code" /> -->
          <!-- <node name="Id" /> -->
          <!-- <node name="Ap" /> -->
          <!-- <node name="Prf" /> -->
        </travuser>
      </traversal>
      <traversal id="ETC" name="TypeConv Elimination" default="sons" include="elimtypeconv.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="INFNC" name="NeedCounter Inference" default="sons" include="inferneedcounters.h" >
	<travuser>
	  <node name="Block" />
	  <node name="Fundef" />
	  <node name="Prf" />
	  <node name="Avis" />
	  <node name="Id" />
	</travuser>
      </traversal>
      <traversal id="AS" name="Arithmetic Simplification" default="sons" include="arithmetic_simplification.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Prf" />
	</travuser>
      </traversal>
      <traversal id="AL" name="Associative Law Optimization" default="sons" include="associative_law.h" >
	<travuser>
	  <node name="Module" />
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Ids" />
	  <node name="Prf" />
	  <node name="With" />
	  <node name="Part" />
	  <node name="Code" />
	</travuser>
      </traversal>
      <traversal id="DL" name="Distributive Law Optimization" default="sons" include="distributive_law.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Ids" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="LS" name="Loop Scalarization" default="sons" include="loop_scalarization.h" >
        <travuser>
		  <node name="Module" />			
		  <node name="Fundef" />
          <node name="Arg" />
          <node name="Assign" />
          <node name="Ap" />
          <node name="Prf" />
          <node name="Id" />
        </travuser>
        <travnone>
          <node name="Withid" />
        </travnone>
      </traversal>
      <traversal id="LACSI" name="Lacfun Argument Scalarization" default="sons" include="loop_and_cond_scalarization_in.h" >
        <travuser>
		  <node name="Module" />			
		  <node name="Fundef" />
          <node name="Exprs" />
          <node name="Assign" />
          <node name="Ap" />
          <node name="Id" />
        </travuser>
        <travnone>
          <node name="Withid" />
        </travnone>
      </traversal>
      <traversal id="LACSO" name="Lacfun Result Scalarization" default="sons" include="loop_and_cond_scalarization_out.h" >
        <travuser>
		  <node name="Module" />			
		  <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Ap" />
          <node name="Id" />
          <node name="Return" />
          <node name="Cond" />
          <node name="Funcond" />
        </travuser>
        <travnone>
          <node name="Withid" />
        </travnone>
      </traversal>
      <traversal id="IDC" name="Insert Domain Constraints" default="sons" include="insert_domain_constraints.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Ids" />
          <node name="Cond" />
          <node name="With" />
          <node name="Part" />
          <node name="Code" />
          <node name="Id" />
          <node name="Avis" />
        </travuser>
      </traversal>
      <traversal id="ICC" name="Insert Conformity Checks" default="sons" include="insert_conformity_checks.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Prf" />
          <node name="Let" />
          <node name="With" />
          <node name="Generator" />
          <node name="Code" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Propagate" />
          <node name="Block" />
        </travuser>
      </traversal>
      <traversal id="SCC" name="Strip Conformity Checks" default="sons" include="strip_conformity_checks.h" >
        <travuser>
          <node name="Block" />
          <node name="Assign" />
          <node name="Prf" />
          <node name="Let" />
          <node name="Id" />
          <node name="Vardec" />
        </travuser>
      </traversal>
      <traversal id="USSAI" name="Undo SSAIV Transform" default="sons" include="undossaivtransform.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="With" />
	  <node name="Withid" />
	  <node name="Block" />
	  <node name="Vardec" />
	  <node name="Part" />
	  <node name="Id" />
	</travuser>
      </traversal>
      <traversal id="CF" name="Constant Folding" default="sons" include="constant_folding.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Let" />
          <node name="Ids" />
          <node name="Array" />
          <node name="Prf" />
          <node name="With" />
          <node name="Code" />
          <node name="Part" />
          <node name="Funcond" />
        </travuser>
        <travnone>
          <node name="Withid" />
        </travnone>
      </traversal>
      <traversal id="CSE" name="Common Subexpression Elimination" default="sons" include="SSACSE.h" >
	<travuser>
	  <node name="Module" />
	  <node name="Fundef" />
          <node name="Avis" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Code" />
	  <node name="Cond" />
	  <node name="With" />
	  <node name="Ap" />
          <node name="Ids" />
	  <node name="Id" />
	  <node name="Return" />
	</travuser>
        <travnone>
          <node name="Withid" />
        </travnone>
     </traversal>
      <traversal id="VP" name="Variable Propagation" default="sons" include="variable_propagation.h" >
	  <travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Id" />
      <node name="Avis" />
	  </travuser>
    </traversal>

      <traversal id="REA" name="Reorder EqualityOperator arguments" default="sons" include="reorder_equalityprf_arguments.h" >
	    <travuser>
	      <node name="Module" />
          <node name="Fundef" />
          <node name="Block" />    
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
        </travuser>
      </traversal>

      <traversal id="TGTL" name="Transform all gt and ge operators to lt and le operators " default="sons" include="transform_gtge_to_ltle.h" >
	    <travuser>
	      <node name="Module" />
          <node name="Fundef" />
          <node name="Block" />    
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
        </travuser>
      </traversal>

      <traversal id="CP" name="Constant Propagation" default="sons" include="constant_propagation.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Prf" />
	  <node name="Id" />
	  <node name="Array" />
	  <node name="Genarray" />
          <node name="Avis" />
	</travuser>
      </traversal>
      <traversal id="UPRF" name="Unroll PRFs" default="sons" include="prfunroll.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
        </travuser>
      </traversal>
    <traversal id="DCR" name="Dead Code Removal" default="sons" include="deadcoderemoval.h" >
       <travuser>
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Ret" />
          <node name="Vardec" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Annotate" />
          <node name="Let" />
          <node name="Ids" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Ap" />
          <node name="Return" />
          <node name="Module" />
        </travuser>
      </traversal>
    <traversal id="DCI" name="Dead Code Inference" default="sons" include="deadcodeinference.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Vardec" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Return" />
	  <node name="Cond" />
	  <node name="Let" />
	  <node name="Ap" />
	  <node name="Id" />
	  <node name="Ids" />
	  <node name="Code" />
	  <node name="Withid" />
	  <node name="Range" />
	</travuser>
      </traversal>
      <traversal id="DDEPEND" name="Detect Dependencies" default="sons" include="detectdependencies.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Prf" />
	  <node name="Id" />
	  <node name="With" />
          <node name="Code" />
	</travuser>
      </traversal>
      <traversal id="ESD" name="ElimSubDiv" default="sons" include="ElimSubDiv.h" >
	<travuser>
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Prf" />
	  <node name="Fundef" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="SAFA" name="SortAssociativeFunctionArguments" default="sons" include="sortassociativefunctionarguments.h" >
	<travuser>
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Prf" />
	  <node name="Fundef" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="IIPI" name="Iteration Invariant Parameter Inference" default="sons" include="iteration_invariant_parameter_inference.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Ap" />
	</travuser>
      </traversal>
      <traversal id="INL" name="Inline Traversal" default="sons" include="inlining.h" >
	<travuser>
	  <node name="Module" />
	  <node name="Assign" />
	  <node name="Fundef" />
	  <node name="Let" />
	  <node name="Ap" />
	</travuser>
      </traversal>
      <traversal id="LINL" name="LAC Inline Traversal" default="sons" include="lacinlining.h" >
	<travuser>
	  <node name="Module" />
	  <node name="Assign" />
	  <node name="Fundef" />
	  <node name="Let" />
	  <node name="Ap" />
	</travuser>
    </traversal>
    <traversal id="DLIR" name="Do-Loop Invariants Traversal" default="sons" include="loop_invariant_removal.h" >
      <travuser>
        <node name="Ids" />
        <node name="Assign" />
        <node name="Fundef" />
        <node name="Arg" />
        <node name="Vardec" />
        <node name="Block" />
        <node name="Let" />
        <node name="Id" />
        <node name="Ap" />
        <node name="Cond" />
        <node name="Return" />
        <node name="With" />
        <node name="Withid" />
        <node name="Exprs" />
        <node name="Module" />
      </travuser>
    </traversal>
    <traversal id="WLIR" name="Loop Invariants Traversal" default="sons" include="withloop_invariant_removal.h" >
      <travuser>
        <node name="Ids" />
        <node name="Assign" />
        <node name="Fundef" />
        <node name="Arg" />
        <node name="Vardec" />
        <node name="Block" />
        <node name="Let" />
        <node name="Module" />
        <node name="Id" />
        <node name="With" />
        <node name="Withid" />
      </travuser>
    </traversal>
    <traversal id="DLIRMOV" name="Loop Invariants Move Traversal" default="sons" include="loop_invariant_removal.h" >
      <travuser>
        <node name="Id" />
        <node name="Withid" />
        <node name="Assign" />
        <node name="Block" />
        <node name="Let" />
        <node name="Ids" />
      </travuser>
    </traversal>
    <traversal id="UFIV" name="Unshare index vectors in WL-folds" default="sons" include="unshare_fold_iv.h" >
      <travuser>
        <node name="Code" />
        <node name="Fundef" />
        <node name="Module" />
        <node name="With" />
        <node name="With2" />
        <node name="Part" />
        <node name="Exprs" />
      </travuser>
    </traversal>
    <traversal id="LUR" name="Loop Unrolling Traversal" default="sons" include="SSALUR.h" >
<travuser>
  <node name="Ap" />
  <node name="Assign" />
  <node name="Fundef" />
</travuser>
    </traversal>
    <traversal id="WLUR" name="With-Loop Unrolling Traversal" default="sons" include="SSAWLUnroll.h" >
<travuser>
        <node name="Ap" />
  <node name="Assign" />
        <node name="Fundef" />
  <node name="With" />
</travuser>
    </traversal>
    <traversal id="CS" name="Print Constraint Statistics" default="sons" include="constraint_statistics.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Prf" />
      </travuser>
    </traversal>
    <traversal id="TS" name="Print Type Statistics" default="sons" include="type_statistics.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Arg" />
        <node name="Vardec" />
      </travuser>
    </traversal>
    <traversal id="RDEPEND" name="Resolve Dependencies" default="sons" include="resolvedependencies.h" >
<travuser>
  <node name="Assign" />
  <node name="Prf" />
  </travuser>
    </traversal>
    <traversal id="RC" name="Remove Cast" default="sons" include="rmcasts.h" >
      <travuser>
        <node name="Let" />
        <node name="Cast" />
        <node name="Avis" />
        <node name="Array" />
        <node name="Ret" />
        <node name="Objdef" />
        <node name="Type" />
      </travuser>
    </traversal>
    <traversal id="SISI" name="Signature Simplification" default="sons" include="signature_simplification.h" >
<travuser>
  <node name="Assign" />
        <node name="Fundef" />
  <node name="Block" />
  <node name="Let" />
  <node name="Return" />
  <node name="Ret" />
        <node name="Ap" />
        <node name="Ids" />
        <node name="Id" />
        <node name="Exprs" />
  <node name="Arg" />
  <node name="Module" />
  </travuser>
    </traversal>
    <traversal id="EDFA" name="Eliminate Duplicate Fundef Args" default="sons" include="eliminate_duplicate_fundef_args.h" >
<travuser>
        <node name="Fundef" />
        <node name="Ap" />
  </travuser>
    </traversal>
    <traversal id="PETL" name="Propagate Extrema Thru Lacfuns" default="sons" include="propagate_extrema_thru_lacfuns.h" >
<travuser>
        <node name="Fundef" />
        <node name="Ap" />
        <node name="Block" />
        <node name="Cond" />
  </travuser>
    </traversal>
    <traversal id="TDEPEND" name="Tag Dependencies" default="sons" include="tagdependencies.h" >
<travuser>
  <node name="Assign" />
  <node name="Id" />
  <node name="With" />
  </travuser>
    </traversal>
    <traversal id="ISAA" name="Insert Symbolic Array Attributes" default="sons" 
      include="insert_symb_arrayattr.h" >
<travuser>
        <node name="Fundef" />
  <node name="Avis" />
  <node name="Block" />
  <node name="Assign" />
  <node name="Let" />
        <node name="Ids" />
        <node name="Id" />
        <node name="With" />
        <node name="Part" />
        <node name="Code" />
        <node name="Cond" />
        <node name="Funcond" />
        <node name="Ap" />
  </travuser>
      <travnone>
        <node name="Withid" />
      </travnone>
    </traversal>     
    <traversal id="MDE" name="Make Dim Expression" default="error"
      include="makedimexpr.h">
      <travuser>
        <node name="Id" />
        <node name="Funcond" />
        <node name="Ap" />
        <node name="Array" />
        <node name="Prf" />
        <node name="With" />
        <node name="Bool" />
        <node name="Char" />
        <node name="Num" />
        <node name="NumByte" />
  <node name="NumShort" />
  <node name="NumInt" />
  <node name="NumLong" />
  <node name="NumLonglong" />
  <node name="NumUbyte" />
  <node name="NumUshort" />
  <node name="NumUint" />
  <node name="NumUlong" />
        <node name="NumUlonglong" />
        <node name="Float" />
        <node name="Floatvec" />
        <node name="Double" />         
      </travuser>
    </traversal>
    <traversal id="MSE" name="Make Shape Expression" default="error"
      include="makeshapeexpr.h">
      <travuser>
        <node name="Id" />
        <node name="Funcond" />
        <node name="Ap" />
        <node name="Array" />
        <node name="Prf" />
        <node name="With" />
        <node name="Bool" />
        <node name="Char" />
        <node name="Num" />
        <node name="NumByte" />
  <node name="NumShort" />
  <node name="NumInt" />
  <node name="NumLong" />
  <node name="NumLonglong" />
  <node name="NumUbyte" />
  <node name="NumUshort" />
  <node name="NumUint" />
  <node name="NumUlong" />
        <node name="NumUlonglong" />
        <node name="Float" />
        <node name="Floatvec" />
        <node name="Double" />         
      </travuser>
    </traversal>
    <traversal id="ESV" name="Eliminate Shape Variables" default="sons" 
      include="elim_shapevars.h" >
<travuser>
        <node name="Fundef" />
  <node name="Avis" />
        <node name="Assign" />
        <node name="Let" />
        <node name="Id" />
        <node name="Prf" />
  </travuser>
      <travnone>
        <node name="Withid" />
      </travnone>
    </traversal>      
    <traversal id="RMV" name="Remove Vardecs" default="sons" 
      include="remove_vardecs.h" >
<travuser>
        <node name="Fundef" />
  <node name="Block" />
  <node name="Vardec" />
        <node name="Ids" />
  </travuser>
    </traversal>     
    <traversal id="WLPROP" name="With-Loop Propagation" default="sons" include="wlpropagation.h" >
      <travuser>
        <node name="Assign" />
        <node name="Fundef" />
        <node name="Ap" />
        <node name="Exprs" /> 
        <node name="Id" />
      </travuser>
    </traversal>
     <traversal id="WLSELC" name="With-Loop Selections Counter" default="sons" include="wlselcount.h" >
<travuser>
  <node name="With" />
        <node name="Fundef" />
  <node name="Code" />
  <node name="Ap" />
  <node name="Prf" /> 
      </travuser>
    </traversal>
    <traversal id="UESD" name="UndoElimSubDiv" default="sons" include="UndoElimSubDiv.h" >
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Block" />
        <node name="Let" />
        <node name="Assign" />
        <node name="Prf" />
      </travuser>
    </traversal>
    <traversal id="WLI" name="With-Loop-Interference" default="sons" include="SSAWLI.h" >
<travuser>
  <node name="Fundef" />
  <node name="Assign" />
  <node name="Id" />
        <node name="Let" />
        <node name="Cond" />
  <node name="With" />
  <node name="Modarray" />
  <node name="Part" />
  <node name="Generator" />
        <node name="Code" />
</travuser>
    </traversal>
   <traversal id="WLF" name="With-Loop-Folding" default="sons" include="SSAWLF.h" >
     <travuser>
       <node name="Module" />
       <node name="Fundef" />
       <node name="Assign" />
       <node name="Id" />
       <node name="Let" />
       <node name="With" />
       <node name="Code" />
     </travuser>
   </traversal>
   <traversal id="PWLFI" name="Polyhedral With-Loop-Folding Inference" default="sons" include="polyhedral_wlfi.h" >
     <travuser>
        <node name="Fundef"  />
        <node name="Block"   />
        <node name="Assign"  />
        <node name="Let"  />
        <node name="Id"  />
        <node name="Cond" />
        <node name="With"    />
        <node name="Modarray"    />
        <node name="Part"    />
        <node name="Prf"     />
     </travuser>
   </traversal>
   <traversal id="AWLFI" name="Algebraic With-Loop-Folding Inference" default="sons" include="algebraic_wlfi.h" >
     <travuser>
        <node name="Fundef"  />
        <node name="Block"   />
        <node name="Assign"  />
        <node name="Let"  />
        <node name="Id"  />
        <node name="Cond" />
        <node name="With"    />
        <node name="Modarray"    />
        <node name="Part"    />
        <node name="Prf"     />
     </travuser>
   </traversal>
   <traversal id="CUBSL" name="Algebraic With-Loop-Folding Cube Slicer" default="sons" include="cubeslicer.h" >
     <travuser>
        <node name="Fundef"  />
        <node name="Assign" />
        <node name="Let"     />
        <node name="With"    />
        <node name="Part"    />
        <node name="Prf"     />
     </travuser>
   </traversal>
   <traversal id="AWLF" name="Algebraic With-Loop-Folding" default="sons" include="algebraic_wlf.h" >
     <travuser>
        <node name="Fundef"  />
        <node name="Assign"  />
        <node name="Let"  />
        <node name="With"    />
        <node name="Code"    />
        <node name="Part"    />
        <node name="Prf"     />
     </travuser>
   </traversal>
   <traversal id="WLCC" name="With-Loop Cost Check" default="sons" include="wl_cost_check.h" >
     <travuser>
        <node name="With"    />
        <node name="Code"    />
        <node name="Prf"     />
        <node name="Ap"      />
     </travuser>
   </traversal>
   <traversal id="WLNC" name="With-Loop NeedCount Check" default="sons" include="wl_needcount.h" >
     <travuser>
        <node name="Fundef"    />
        <node name="Block"     />
        <node name="Avis"      />
        <node name="With"      />
        <node name="Part"      />
        <node name="Code"      />
        <node name="Prf"       />
        <node name="Ap"        />
        <node name="Id"        />
     </travuser>
   </traversal>
   <traversal id="WLFS" name="With-Loop-Fusion" default="sons" include="WithloopFusion.h" >
<travuser>
  <node name="Fundef" />
  <node name="Block" />
  <node name="Assign" />
  <node name="Id" />
  <node name="With" />
  <node name="Genarray" />
  <node name="Modarray" />
  <node name="Fold" />
  <node name="Part" />
  <node name="Generator" />
</travuser>
    </traversal>
    <traversal id="WLSIMP" name="With-Loop Simplification" default="sons" include="wlsimplification.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Let" />
        <node name="With" />
        <node name="Genarray" />
        <node name="Modarray" />
        <node name="Fold" />
        <node name="Break" />
        <node name="Propagate" />
        <node name="Code" />
        <node name="Part" />
        <node name="Generator" />
      </travuser>
    </traversal>
    <traversal id="CWLE" name="Copy With-Loop Elimination" default="sons" include="copywlelim.h">
      <travuser>
        <node name="Fundef" />
        <node name="With" />
        <node name="Let" />
        <node name="Code" />
        <node name="Assign" />
        <node name="Ids" />
        <node name="Arg" />
      </travuser>
    </traversal>
    <traversal id="WLS" name="With-Loop Scalarization" default="sons" include="wls.h">
      <travuser>
        <node name="Assign" />
        <node name="Fundef" />
        <node name="Module" />
        <node name="With" />
      </travuser>
    </traversal>
    <traversal id="WLSC" name="With-Loop Scalarization Check traversal" default="sons" include="wls.h">
      <travuser>
        <node name="Block" />
        <node name="Code" />
        <node name="Default" />
        <node name="Id" />
        <node name="Part" />
        <node name="With" />
        <node name="Withid" />
        <node name="Generator" />
        <node name="Genarray" />
        <node name="Modarray" />
        <node name="Fold" />
        <node name="Propagate" />
      </travuser>
    </traversal>
    <traversal id="WLSW" name="With-Loop Scalarization Withloopification traversal" default="sons" include="wls.h">
      <travuser>
        <node name="Code" />
        <node name="Id" />
        <node name="Let" />
        <node name="Part" />
        <node name="With" />
        <node name="Withid" />
      </travuser>
    </traversal>
    <traversal id="WLSB" name="With-Loop Scalarization Build traversal" default="sons" include="wls.h">
      <travuser>
        <node name="Code" />
        <node name="Generator" />
        <node name="Part" />
        <node name="With" />
        <node name="Withid" />
        <node name="Genarray" />
        <node name="Modarray" />
      </travuser>
    </traversal>
    <traversal id="IVESPLIT" name="Index Vector Elimination (Split Selections)" default="sons" include="ive_split_selections.h">
      <travuser>
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Prf" />
      </travuser>
    </traversal>
    <traversal id="IVESLI" name="Index Vector Elimination (Split Loop Invariants)" default="sons" include="ive_split_loop_invariants.h">
      <travuser>
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Prf" />
        <node name="With" />
        <node name="With2" />
      </travuser>
    </traversal>
    <traversal id="IVERAS" name="Index Vector Elimination (Reuse WL-offsets and Scalarize)" default="sons" include="ive_reusewl_and_scalarize.h">
      <travuser>
  <node name="Fundef" />
  <node name="Assign" />
  <node name="Let" />
  <node name="Prf" />
  <node name="With" />
  <node name="Part" />
  <node name="Code" />
      </travuser>
    </traversal>
    <traversal id="WLFLT" name="Flattening multi-dimensional withloops" default="sons" include="withloop_flattening.h">
      <travuser>
  <node name="Id" />
  <node name="Avis" />
  <node name="With" />
  <node name="Genarray" />
  <node name="Assign" />
  <node name="Let" />
  <node name="Block" />
  <node name="Fundef" />
  <node name="Withid" />
  <node name="Generator" />
  <node name="Ids" />
      </travuser>
    </traversal>
    <traversal id="WLIDX" name="Annotate withloop idxs" default="sons" include="wlidxs.h">
      <travuser>
        <node name="Fundef" />
        <node name="Let" />
        <node name="With" />
        <node name="Withid" />
      </travuser>
    </traversal>
    <traversal id="WLTRA" name="With-Loop Transformation traversal" default="sons" include="wltransform.h">
      <travuser>
        <node name="Code" />
        <node name="Let" />
        <node name="With" />
      </travuser>
    </traversal>
    <traversal id="RW3" name="Remove With3s" default="sons" include="remove_with3.h">
      <travuser>
        <node name="Assign" />
        <node name="With3" />
        <node name="Range" />
      </travuser>
    </traversal>
    <traversal id="WLSD" name="With-Loop Split Dimensions" default="sons" include="wl_split_dimensions.h">
      <travuser>
  <node name="Fundef" />
  <node name="Assign" />
  <node name="Let" />
  <node name="Block" />
  <node name="With" />
  <node name="With2" />
  <node name="Withid" />
  <node name="WLseg" />
  <node name="WLstride" />
  <node name="WLgrid" />
  <node name="WLblock" />
</travuser>
<traverror>
  <!-- blocking is not supported for now. -->
  <node name="WLblock" />
  <node name="WLublock" />
</traverror>
    </traversal>
    <traversal id="ASS" name="Add Syncs" default="sons" include="addSyncs.h">
      <travuser>
        <node name="Vardec" />
        <node name="Range" />
        <node name="With3" />
      </travuser>
    </traversal>
    <traversal id="EMAA" name="Alias analysis" default="none" include="aliasanalysis.h" >
      <travuser>
        <node name="Ap" />
        <node name="Arg" />
        <node name="Assign" />
        <node name="Code" />
        <node name="Cond" />
        <node name="Fold" />
        <node name="Funcond" />
        <node name="Fundef" />
        <node name="Genarray" />
        <node name="Id" />
        <node name="Let" />
        <node name="Modarray" />
        <node name="Prf" />
        <node name="With" />
        <node name="With2" />
        <node name="With3" />
        <node name="Vardec" />
      </travuser>
      <travsons>
        <node name="Module" />
        <node name="Block" />
        <node name="Exprs" />
        <node name="Range" />
      </travsons>
    </traversal>
    <traversal id="EMLR" name="Loop reuse" default="none" include="loopreuseopt.h">
      <travuser>
        <node name="Ap" />
        <node name="Assign" />
        <node name="Fundef" />
      </travuser>
      <travsons>
        <node name="Module" />
        <node name="Let" />
        <node name="With" />
        <node name="With2" />
        <node name="Cond" />
        <node name="Code" />
        <node name="Block" />
      </travsons>
    </traversal>
    <traversal id="EMLRO" name="Loop reuse optimization" default="none" include="loopreuseopt.h">
      <travuser>
        <node name="Ap" />
        <node name="Arg" />
        <node name="Fundef" />
        <node name="Id" />
        <node name="Prf" />
      </travuser>
      <travsons>
        <node name="Exprs" />
        <node name="Module" />
        <node name="Let" />
        <node name="Assign" />
        <node name="With" />
        <node name="With2" />
        <node name="Cond" />
        <node name="Code" />
        <node name="Block" />
      </travsons>
    </traversal>
    <traversal id="EMLAO" name="Loop allocation optimization" default="sons" include="loopallocopt.h">
      <travuser>
        <node name="Ap" />
        <node name="Assign" />
        <node name="Fundef" />
        <node name="Arg" />
        <node name="Modarray" />
        <node name="Prf" />
        <node name="With" />
        <node name="With2" />
      </travuser>
    </traversal>
    <traversal id="ASD" name="AUD SCL distinction" 
               default="sons" include="audscldist.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Let" />
        <node name="Ap" />
        <node name="Cond" />
        <node name="With" />
        <node name="With2" />
        <node name="Code" />
        <node name="Prf" />
        <node name="Funcond" />
      </travuser>
<traverror>
        <node name="Do" />
</traverror>
    </traversal>
    <traversal id="EMAL" name="Allocation" default="none" include="alloc.h" >
      <travuser>
        <node name="Num" />
        <node name="NumByte" />
        <node name="NumShort" />
        <node name="NumInt" />
        <node name="NumLong" />
        <node name="NumLonglong" />
        <node name="NumUbyte" />
        <node name="NumUshort" />
        <node name="NumUint" />
        <node name="NumUlong" />
        <node name="NumUlonglong" />
        <node name="Char" />
        <node name="Bool" />
        <node name="Float" />
        <node name="Floatvec" />
        <node name="Double" />

        <node name="Ap" />
        <node name="Array" />
        <node name="Assign" />
        <node name="Break" />
        <node name="Code" />
        <node name="Fold" />
        <node name="Funcond" />
        <node name="Fundef" />
        <node name="Genarray" />
        <node name="Id" />
        <node name="Let" />
        <node name="Modarray" />
        <node name="Prf" />
        <node name="Propagate" />
        <node name="With" />
        <node name="With2" />
        <node name="Withid" />
        <node name="Withs" />
        <node name="With3" />
        <node name="Range" />
      </travuser>
      <travsons>
        <node name="Module" />
        <node name="Cond" />
        <node name="Block" />
      </travsons>
    </traversal>
    <traversal id="EMDR" name="Data reuse" default="none" include="datareuse.h" >
      <travuser>
        <node name="Ap" />
        <node name="Assign" />
        <node name="Withid" />
        <node name="With" />
        <node name="With2" />
        <node name="With3" />
        <node name="Range" />
        <node name="Code" />
        <node name="Cond" />
        <node name="Fundef" />
        <node name="Let" />
        <node name="Prf" />
        <node name="Genarray" />
        <node name="Modarray" />
      </travuser>
      <travsons>
        <node name="Module" />
        <node name="With" />
        <node name="With2" />
        <node name="Block" />
      </travsons>
    </traversal>
    <traversal id="PEW3" name="Prune Empty With3" default="sons" include="prune_empty_with3.h">
      <travuser>
        <node name="With3"/>
        <node name="Range"/>
        <node name="Id"/>
        <node name="Assign"/>
        <node name="Let"/>
      </travuser>
    </traversal>
    <traversal id="EMEC" name="Explicit Copy" default="none" include="explicitcopy.h" >
      <travuser>
        <node name="Assign" />
        <node name="Fundef" />
        <node name="Ap" />
        <node name="Prf" />
      </travuser>
      <travsons>
        <node name="Module" />
        <node name="Let" />
        <node name="With" />
        <node name="With2" />
        <node name="Cond" />
        <node name="Code" />
        <node name="Block" />
      </travsons>
    </traversal>
    <traversal id="EMRACC" name="Remove Alias Results from Conformity Checks" default="sons" include="rm_alias_results_cc.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Arg" />
        <node name="Block" />
        <node name="Vardec" />
        <node name="Assign" />
        <node name="Let" />
        <node name="Prf" />
        <node name="Id" />
      </travuser>
    </traversal>
    <traversal id="SRCE" name="Scope-based reuse-candidate elimination" default="sons" include="scoperce.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Arg" />
        <node name="Assign" />
        <node name="Let" />
        <node name="Ids" />
        <node name="Ap" />
        <node name="Code" />
        <node name="Prf" />
        <node name="Exprs" />
      </travuser>
    </traversal>
    <traversal id="FRC" name="Filter Reuse Candidates" default="sons" include="filterrc.h" >
      <travuser>
        <node name="Ap" />
        <node name="Arg" />
        <node name="Assign" />
        <node name="Break" />
        <node name="Code" />
        <node name="Cond" />
        <node name="Fold" />
        <node name="Funcond" />
        <node name="Fundef" />
        <node name="Genarray" />
        <node name="Id" />
        <node name="Modarray" />
        <node name="Prf" />
        <node name="Range" />
        <node name="With" />
        <node name="With2" />
        <node name="With3" />
      </travuser>
      <travnone>
        <node name="Objdef" />
      </travnone>   
    </traversal>
    <traversal id="FPRC" name="Filter Partial Reuse Candidates" default="sons" include="filter_partial_reuse_candidates.h" >
      <travuser>
        <node name="Block" />
        <node name="Avis" />
        <node name="Assign" />
        <node name="With" />
        <node name="Genarray" />
        <node name="Id" />
        <node name="Prf" />
</travuser>
<traverror>
        <node name="With2" />
</traverror>
    </traversal>
    <traversal id="EMIA" name="Interface Analysis" default="none" include="interfaceanalysis.h" >
      <travuser>
        <node name="Ap" />
        <node name="Arg" />
        <node name="Assign" />
        <node name="Block" />
        <node name="Cond" />
        <node name="Fold" />
        <node name="Funcond" />
        <node name="Fundef" />
        <node name="Genarray" />
        <node name="Id" />
        <node name="Let" />
        <node name="Modarray" />
        <node name="Ret" />
        <node name="Return" />
        <node name="Vardec" />
        <node name="With" />
        <node name="With2" />
      </travuser>
      <travsons>
        <node name="Module" />
        <node name="Exprs" />
      </travsons>
    </traversal>
    <traversal id="EMRB" name="Reuse branching" default="none" include="reusebranching.h" >
      <travuser>
        <node name="Assign" />
        <node name="Code" />
        <node name="Fundef" />
        <node name="Genarray" />
        <node name="Ids" />
        <node name="Modarray" />
        <node name="Prf" />
        <node name="With" />
        <node name="With2" />
        <node name="With3" />
        <node name="Range" />
        <node name="Withid" />
      </travuser>
      <travsons>
        <node name="Module" />
        <node name="Let" />
        <node name="Cond" />
        <node name="Block" />
        <node name="Fold" />
      </travsons>
    </traversal>
    <traversal id="EMRI" name="Reuse inference" default="sons" include="reuse.h" >
      <travuser>
        <node name="Assign" />
        <node name="Let" />
        <node name="Prf" />
        <node name="Genarray" />
        <node name="Modarray" />
      </travuser>
    </traversal>
    <traversal id="WRCI" name="With-loop reuse candidate inference" default="sons" include="wrci.h">
      <travuser>
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Let" />
        <node name="With" />     
        <node name="Genarray" />     
        <node name="Modarray" />     
        <node name="Fold" />     
        <node name="Generator" />
      </travuser>
    </traversal>
    <traversal id="RWO" name="Reuse With-loop arrays with offsets" default="sons" include="reusewithoffset.h">
      <travuser>
        <node name="Prf" />
        <node name="Id" />
        <node name="Ids" />
      </travuser>
    </traversal>
    <traversal id="PRA" name="Reuse With-loop arrays based on polyhedral model" default="sons" include="polyhedral_reuse_analysis.h">
      <travuser>
        <node name="Prf" />
        <node name="Part" />
        <node name="Assign" />
        <node name="With" />
        <node name="Ap" />
        <node name="Cond" />
        <node name="Fundef" />
      </travuser>
    </traversal>
    <traversal id="INB" name="Identify noop conditional branch" default="sons" include="identify_noop_branch.h">
      <travuser>
        <node name="Code" />
        <node name="Part" />
        <node name="Assign" />
        <node name="Funcond" />
        <node name="Ap" />
        <node name="Cond" />
        <node name="Fundef" />
      </travuser>
    </traversal>
    <traversal id="RNB" name="Remove noop conditional branch" default="sons" include="remove_noop_branch.h">
      <travuser>
        <node name="Code" />
        <node name="Let" />
        <node name="Assign" />
        <node name="With" />
        <node name="With2" />
        <node name="Cond" />
      </travuser>
    </traversal>
    <traversal id="REUSE" name="Reuse With Arrays" default="sons" include="ReuseWithArrays.h">
      <travuser>
        <node name="Let" />
        <node name="Prf" />
        <node name="Id" />
        <node name="Ids" />
        <node name="Genarray" />
        <node name="Modarray" />
        <node name="Fold" />
        <node name="With" />     
        <node name="Part" />     
      </travuser>
    </traversal>
    <traversal id="EMSR" name="Static Reuse" default="none" include="staticreuse.h" >
      <travuser>
        <node name="Prf" />
      </travuser>
      <travsons>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Let" />
        <node name="Withs" />
        <node name="With" />
        <node name="With2" />
        <node name="Code" />
        <node name="Block" />
        <node name="Cond" />
      </travsons>
    </traversal>
    <traversal id="EMIP" name="Inplace Computation" default="sons" include="inplacecomp.h">
      <travuser>
        <node name="Ap" />
        <node name="Code" />
        <node name="Cond" />
        <node name="Fundef" />
        <node name="Let" />
        <node name="Prf" />
        <node name="Range" />
      </travuser>
      <travnone>
        <node name="Objdef" />
      </travnone>
    </traversal>
    <traversal id="EMIPH" name="Inplace Computation helper" default="sons" include="inplacecomp.h">
      <travuser>
        <node name="Ap" />
        <node name="Assign" />
        <node name="Id" />
      </travuser>
      <travnone>
        <node name="Objdef" />
      </travnone>
    </traversal>
    <traversal id="RCI" name="Reference Counting Inference" default="sons" include="referencecounting.h" >
      <travuser>
        <node name="Ap" />
        <node name="Array" />
        <node name="Assign" />
        <node name="Code" />
        <node name="Cond" />
        <node name="Fold" />
        <node name="Funcond" />
        <node name="Fundef" />
        <node name="Genarray" />
        <node name="Id" />
        <node name="Ids" />
        <node name="Let" />
        <node name="Modarray" />
        <node name="Prf" />
        <node name="Propagate" />
        <node name="Range" />
        <node name="Return" />
        <node name="Withs" />
        <node name="With" />
        <node name="With2" />
        <node name="With3" />
        <node name="Withid" />
      </travuser>
      <travnone>
        <node name="Objdef" />
        <node name="Arg" />
        <node name="Vardec" />
      </travnone>
    </traversal>
    <traversal id="RCM" name="Reference counting minimization" default="sons" include="rcminimize.h" >
      <travuser>
        <node name="Ap" />
        <node name="Arg" />
        <node name="Assign" />
        <node name="Code" />
        <node name="Cond" />
        <node name="Funcond" />
        <node name="Fundef" />
        <node name="Id" />
        <node name="Ids" />
        <node name="Let" />
        <node name="Prf" />
        <node name="Range" />
        <node name="Return" />
      </travuser>
      <travnone>
        <node name="Objdef" />
        <node name="Withid" />
      </travnone>
    </traversal>
    <traversal id="EMRCO" name="Reference counting optimizations" default="none" include="rcopt.h" >
      <travuser>
        <node name="Assign" />
        <node name="Block" />
        <node name="Fold" />
        <node name="Fundef" />
        <node name="Genarray" />
        <node name="Let" />
        <node name="Modarray" />
        <node name="Prf" />
      </travuser>
      <travsons>
        <node name="Module" />
        <node name="Cond" />
        <node name="Withs" />
        <node name="With" />
        <node name="With2" />
        <node name="With3" />
        <node name="Range" />
        <node name="Code" />
      </travsons>
    </traversal>
    <traversal id="MVSMI" name="Move shared memory management instructions" 
      default="sons" include="movesharedmeminstr.h" >
      <travuser>
        <node name="Assign" />
        <node name="Fundef" />
        <node name="Ap" />
      </travuser>
    </traversal>
    <traversal id="COSMI" name="Collect shared memory management instructions"
      default="sons" include="movesharedmeminstr.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Ret" />
        <node name="Arg" />
        <node name="Block" />
        <node name="Vardec" />
        <node name="Assign" />
        <node name="Let" />
        <node name="Prf" />
        <node name="With2" />
        <node name="Genarray" />
        <node name="Modarray" />
        <node name="Fold" />
      </travuser>
      <traverror>
        <node name="With" />
      </traverror>
    </traversal>
    <traversal id="EMRE" name="Reuse elimination" default="none" include="reuseelimination.h" >
      <travuser>
        <node name="Assign" />
        <node name="Block" />
        <node name="Cond" />
        <node name="Fundef" />
        <node name="Genarray" />
        <node name="Let" />
        <node name="Modarray" />
        <node name="Prf" />
        <node name="Vardec" />
      </travuser>
      <travsons>
        <node name="Module" />
        <node name="Withs" />
        <node name="With" />
        <node name="With2" />
        <node name="With3" />
        <node name="Range" />
        <node name="Fold" />
        <node name="Code" />
      </travsons>
    </traversal>
   <traversal id="MTCM" name="Multithreading cost model" default="sons" include="cost_model.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Block" />
        <node name="Assign" />
        <node name="Let" />
        <node name="With2" />
        <node name="With" />
        <node name="Withs" />
        <node name="Fold" />
        <node name="Genarray" />
        <node name="Modarray" />
      </travuser>
    </traversal>
    <traversal id="MTSTF" name="Create MT/ST functions (programs)" default="sons" include="create_mtst_funs.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Cond" />
        <node name="With2" />
        <node name="Ap" />
        <node name="Fold" />
      </travuser>
    </traversal>
    <traversal id="MTSTFMOD" name="Create MT/ST functions (modules)" default="sons" include="create_mtst_funs_module.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Cond" />
        <node name="With2" />
        <node name="Ap" />
        <node name="Fold" />
      </travuser>
    </traversal>
    <traversal id="RMTSTF" name="Restore ST/MT/XT functions (modules)" default="sons" include="restore_mtst_funs.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
      </travuser>
    </traversal>
    <traversal id="MTSPMDF" name="Create SPMD functions" default="sons" include="create_spmd_funs.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Do" />
        <node name="Withs" />
        <node name="With2" />
        <node name="With" />
        <node name="Let" />
        <node name="Id" />
        <node name="Ids" />
        <node name="Withid" />
      </travuser>
    </traversal>
     <traversal id="RMPR" name="Remove propagates" default="sons" include="remove_propagates.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Assign" />
        <node name="With2" />
        <node name="Prf" />
      </travuser>
    </traversal>
     <traversal id="MTDCR" name="MT dead code removal" default="sons" include="mtdcr.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Block" />
        <node name="Assign" />
        <node name="Let" />
        <node name="Ids" />
        <node name="Id" />
        <node name="Prf" />
      </travuser>
    </traversal>
     <traversal id="MTRMI" name="Restore memory instructions" default="sons" include="restore_mem_instr.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Block" />
        <node name="Assign" />
        <node name="Withs" />
        <node name="With" />
        <node name="With2" />
        <node name="Id" />
        <node name="Withid" />
      </travuser>
    </traversal>
    <traversal id="MTAS" name="Annotate scheduling" default="sons" include="annotate_scheduling.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="With2" />
        <node name="Withs" />
        <node name="WLseg" />
      </travuser>
    </traversal>
    <traversal id="SSPMDLS" name="Set SPMD linksign" default="sons" include="set_spmd_linksign.h">
      <travuser>
        <node name="Arg" />
        <node name="Id" />
        <node name="Exprs" />
        <node name="Return" />
        <node name="Propagate" />
        <node name="Genarray" />
        <node name="Modarray" />
        <node name="Break" />
        <node name="With2" />
        <node name="Withs" />
        <node name="Let" />
        <node name="Ret" />
        <node name="Fundef" />
        <node name="Module" />
      </travuser>
    </traversal>
    <traversal id="TEM" name="Tag Executionmode" default="sons" include="tag_executionmode.h">
      <travuser>
        <node name="Ap" />
        <node name="Array" />
        <node name="Assign" />
        <node name="Let" />
        <node name="Prf" />
        <node name="With2" />
      </travuser>
      <travsons>
      </travsons>
      <travnone>
      </travnone>
      <traverror>
      </traverror>
    </traversal>
    <traversal id="CRWIW" name="Create Withinwith Replication" default="sons" include="create_withinwith.h">
      <travuser>
        <node name="Ap" />
        <node name="Assign" />
        <node name="Fundef" />
      </travuser>
      <travsons>
      </travsons>
      <travnone>
      </travnone>
      <traverror>
      </traverror>
    </traversal>
    <traversal id="PEM" name="Propagate Executionmode" default="sons" include="propagate_executionmode.h">
      <travuser>
        <node name="Ap" />
        <node name="Assign" />
        <node name="Cond" />
        <node name="Fundef" />
        <node name="With2" />
      </travuser>
      <travsons>
      </travsons>
      <travnone>
      </travnone>
      <traverror>
      </traverror>
    </traversal>
    <traversal id="CDFG" name="Create Dataflowgraph" default="sons" include="create_dataflowgraph.h">
      <travuser>
        <node name="Assign" />
        <node name="Block" />
        <node name="Id" />
        <node name="Withid" />
      </travuser>
      <travsons>
      </travsons>
      <travnone>
      </travnone>
      <traverror>
      </traverror>
    </traversal>
    <traversal id="ASMRA" name="Assignments Rearrange" default="sons" include="assignments_rearrange.h">
      <travuser>
        <node name="Block" />
      </travuser>
      <travsons>
      </travsons>
      <travnone>
      </travnone>
      <traverror>
      </traverror>
    </traversal>
    <traversal id="CRECE" name="Create Cells" default="sons" include="create_cells.h">
      <travuser>
        <node name="Assign" />
        <node name="Block" />
      </travuser>
      <travsons>
      </travsons>
      <travnone>
      </travnone>
      <traverror>
      </traverror>
    </traversal>
    <traversal id="CEGRO" name="Cell Growth" default="sons" include="cell_growth.h">
      <travuser>
        <node name="Assign" />
        <node name="Block" />
      </travuser>
      <travsons>
      </travsons>
      <travnone>
      </travnone>
      <traverror>
      </traverror>
    </traversal>
    <traversal id="REPFUN" name="Replicate Functions" default="sons" include="replicate_functions.h">
      <travuser>
        <node name="Ap" />
        <node name="Assign" />
        <node name="EX" />
        <node name="Fundef" />
        <node name="Module" />
        <node name="MT" />
        <node name="ST" />
      </travuser>
      <travsons>
      </travsons>
      <travnone>
      </travnone>
      <traverror>
      </traverror>
    </traversal>
    <traversal id="CONCEL" name="Consolidate Cells" default="sons" include="consolidate_cells.h">
      <travuser>
        <node name="EX" />
        <node name="Fundef" />
        <node name="MT" />
        <node name="ST" />
      </travuser>
      <travsons>
      </travsons>
      <travnone>
      </travnone>
      <traverror>
      </traverror>
    </traversal>
    <traversal id="REC" name="Remove External Code" default="sons" include="remove_external_code.h" >
      <travuser>
  <node name="Fundef" />
</travuser>
    </traversal>
    <traversal id="FSFS" name="SPMD Function Signature Fix" default="sons" include="spmdfun_fix.h">
      <travuser>
        <node name="Ap" />
        <node name="Fundef" />
        <node name="Let" />
        <node name="Return" />
        <node name="With2" />
      </travuser>
    </traversal>
    <traversal id="RERA" name="Restore Reference Args" default="sons" include="restore_reference_args.h">
      <travuser>
  <node name="Ap" />
  <node name="Assign" />
  <node name="Let" />
  <node name="Return" />
  <node name="Fundef" />
  <node name="Prf" />
  <node name="Id" />
  <node name="Ids" />
  <node name="Module" />
  <node name="With" />
  <node name="With2" />
  <node name="Block" />
</travuser>
    </traversal>
    <traversal id="RESO" name="Restore Global Objects" default="sons" include="restore_objects.h">
      <travuser>
  <node name="Ap" />
  <node name="Prf" />
  <node name="Id" />
  <node name="Assign" />
  <node name="Let" />
  <node name="Block" />
  <node name="Fundef" />
  <node name="Module" />
  <node name="Propagate" />
</travuser>
    </traversal>
    <traversal id="SLS" name="Set Linksign" default="sons" include="setlinksign.h" >
      <travuser>
  <node name="Module" />
  <node name="Fundef" />
  <node name="Arg" />
  <node name="Ret" />
</travuser>
    </traversal>
    <traversal id="MMV" name="MarkMemVals" default="sons" include="markmemvals.h" >
      <travuser>
        <node name="Block" />
        <node name="Break" />
        <node name="Code" />
        <node name="Do" />
        <node name="Fold" />
        <node name="Fundef" />
        <node name="Module" />
        <node name="Genarray" />
        <node name="Propagate" />
        <node name="Id" />
        <node name="Ids" /> 
        <node name="Ap" />
        <node name="Let" />
        <node name="Modarray" />
        <node name="Prf" />
        <node name="With" />
        <node name="With2" />
        <node name="With3" />
        <node name="WLseg" />
        <node name="Return" />
        <node name="Ret" />
      </travuser>
    </traversal>
    <traversal id="MSA" name="MarkSubAlloc" default="sons" include="marksuballoc.h" >
      <travuser>
        <node name="Prf" />
        <node name="Let" />
        <node name="Ids" />
      </travuser>
    </traversal>
    <traversal id="DVR" name="Dead vardec removal" default="sons" include="dead_vardec_removal.h" >
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Block" />
        <node name="Id" />
        <node name="Ids" />
        <node name="Vardec" />
      </travuser>
    </traversal>
    <traversal id="MOI" name="Manage object initialisers" default="sons" include="manage_object_initialisers.h" >
      <travuser>
        <node name="Assign" />
        <node name="Id" />
        <node name="Fundef" />
      </travuser>
    </traversal>
    <traversal id="FPC" name="Function Precompilation" default="sons" include="functionprecompile.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Let" />
        <node name="Ret" />
        <node name="Arg" />
        <node name="Ap" />
        <node name="Range" />
      </travuser>
    </traversal>
    <traversal id="TCP" name="Type Conversions" default="sons" include="typeconv_precompile.h">
      <travuser>
        <node name="Module" />
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Ap" />
        <node name="Range" />
      </travuser>
    </traversal>
    <traversal id="MNG" name="Mark NoOp Grids" default="sons" include="mark_noop_grids.h">
      <travuser>
        <node name="WLgrid" />
        <node name="WLstride" />
        <node name="WLblock" />
        <node name="WLublock" />
        <node name="Code" />
        <node name="Let" />
      </travuser>
    </traversal>
    <traversal id="RID" name="Rename Identifiers" default="sons" include="renameidentifiers.h">
      <travuser>
        <node name="Module" />
        <node name="Typedef" />
        <node name="Objdef" />
        <node name="Fundef" />
        <node name="Arg" />
        <node name="Return" />
        <node name="Ap" />
        <node name="Icm" />
        <node name="WLseg" />
        <node name="Avis" />
      </travuser>
    </traversal>
    <traversal id="OFP" name="OpenMP Find Private" default="sons" include="omp_find_private.h">
      <travuser>
        <node name="Module" />
        <node name="With" />
        <node name="With2" />
        <node name="Fundef" />
        <node name="Let" />
        <node name="Ids" />
        <node name="Id" />
        <node name="Withid" />
      </travuser>
    </traversal>
    <traversal id="RCS" name="Resolve Code Sharing" default="sons" include="resolve_code_sharing.h">
      <travuser>
        <node name="With" />
        <node name="With2" />
        <node name="Code" />
        <node name="Part" />
        <node name="WLgrid" />
      </travuser>
    </traversal>
    <traversal id="COMP" name="Compile" default="sons" include="compile.h">
      <travuser>
        <node name="Ap" />
        <node name="Array" />
        <node name="Assign" />
        <node name="Block" />
        <node name="Cond" />
        <node name="Fundef" />
        <node name="Id" />
        <node name="Let" />
        <node name="Do" />
        <node name="Module" />
        <node name="Objdef" />
        <node name="Prf" />
        <node name="Return" />
        <node name="Typedef" />
        <node name="Vardec" />
        <node name="Num" />
        <node name="NumByte" />
  <node name="NumShort" />
  <node name="NumInt" />
  <node name="NumLong" />
  <node name="NumLonglong" />
  <node name="NumUbyte" />
  <node name="NumUshort" />
  <node name="NumUint" />
  <node name="NumUlong" />
        <node name="NumUlonglong" />
        <node name="Char" />
        <node name="Bool" />
        <node name="Float" />
        <node name="Floatvec" />
        <node name="Double" />
        <node name="With" />
        <node name="Withid" />
        <node name="Part" />
        <node name="Generator" />
        <node name="With2" />
        <node name="WLseg" />
        <node name="WLblock" />
        <node name="WLublock" />
        <node name="WLstride" />
        <node name="WLgrid" />
        <node name="Code" />
        <node name="With3" />
        <node name="Range" />
      </travuser>
      <travnone>
        <node name="Icm">
          <description>
            Using TRAVsons, COMPid would be applied to ICM_ARG1.
          </description>
        </node>
      </travnone>
      <traverror>
        <node name="Cast">
          <description>
            Node is already eliminated.
          </description>
        </node>
        <node name="While">
          <description>
            Node is already eliminated.
          </description>
        </node>
        <node name="Funcond">
          <description>
            Node is already eliminated.
          </description>
        </node>
      </traverror>
    </traversal>
    <traversal id="CBL" name="Construct Bundles" default="sons"
               include="construct_bundles.h">
      <travuser>
        <node name="Fundef" />
        <node name="Module" />
      </travuser>
    </traversal>
    <traversal id="CCWH" name="Create C wrapper header" default="sons"
               include="create_c_wrapper_header.h">
      <travuser>
        <node name="FunBundle" />
        <node name="Fundef" />
        <node name="Arg" />
        <node name="Ret" />
        <node name="Typedef" />
        <node name="Module" />
      </travuser>
    </traversal>
    <traversal id="GCF" name="Generate Copy And Free" default="sons"
               include="generate_copy_and_free.h">
      <travuser>
        <node name="Typedef" />
        <node name="Module" />
      </travuser>
    </traversal>
    <traversal id="CCWB" name="Create C wrapper body" default="sons"
               include="create_c_wrapper_body.h">
      <travuser>
        <node name="FunBundle" />
      </travuser>
    </traversal>
    <traversal id="BTF" name="Bundle to Fundef" default="sons"
               include="bundle_to_fundef.h">
      <travuser>
        <node name="FunBundle" />
        <node name="Fundef" />
      </travuser>
    </traversal>
    <traversal id="HS" name="Hide Structs" default="sons"
               include="hidestructs.h">
      <travuser>
        <node name="Module" />
        <node name="Structdef" />
        <node name="Structelem" />
      </travuser>
    </traversal>
    <traversal id="DES" name="Remove Structs" default="sons"
               include="destruct.h">
      <travuser>
        <node name="Module" />
        <node name="Typedef" />
        <node name="Structdef" />
        <node name="Fundef" />
        <node name="Arg" />
        <node name="Ret" />
        <node name="Assign" />
        <node name="Exprs" />
        <node name="Let" />
        <node name="Ids" />
        <node name="Vardec" />
      </travuser>
    </traversal>
    <traversal id="CTZG" name="Comparison to Zero for Guards" default="sons"
               include="comparison_to_zero_guards.h" >
      <travuser>
        <node name="Assign" />
        <node name="Let" />
        <node name="Prf" />
        <node name="Fundef" />
      </travuser>
    </traversal>
    <traversal id="CTZ" name="Comparison to Zero" default="sons"
               include="comparison_to_zero.h" >
      <travuser>
        <node name="Block" />
        <node name="Assign" />
        <node name="Let" />
        <node name="Prf" />
        <node name="Fundef" />
        <node name="Module" />
      </travuser>
    </traversal>
    <traversal id="UCZC" name="UndoCondZeroCmp" default="sons" include="UndoCondZeroCmp.h" >
      <travuser>
  <node name="Fundef" />
        <node name="Block" />
        <node name="Prf" />
        <node name="Let" />
  <node name="Assign" />
      </travuser>
    </traversal>
    <traversal id="SYN" name="Adding Sync Statements" default="sons"
               include="add_sync.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Let" />
      </travuser>
    </traversal>
    <traversal id="MSS" name="Moving Sync Statements" default="sons"
               include="move_sync_statement.h" >
      <travuser>
      </travuser>
    </traversal>
    <traversal id="TFF" name="Tag Fundef Nodes" default="sons"
               include="tag_fp_fundefs.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Ap" />
      </travuser>
    </traversal>
    <traversal id="TFA" name="Tag Ap Nodes" default="sons"
               include="tag_fp_aps.h" >
      <travuser>
        <node name="Ap" />
      </travuser>
    </traversal>
    <traversal id="LVA" name="Live Variable Analysis" default="sons"
               include="live_variable_analysis.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Let" />
        <node name="Ids" />
        <node name="Id" />
      </travuser>
    </traversal>
    <traversal id="CSS" name="Count Spawns and Syncs" default="sons"
               include="count_spawn_sync.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Let" />
        <node name="Ap" />
        <node name="Prf" />
      </travuser>
    </traversal>
    <traversal id="MSC" name="Make Slow Clones" default="sons"
               include="make_slow_clones.h" >
      <travuser>
        <node name="Fundef" />
      </travuser>
    </traversal>
    <traversal id="MC" name="Move Const" default="sons"
               include="move_const.h" >
      <travuser>
        <node name="Fundef" />
        <node name="Assign" />
        <node name="Let" />
      </travuser>
    </traversal>
</traversals>

  <nodesets>
    <nodeset name="Expr">
      <target>
        <node name="Num" />
        <node name="NumByte" />
        <node name="NumShort" />
        <node name="NumInt" />
        <node name="NumLong" />
        <node name="NumLonglong" />
        <node name="NumUbyte" />
        <node name="NumUshort" />
        <node name="NumUint" />
        <node name="NumUlong" />
        <node name="NumUlonglong" />
        <node name="Double" />
        <node name="Float" />
        <node name="Floatvec" />
        <node name="Char" />
        <node name="Bool" />
        <node name="Id" />
        <node name="SPId" />
        <node name="With" />
        <node name="With2" />
        <node name="With3" />
        <node name="Array" />
        <node name="Ap" />
        <node name="SPAp" />
        <node name="Prf" />
        <node name="Funcond" />
	      <node name="Cast" />
      	<node name="SPMop" />
       	<node name="SetWL" />
      	<node name="Dot" />
       	<node name="Str" />
        <node name="Icm" />
        <node name="Type" />
        <node name="Globobj" />
        <node name="Nested_init" />
      </target>
    </nodeset>

    <nodeset name="Stmt">
      <target>
        <node name="Let" />
        <node name="Cond" />
        <node name="Return" />
        <node name="Do" />
        <node name="Annotate" />
        <node name="While" />
        <node name="Icm" />
        <node name="Cudast" />
      </target>
    </nodeset>

    <nodeset name="Interface">
      <target>
        <node name="Import" />
        <node name="Export" />
        <node name="Use" />
        <node name="Provide" />
      </target>
    </nodeset>

    <nodeset name="WithOp">
      <target>
        <node name="Genarray" />
	<node name="Modarray" />
	<node name="SPFold" />
	<node name="Fold" />
        <node name="Break" />
        <node name="Propagate" />
      </target>
     </nodeset>

     <nodeset name="IntValue">
      <target>
        <node name="Num" />
        <node name="Array" />
        <node name="Id" />
      </target>
     </nodeset>

    <nodeset name="Withloop">
      <target>
        <node name="With" />
        <node name="With2" />
      </target>
    </nodeset>

   </nodesets>
  <syntaxtree version="1.0">
<!--

  N_module :

-->
    <node name="Module">
      <description>node for a module declaration</description>
      <sons>
        <son name="Interface">
          <description>symbols imported and exported by the module</description>
          <targets>
            <target mandatory="no">
              <set name="Interface" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Typefamilies" default="NULL">
          <description>Specification of type families</description>
          <targets>
            <target mandatory="no">
              <node name="Tfspec" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <!-- TODO: Remove the default. -->
        <son name="Structs" default="NULL">
          <description>structs defined within the module</description>
          <targets>
            <target mandatory="no">
              <node name="Structdef" />
              <phases>
                <!-- TODO: This is not actually true... -->
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Types">
          <description>types defined within the module</description>
          <targets>
            <target mandatory="no">
              <node name="Typedef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Objs">
          <targets>
            <target mandatory="no">
              <node name="Objdef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Funs">
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="ThreadFuns" default="NULL">
          <description>
            Contains thread functions for mutc back-end.
          </description>
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <range from="pc_lw3" to="final"/>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="FunDecs">
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="FunSpecs" default="NULL">
          <description>
            contains the signatures of forced specializations
          </description>
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <range from="scp_prs" to="tc_esp" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="SPMDStore" default="NULL" >
          <targets>
            <target mandatory="no">
              <node name="Assign" />
              <phases>
                <range from="cg_cpl" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="FPFrameStore" default="NULL" >
          <targets>
            <target mandatory="no">
              <node name="Assign" />
              <phases>
                <range from="cg_cpl" to="final" />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Namespace" inconstructor="yes">
          <type name="Namespace" >
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FileType" inconstructor="yes">
          <type name="FileType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WrapperFuns" inconstructor="no">
          <type name="LUT">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="ptc_cwf" to="tc_swr" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Deprecated" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

N_structdef :

-->
    <node name="Structdef">
      <description>definition of a struct</description>
      <sons>
        <son name="Structelem">
          <targets>
            <target mandatory="yes">
              <node name="Structelem" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Structdef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <!-- Reference to the copy-constructor. -->
        <attribute name="CopyConstructor" default="NULL" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Fundef" />
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

N_tfspec :

-->
    <node name="Tfspec">
      <description>
      Declaration of type families and relations
      </description>
      <attributes>
      </attributes>
      <sons>
        <son name="Defs">
          <targets>
            <target mandatory="yes">
              <node name="Tfvertex" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Rels">
          <targets>
            <target mandatory="yes">
              <node name="Tfrel" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

N_tfdag :

-->
    <node name="Tfdag">
      <description>
      Type hierarchy DAG
      </description>
      <attributes>
        <attribute name="Root" default="NULL" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Tfvertex" />
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Info" default="NULL" inconstructor="no">
          <type name="CompInfo">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dirty" inconstructor="no">
          <type name="Int">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <sons>
        <son name="Defs">
          <targets>
            <target mandatory="yes">
              <node name="Tfvertex" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

N_tfvertex :

-->
    <node name="Tfvertex">
      <description>Vertices in a graph</description>
      <attributes>
        <attribute name="pre" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="premax" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="post" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="topo" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="eulerid" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="depth" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="numtopovisits" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="mineqchildvisits" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="numparents" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="numchildren" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="row" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="reachcola" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="reachcolb" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="lubcol" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="distcol" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Ancestors" default="NULL" inconstructor="no">
          <type name="NodeList">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="wrapperlink" default="NULL" inconstructor="no">
          <type name="VertexWrapper">
            <targets>
              <target mandatory="yes">
                <node name="vertex" />
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <sons>
        <son name="Parents">
          <targets>
            <target mandatory="no">
              <node name="Tfedge" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Children">
          <targets>
            <target mandatory="no">
              <node name="Tfedge" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Tfvertex" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <flags>
        <flag name="IsCompRoot" default="FALSE"/>
        <flag name="IsTopoVisited" default="FALSE"/>
        <flag name="IsDFSVisited" default="FALSE"/>
        <flag name="IsRchColaMarked" default="FALSE"/>
        <flag name="IsRchColbMarked" default="FALSE"/>
        <flag name="IsRowMarked" default="FALSE"/>
      </flags>
    </node>
<!--

N_tfrel :

-->
    <node name="Tfrel">
      <description>Type family relations</description>
      <attributes>
        <attribute name="Subtag" default="NULL" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Supertag" default="NULL" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <sons>
        <son name="Cond">
          <targets>
            <target mandatory="no">
              <node name="Tfexpr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Tfrel" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

N_tfexpr :

-->
    <node name="Tfexpr">
      <description>Expression for type family relation</description>
      <attributes>
        <attribute name="Assigneeid" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Value" default="0" inconstructor="no">
          <type name="Int">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Operator" default="NULL" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <sons>
        <son name="Operand1">
          <targets>
            <target mandatory="no">
              <node name="Tfexpr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Operand2">
          <targets>
            <target mandatory="no">
              <node name="Tfexpr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

N_tfedge :

-->
    <node name="Tfedge">
      <description>Parents and children of a vertex</description>
      <attributes>
        <attribute name="Target" default="NULL" inconstructor="yes">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Tfvertex" />
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Edgetype" inconstructor="no">
          <type name="Int">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Tfedge" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <flags>
        <flag name="WasClassified" default="FALSE"/>
      </flags>
    </node>
<!--

N_tfarg :

-->
    <node name="TypeComponentArg">
      <description>Arguments to type families</description>
      <attributes>
        <attribute name="tag" default="NULL" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="tagtype" default="NULL" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="TypeComponentArg" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_typedef :

-->
    <node name="Typedef">
      <description>definition of a user defined type</description>
      <sons>
        <son name="Args">
          <targets>
            <target mandatory="no">
              <node name="TypeComponentArg" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Typedef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Ns" inconstructor="yes">
          <type name="Namespace">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="initial" to="mod_ans" />
                  <range from="pc_rid" to="final" />
                </phases>
              </target>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="mod_ans" to="pc_rid" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
	<attribute name="Component" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="NType" inconstructor="yes">
          <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Pragma" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Pragma" />
                <phases>
                  <range from="scp" to="pre_rpr" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="CopyFun" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="InitFun" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="FreeFun" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Icm" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SymbolName" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="mod_imp" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Structdef" default="NULL" inconstructor="no">
          <type name="ExtLink">
            <targets>
              <target mandatory="yes">
                <node name="Structdef" />
                <phases>
                  <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsAbstract" />
        <flag name="IsBuiltin" />
        <flag name="IsExported" />
        <flag name="IsProvided" />
        <flag name="IsLocal" default="TRUE"/>
        <flag name="IsUnique" />
        <flag name="IsAlias" />
        <flag name="IsNested" />
      </flags>
    </node>
<!--

  N_objdef :

-->
    <node name="Objdef">
      <sons>
        <son name="Expr">
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Objdef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Type" inconstructor="yes">
          <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Ns" inconstructor="yes">
          <type name="Namespace">
            <targets>
          
              <target mandatory="no">
                <any />
                <phases>
                  <range from="initial" to="mod_ans" />
                  <range from="pc_rid" to="final" />
                </phases>
              </target>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="mod_ans" to="pc_rid" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Name" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LinkName" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Pragma" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="yes">
                <node name="Pragma" />
                <phases>
                  <range from="scp" to="pre_rpr" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ArgAvis" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Id" />
                <phases>
                  <phase name="ptc_rso" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
	<attribute name="NT_Tag" inconstructor="no">
	  <type name="String">
	    <targets>
	      <target mandatory="no">
	        <phases>
                  <range from="cg_cpl" to="final" />
		</phases>
              </target>
	    </targets>
	  </type>
	</attribute>
        <attribute name="Icm" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="InitFun" inconstructor="no">
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Fundef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SymbolName" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="mod_imp" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsExported" />
        <flag name="IsProvided" />
        <flag name="IsLocal" default="TRUE"/>
        <flag name="IsExtern" />
        <flag name="IsAlias" /> 
        <flag name="IsNeeded" default="TRUE" />
     </flags>
    </node>
<!--

  N_fundef :

-->
    <node name="Fundef">
      <sons>
        <son name="Rets">
          <targets>
            <target mandatory="no">
              <node name="Ret" />
              <phases>
                  <range from="initial" to="ptc_rrp"/>
                  <range from="ussa_rera" to="final"/>
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Ret" />
              <phases>
                  <range from="ptc_rrp" to="ussa_rera"/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="Args">
          <targets>
            <target mandatory="no">
              <node name="Arg" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Asserts"  default="NULL" >
          <!--Fangyong: Assert expression. Means user defined constraints. -->
          <targets>
            <target mandatory="no">
              <node name="Udcs" /> <!--Fangyong:Udcs-User-defined constraints. -->
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Body">
          <targets>
            <target mandatory="no">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Objects" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Set" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="AffectedObjects" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="LocalFuns" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <range from="opt_glf" to="opt_uglf" />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Ns" inconstructor="yes">
          <type name="Namespace">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="initial" to="mod_ans" />
                  <range from="pc_rid" to="final" />
                </phases>
              </target>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="mod_ans" to="pc_rid" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SymbolName" default="NULL" mandatory="no" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="mod_imp" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="CudaLinkName" default="NULL" inconstructor="no">
          <description>Symbol name of cuda version of this function</description>
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LinkName" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WrapperType" default="NULL" inconstructor="no">
          <type name="NewType">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="mod_imp" to="opt_fdi"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FunNo" default="0" mandatory="no" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="opt_pfap" to="final"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Pragma" default="NULL" inconstructor="no">
          <type name="Node" >
            <targets>
              <target mandatory="no">
                <node name="Pragma" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Types" inconstructor="no">
          <type name="OldType">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="cg_ctr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Specs" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                      <range from="tc" to="final" /> 
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Return" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Return" />
                <phases>
                  <range from="ptc_l2f" to="cg_ctr"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LoopRecursiveAp" inconstructor="no">
          <description>In a LOOPFUN, this is the N_ap that is the recursive
	   call within the LOOPFUN.</description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Ap" />
                <phases>
                  <range from="ptc_l2f" to="ussa_f2l"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Impl" inconstructor="no">
	  <description>
      Points to the implementation. In case of a wrapper function this is the
      only available instance. In case of an objectwrapper this is the wrapped
      function instance.
	  </description>
          <type name="ExtLink">
            <targets>
              <target mandatory="no" >
                <node name="Fundef" />
                <phases>
                  <range from="mod_imp" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SpawnFun" inconstructor="no">
	  <description>
      Points to the copy of this function that can be used as target for a 
      spawn operation in the mutc backend.
	  </description>
          <type name="ExtLink">
            <targets>
              <target mandatory="no" >
                <node name="Fundef" />
                <phases>
                  <range from="popt_cspf" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
	<attribute name="SpecNs" inconstructor="no">
	  <type name="Namespace">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="tc_esp" to="tc_swr"/>
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="IcmDefBegin" inconstructor="no">
          <description>ICM for the beginning function definitions</description>
          <type name="Node">
            <targets>
              <target mandatory="yes">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="IcmDecl" inconstructor="no">
          <description>ICM for function decelerations</description>
          <type name="Node">
            <targets>
              <target mandatory="yes">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="IcmDefEnd" inconstructor="no">
          <description>ICM to mark the end of a function definition
          </description>
          <type name="Node">
            <targets>
              <target mandatory="yes">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="TCStat" inconstructor="no">
          <type name="TypeCheckingStatus">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="tc" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="DFM_Base" inconstructor="no">
          <type name="DFMaskBase">
            <targets>
              <target mandatory="no">
               <any />
               <phases>
<!-- TODO: Somewhere in the OPT pass, it is left to be re-utlised. -->
<!-- Should be cleaned -->
                 <all/>
               </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ArgTab" inconstructor="no">
          <type name="ArgTab">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="pc_fpc" to="icc_frtr" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Companion" inconstructor="no">
          <description>This link points to the companion function of the current function. In case this is the sequential version (as encoded by ISSTFUN) of the function, the companion will be the parallel version (as encoded by ISMTFUN) and vice versa. The attribute is used in both implementations of MT.</description>
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Fundef" />
                <phases>
                  <phase name="mt_mtstf"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="XTCompanion" inconstructor="no">
          <description>This link points to the XT companion function of the current function. This is used in the module version of create MT/ST/XT functions (MTSTFMOD).</description>
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Fundef" />
                <phases>
                  <phase name="mt_mtstf"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="MTCompanion" inconstructor="no">
          <description>This link points to the MT companion function of the current function. This is used in the module version of create MT/ST functions (MTSTFMOD).</description>
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Fundef" />
                <phases>
                  <phase name="mt_mtstf"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ExecMode" inconstructor="no">
          <type name="MTExecMode">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <!-- <range from="BuildMultithread" to="crece"/> TODO -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="AkvId" default="0" inconstructor="no">
          <description>Identifier for function instances with akv-arguments 
            (used for function naming in renameidentifiers.c)</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="InlineCounter" default="0" inconstructor="no">
          <description>Counter for how many times the function has been recursively
            inlined.</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <!-- This has NOT been TESTED -->
                  <phase name="opt_cyc_linl" /> 
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LastChange" default="0" inconstructor="no">
          <description>
            This attribute indicates in which iteration round the PV of the
            function itself was changed the last time during the specialization
            oracle for static shape knowledge.
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                 <!-- Not ENABLED, i.e. Not TESTED -->
                  <range from="tc_sossk" to="tc_ti" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LastIterationRound" default="0" inconstructor="no">
          <description>
            This attribute indicates in which iteration round this function was
            the last time "iterated" (fully or partially) during the
            specialization oracle for static shape knowledge
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                 <!-- Not ENABLED, i.e. Not TESTED -->
                  <range from="tc_sossk" to="tc_ti" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Depth" default="0" inconstructor="no">
          <description>Used to count the depth in the static call graph.
            (see distribute_threads.c)</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Height" default="0" inconstructor="no">
          <description>Used to count the height in the static call graph.
            (see distribute_threads.c)</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Structgetter" default="NULL" inconstructor="no">
          <description>If this function is a getter for a struct element, this attribute points to that element.</description>
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Structelem" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Structsetter" default="NULL" inconstructor="no">
          <description>If this function is a setter for a struct element, this attribute points to that element.</description>
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Structelem" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Callfun" default="NULL" inconstructor="no">
          <description>
          This attribute is used by check_lacfuns to determine unique call sites of LaC functions.
          </description>
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Fundef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Callap" default="NULL" inconstructor="no">
          <description>
	  If this function is a LACFUN, this attribute points to
	  the N_ap node that invokes it from outside the
	  LACFUN. Valid only during EDFA.
          </description>
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Ap" />
                <phases>
                  <range from="opt_saacyc_edfa" to="opt_saacyc_edfa" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SlowClone" default="NULL" inconstructor="no">
          <description>
            This attribute points to the slow clone implementation if this
            fundef is the fast clone
          </description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Fundef" />
                <phases>
                  <range from="pc_msc" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="NumSpawnSync" default="0" mandatory="no" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="fp_css" to="final"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WLCount" default="0" mandatory="no" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="cuda_cutem" to="final"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Livevars" inconstructor="no">
          <description>
            Contains a union of all livevars inside the body
          </description>
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Livevars" />
                <phases>
                  <phase from="fp_lva" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FPFrameName" inconstructor="no">
          <description>
            When this function contains spawn, unique function name is saved
            here for the name used in the task frame.
          </description>
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pc_msc" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="withops" inconstructor="no">
          <description>Used by mutc backend for lifting desc mallocs up</description>
          <type name="Link">
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <range from="cg_cpl" to="cg_cpl" />
              </phases>
            </target>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsMain">
          <description>This function is the main function of a program.</description>
        </flag>
        <flag name="IsExported">
          <description>This function is being exported from the current namespace and will thus be fully visible from outside.</description>
        </flag>
        <flag name="IsProvided">
          <description>This function is being provided from the current namespace and will thus be available for use from outside, only.</description>
        </flag>
        <flag name="WasImported">
          <description>This function was imported from another namespace. This as well means that it is local now.</description>
        </flag>
        <flag name="WasUsed">
          <description>This function was used from another namespace. This as well means that it is not local.</description>
        </flag>
        <flag name="IsLocal" default="TRUE">
          <description>This function is defined locally in the current namespace. That is, it was defined locally or imported.</description>
        </flag>
        <flag name="IsSticky" default="FALSE">
          <description>This function should not be removed by DeadFunctionRemoval. This is mainly used by the module system to ensure that for all exported functions code is generated. Furthermore, it is used to ensure that the prelude functions are not removed during compilation.</description>
        </flag>
        <flag name="IsSACargConversion" default="FALSE">
          <description>This function is a special SACarg conversion function used by the C interface. This tag is mainly used to ensure that these functions do not turn up in the resulting C header file.</description>
        </flag>
        <flag name="IsNeeded">
          <description>This flag is used in multiple phases, usually to tag functions that are referenced in some sense. It has always to be reset to FALSE at the end of each phase.</description>
        </flag>
        <flag name="IsCondFun">
          <description>This is a lifted conditional. The function is only referenced once from the context the conditional was lifted from.</description>
        </flag>
        <flag name="IsLoopFun">
          <description>This function is a functional representation of a do loop; it is only referenced twice: Once from the context the loop was lifted from and once from the inner recursive application.</description>
        </flag>
        <flag name="IsObjInitFun">
          <description>This function is a global object initialiser function derived from the objdef expression.</description>
        </flag>
        <flag name="IsThreadFun">
          <description>This function is a mutc thread function.</description>
        </flag>
        <flag name="WasWith3Body">
        </flag>
        <flag name="IsSpmdfun">
          <description>This function is a lifted region (usually one withloop) from a SPMD-block; it is only called once from within the region it was lifted from. From a backend perspective, the SPMD function is the transition from sequential to parallel execution. It is called while in sequential mode, its body is exectuted in parallel by multiple threads and it syncronizes on the return.</description>
        </flag>
        <flag name="IsXtSpmdfun">
          <description>Same as IsSpmdFun, will be TRUE for XT SPMD functions.</description>
        </flag>
        <flag name="IsMtfun">
          <description>This is (potentially) a copy of the original function that will be executed in parallel by multiple threads during runtime. Note that all functions called from such a function need to be MT-funs, as well. If the function is only used in parallel context, this may in fact be the original function that has been reused.</description>
        </flag>
        <flag name="IsStfun">
          <description>This is (potentially) a copy of the original function that will be executed sequentially by a single thread during runtime. If the function is only used in sequential context, this may in fact be the original function that has been reused.</description>
        </flag>
        <flag name="IsXtfun">
          <description>This is (potentially) a copy of the original function that will be executed in a multi-threaded context and might go parallel.</description>
        </flag>
        <flag name="IsCudastGlobalfun" default="FALSE">
          <description>This is a single threaded cuda global kernel function.</description>
        </flag>
        <flag name="IsCudaGlobalfun" default="FALSE">
          <description>This is a cuda global kernel function.</description>
        </flag>
        <flag name="IsCudaDevicefun" default="FALSE">
          <description>This is a cuda device function (called within a global kernel function).</description>
        </flag>
        <flag name="IsWrapperfun" />
        <flag name="IsWrapperEntryfun" default="FALSE"/>
        <flag name="IsIndirectWrapperfun" default="FALSE"/>
        <flag name="IsSpawnFun" default="FALSE">
	  <description>True if the function is the target of a spawn operation in the mutc backend</description>
	</flag>
        <flag name="IsZombie" />
        <flag name="IsExtern" />
        <flag name="IsGeneric" >
	  <description>True if the function definition contains generic arguments.</description>
	</flag>
        <flag name="IsInline" />
        <flag name="IsInlineCompleted" />
        <flag name="IsLacInline" />
        <flag name="AllowsInfix" />
        <flag name="HasDotArgs" >
	  <description>True if the function may take an arbitrary number of arguments. E.g., printf</description>
	</flag>
        <flag name="HasDotRets" >
	  <description>True if the function may generate an arbitrary number of results.</description>
	</flag>
	<flag name="HasStepWidthArgs" default="FALSE" />
	<flag name="RefcountDots" default="FALSE" />
        <flag name="IsSpecialisation" />
        <flag name="IsTypeError">
	  <description>TRUE if the given function is a bodyless type error and thus has at least one bottom return type</description>
	</flag>
        <flag name="IsObjectWrapper" >
	  <description>TRUE if the given function is a wrapper for an instance whose instance needed to be extended in the current namespace due to added objects.</description>
	</flag>
        <flag name="WasOptimized" default="TRUE">
          <description>TRUE if function should be accounted for next optimization cycle again</description>
        </flag>
        <flag name="WasUpgraded">
	  <description>TRUE iff the return type has changed during the last run of type-upgrade</description>
	</flag>
        <flag name="FixpointFound" default="FALSE">
          <description>
            TRUE iff the fixpoint of this function has been found in SOSSK.
          </description>
        </flag>
        <flag name="IsStructConstr" default="FALSE">
          <description>
            TRUE iff this function was created by the HS pass as a constructor for structs.
          </description>
        </flag>
        <flag name="IsCudaLacFun" default="FALSE">
          <description>
            TRUE iff this function is a lac fun that can be executed on the CUDA card.
          </description>
        </flag>
        <flag name="IsForLoop" default="FALSE">
          <description>
            TRUE iff this loop function is generated into for loop in the backend.
          </description>
        </flag>
        <flag name="NoInline" default="FALSE">
          <description>
            This function MUST NOT be inlined.  This is set from #pragma noinline.
          </description>
        </flag>
        <flag name="NeedsDynamicMemory" default="TRUE">
          <description>This functions needs dynamic memory (malloc)</description>
        </flag>
        <flag name="ContainsSpawn" default="FALSE">
          <description>This function contains a spawn statement</description>
        </flag>
        <flag name="IsSlowClone" default="FALSE">
          <description>This function is a slow clone</description>
        </flag>
      </flags>
    <checks>
      <check name="CHKfundefVardecExtrema" />
      <check name="CHKcondfun" />
      <check name="CHKfundefReturn" />
    </checks>
    </node>
<!--

  N_arg :

-->
    <node name="Arg">
      <description>
      One formal argument of a defined function definition.
      </description>
      <sons>
        <son name="Avis">
          <targets>
            <target mandatory="yes">
              <node name="Avis" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Arg" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Type"  default="NULL" inconstructor="no">
          <type name="OldType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="cg_ctr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="TypeString" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="rid" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Objdef" inconstructor="no">
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Objdef" />
                <phases>
                <!--
                  <range from="ptc_rso" to="ussa_reso" />
                -->
                  <range from="mod_uss" to="ussa_reso" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
	<attribute name="Linksign" inconstructor="no">
	  <type name="Integer">
            <targets>
              <target mandatory="no" >
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="IsReadonly" />
        <flag name="IsReference" >
	  <description> Set to true if the given argument is a reference argument. The flag is reset to false when resolving reference arguments and WasReference is set to true instead. For all other kinds of arguments it is set to false.
	  </description>
	</flag>
        <flag name="WasReference" >
	  <description> Set to true after resolving reference args if the given argument was a reference argument before. Set to false otherwise.
	  </description>
	</flag>
        <flag name="IsArtificial" >
	  <description> Set to true after resolving objects if the given argument was introduced by an object dependency and thus will be removed once the objects are reintroduced in precompile. Set to false otherwise.
	  </description>
	</flag>
        <flag name="IsPadded" />
        <flag name="IsAliasing" default="TRUE" />
        <flag name="IsRefcounted" default="TRUE" />
        <flag name="HasLinksignInfo" />
	<flag name="IsUnique" />
	<flag name="IsInUse" default="FALSE" >
	  <description> Used to mark unused function arguments in DeadCodeRemoval. Marked arguments are removed in signature simplification.
	  </description>
                <phases>
                  <range from="" to="final" />
                </phases>
        </flag>	 
	<flag name="IsDuplicate" default="FALSE" >
	  <description> Used to mark duplicated function arguments in
	    EDFA. Marked arguments are removed by EDFA, but this
	    flag allows us to simplify outer-level calls in a cleaner
	    fashion.
	  </description>
          <phases>
            <range from="opt_saacyc_edfa" to="opt_saacyc_edfa" />
          </phases>
        </flag>	 
	<flag name="IsNeedsMin" default="FALSE" >
	  <description> Used to mark LACFUN arguments that have a
	  non-NULL AVIS_MIN in the calling environment, but not (yet)
	  in the local environment. This flag is used only in PETL.
	  </description>
          <phases>
            <range from="opt_saacyc_petl" to="opt_saacyc_petl" />
          </phases>
        </flag>	 
	<flag name="IsNeedsMax" default="FALSE" >
	  <description> Used to mark LACFUN arguments that have a
	  non-NULL AVIS_MAX in the calling environment, but not (yet)
	  in the local environment. This flag is used only in PETL.
	  </description>
          <phases>
            <range from="opt_saacyc_petl" to="opt_saacyc_petl" />
          </phases>
        </flag>	 
        <flag name="IsCudaDefined" default="FALSE" /> 
      </flags>
    <checks>
      <check name="CHKisNullSsaassign" />
    </checks>
  </node>


<!--

  N_udcs :usr-defined constraints  Fangyong add

-->

  <node name="Udcs">
      <sons>
        <son name="Udc">
           <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Udcs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
  </node>

<!--

  N_block :

-->
    <node name="Block">
      <sons>
        <son name="Assigns">
          <targets>
            <target mandatory="no">
              <node name="Assign" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Vardecs">
          <targets>
            <target mandatory="no">
              <node name="Vardec" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Shareds" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Arg" />
              <phases>
                <phase name="lw3"/>
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="CacheSim" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SPMD_Prolog_ICMs" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Fundef" />
                <phases>
                  <phase name="comp" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSACounter" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="SSAcnt" />
                <phases>
                  <phase name="ssa" />
                  <phase name="wltssa" />
                  <phase name="ssawc" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dataflowgraph" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Dataflowgraph" />
                <phases>
                  <range from="mt3_cdfg" to="mt3_concel" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="In_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="IsMtParallelBranch">
          <description>This block contains the parallel branch of a conditional that implements dynamic parallelisation decisions in the MT backend..</description>
        </flag>
        <flag name="IsMtSequentialBranch">
          <description>This block contains the sequential branch of a conditional that implements dynamic parallelisation decisions in the MT backend..</description>
        </flag>
      </flags>
    </node>
<!--

  N_structelem :

-->
    <node name="Structelem">
      <description>declaration of an element of a struct</description>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Structelem" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes" >
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Type" inconstructor="yes" >
	  <description></description>
          <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Typedef" default="NULL" inconstructor="no">
          <!-- TODO: Perhaps making these normal Node types would clean them up
               automatically during the `destruct' phase instead of having to
               check every typedef explicitly. -->
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Typedef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_vardec :

-->
    <node name="Vardec">
      <sons>
        <son name="Avis">
          <targets>
            <target mandatory="yes">
              <node name="Avis" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Vardec" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
         <son name="Init" default="NULL">
           <targets>
             <target mandatory="no">
               <set name="Expr" />
               <phases>
                 <range from="pc_mc" to="cg_cpl" />
               </phases>
             </target>
           </targets>
         </son>
      </sons>
      <attributes>
        <attribute name="Type" default="NULL" inconstructor="no">
          <type name="OldType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="cg_ctr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Icm" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsPadded" />
        <flag name="HasBeenEliminated" >
	  <description>Used in ArrayElimination to mark vardecs that are not used anymore. These are later freed by DCR</description>
	</flag>
        <flag name="IsSticky" default="FALSE">
          <description>This vardec should not be removed by DeadFunctionRemoval. This is exclusively used by MT code generation within SPMD functions to ensure that dummy vardecs in intriduced when creating the SPMD functions that only become vital during code generation do not vanish until then.</description>
        </flag>
      </flags>
    </node>
<!--

  N_assign :

-->
    <node name="Assign">
    <description>Spine of an N_block</description>
      <sons>
        <son name="Stmt">
          <targets>
            <target mandatory="yes">
              <set name="Stmt" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Assign" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
	<attribute name="ExecMode" inconstructor="no">
	  <type name="MTExecMode">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <!-- NOT TESTED -->
                  <range from="mt3_crwiw" to="mt3_repfun" /> 
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="CellId" inconstructor="no">
	  <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="mt3_asmra" to="mt3_crece" />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="Level" default="0" inconstructor="no">
	  <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range name="daa" />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="Visited_With" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="With" />
                <phases>
                  <phase name="wlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Tag" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="With" />
                <phases>
                  <phase name="wlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dataflownode" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Dataflownode" />
                <phases>
                  <range from="mt3_cdfg" to="mt3_concel" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Index" inconstructor="no">
          <type name="IndexInfo">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="opt_cyc_wli" to="opt_cyc_wlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Containing_Block" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Block" />
                <phases>
                  <phase name="imem" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Access_Info" default="NULL" inconstructor="no">
          <type name="CudaAccessInfo">
            <targets>
              <target mandatory="no">
                <any />
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsUnused" />
        <flag name="IsNotAllowedToBeMovedUp" default="FALSE">
          <description>
            This flag is used during the "Withloop Lock Optimization" process.
            It indicates that certain assignments are not allowed to be moved
            above the global object-lock.
          </description>
        </flag>
        <flag name="IsNotAllowedToBeMovedDown" default="FALSE">
          <description>
            This flag is used during the "Withloop Lock Optimization" process.
            It indicates that certain assignments are not allowed to be moved
            below the global object-lock release.
          </description>
        </flag>
        <flag name="HasMoved" default="FALSE">
          <description>
            This flag is used during moving sync statements phase in FP to
            indicate that a node has been tried to move before.
          </description>
        </flag>
      </flags>
      <checks>
        <check name="CHKattribsAssign" />
      </checks>
    </node>
<!--

  N_let :

-->
    <node name="Let">
    <description>Assignment of value to identifier</description> 
      <sons>
        <son name="Ids">
          <targets>
            <target mandatory="no">
              <node name="SPIds" />
              <phases>
                <range from="initial" to="ptc_ivd" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="Ids" />
              <phases>
                <range from="ptc_ivd" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Expr">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="LIRFlag" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="lir" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="MatchingSpawnSync" inconstructor="no">
          <description>
            If the node contains a spawned ap or a sync statement, this
            will point to the matching spawn or sync statement.
          </description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Let" />
                <phases>
                  <phase from="fp_syn" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Livevars" inconstructor="no">
          <description>
            If the let node is a spawn or sync statement, this attribute will
            contain a list of all live variables at this point in the code.
          </description>
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Livevars" />
                <phases>
                  <phase from="fp_lva" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SpawnSyncIndex" inconstructor="no">
          <description>
            If the let node is a spawn or sync statement, this attribute
            indicates the index of that statement
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase from="fp_css" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_livevars :

-->
    <node name="Livevars">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Livevars" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Avis" inconstructor="yes">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Avis" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_cast :

-->
    <node name="Cast">
      <sons>
        <son name="Expr">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="NType" inconstructor="yes">
          <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_return :

-->
    <node name="Return">
      <sons>
        <son name="Exprs">
          <targets>
            <target mandatory="no" >
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="CRet" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <set name="Expr" />
                <phases>
                  <!--  <range from="precompile" to="final" /> TODO -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!-- 
  N_cond :

-->
    <node name="Cond">
      <sons>
        <son name="Cond">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Then">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Else">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="In_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsThenNoop" default="FALSE">
          <description>
          </description>
        </flag>
        <flag name="IsElseNoop" default="FALSE">
          <description>
          </description>
        </flag>
      </flags>
    </node>
<!--

  N_do :

-->
    <node name="Do">
      <sons>
        <son name="Cond">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Body">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Skip" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Label" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="initial" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="In_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Iterator" inconstructor="no" >
	  <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <range from="pc_pfg" to="final" /> 
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Upper_Bound" inconstructor="no" >
	  <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <range from="pc_pfg" to="final" /> 
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Relational_Op" inconstructor="no" >
          <type name="Prf">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pc_pfg" to="final" /> 
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsCudarizable" default="FALSE">
          <description>
            TRUE iff this loop can be executed on the GPU.
          </description>
        </flag>
        <flag name="IsForLoop" default="FALSE">
          <description>
            TRUE iff this do/while loop is generated into for loop in the backend.
          </description>
        </flag>
      </flags>
    </node>
<!--

  N_while :

-->
    <node name="While">
      <sons>
        <son name="Cond">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Body">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_annotate :

-->
    <node name="Annotate">
      <sons></sons>
      <attributes>
        <attribute name="Tag" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FunNumber" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FunApNumber" inconstructor="yes" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_ap :

-->
    <node name="Ap">
	    <description>
            Application of a user-defined function.
            </description>
      <sons>
        <son name="Args">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Fundef" inconstructor="yes" >
          <type name="ExtLink">
            <targets>
              <target mandatory="yes">
                <node name="Fundef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ArgTab" inconstructor="no" >
          <type name="ArgTab">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="pc_fpc" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SpawnPlace" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <phases>
                 <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="ConsiderInline" default="TRUE" />
        <flag name="IsRecursiveDoFunCall" default="FALSE" />
        <flag name="IsSpawned">
          <description>
            This function call should be spawned
          </description>
        </flag>
        <flag name="IsRemote">
          <description>
            This function call should be spawned on another resource
          </description>
        </flag>
        <flag name="ToSpawn">
          <description>
            This node calls a function which contains spawns
          </description>
        </flag>
      </flags>
    <checks>
      <check name="CHKapArgCount" />
    </checks>
    </node>
<!--

  N_mop :

-->
    <node name="SPMop">
      <sons>
        <son name="Ops">
          <targets>
            <target mandatory="yes" >
              <node name="Exprs"/>
              <phases>
                <all />
              </phases>
            </target>
          </targets>
       	</son>
        <son name="Exprs">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes> </attributes>
      <flags>
        <flag name="IsFixed" />
      </flags>
    </node>
<!--

  N_exprs :

-->
    <node name="Exprs">
      <sons>
        <son name="Expr">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_funcond :

-->
    <node name="Funcond">
     <description>
      A SaC expression of the form: cond ? truevalue : elsevalue.
     </description>
      <sons>
        <son name="If">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Then">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Else">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_array :

-->
    <node name="Array">
    <description>Constant array of array elements. In early phases, 
     the elements are exprs; after the array flattening phase, the
     elements may be an arbitrary mixture of N_id nodes and/or 
     scalar constant nodes.
     The shapes of all elements must match. The shape of the array
     represented by the N_array is the catenation of the ARRAY_FRAMESHAPE
     and the shape specified by the ELEMTYPE.</description>
      <sons>
        <son name="AElems">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Elemtype" inconstructor="yes" >
          <description> The type of all array elements. The Elemtype may be used
           to deduce the common shape of those elements.</description>
          <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FrameShape" inconstructor="yes" >
		<description>The frameshape of the array. 
			The frameshape may NOT be an empty vector, 
			with one simple scalar (e.g., N_num) hanging from
			AELEMS. Simple scalars must be represented directly
			as themselves, or via an N_id node.
		 </description>
          <type name="Shape">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="String" default="NULL" inconstructor="no" >
          <description>In case of constant character arrays defined
            as strings, this attribute holds the original
            definition. The definition needs to be safe for printing as
            a C string, e.g. special characters need to be escaped.
            TODO: This should be eliminated as soon as possible.
          </description>
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_id :

-->
    <node name="Id">
      <sons></sons>
      <attributes>
        <attribute name="Avis" inconstructor="yes">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Avis" />
                <phases>
                  <range from="initial" to="cg_cpl"/>
                </phases>
              </target>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <range from="cg_cpl" to="final"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WL" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <unknown />
                <phases>
                  <phase name="wlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ICMtext" default="NULL" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
          <description>
            Deprecated. Will be removed as soon as it has been confirmed that this attribute is no longer used.
          </description>
        </attribute>
        <attribute name="NT_Tag" default="NULL" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
          <description>
            Deprecated. Still used in the compiler backend until major redesign of backend node structure.
          </description>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsSclPrf" >
          <description>
                  Set by AL and DL to indicate that the N_id is the result of
                  a primitive dyadic function operating on simple scalars.
          </description>
        </flag>
      </flags>
    </node>
<!--

  N_num :

-->
    <node name="Num">
     <description>  Integer scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_numbyte :

-->
    <node name="NumByte">
     <description>  Byte scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Byte">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_numshort :

-->
    <node name="NumShort">
     <description>  Short scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Short">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_numint :

-->
    <node name="NumInt">
     <description>  Int scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Int">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_numlong :

-->
    <node name="NumLong">
     <description>  Long scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Long">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_numlonglong :

-->
    <node name="NumLonglong">
     <description>  Long Long scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Longlong">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_numubyte :

-->
    <node name="NumUbyte">
     <description>  Ubyte scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Ubyte">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_numushort :

-->
    <node name="NumUshort">
     <description>  Ushort scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Ushort">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_numuint :

-->
    <node name="NumUint">
     <description>  Uint scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Uint">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_numulong :

-->
    <node name="NumUlong">
     <description>  Ulong scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Ulong">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_numulonglong :

-->
    <node name="NumUlonglong">
     <description>  ULongLong scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Ulonglong">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_char :

-->
    <node name="Char">
     <description>  Character scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Char">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_float :

-->
    <node name="Float">
     <description>  Floating-point scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Float">
            <targets>
              <target mandatory="yes">
<!--                <any />-->
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_float_vec :

-->
    <node name="Floatvec">
     <description>  Floating-point scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Floatvec">
            <targets>
              <target mandatory="yes">
<!--                <any />-->
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_double :

-->
    <node name="Double">
     <description>  Double-precision real scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Double">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_bool :

-->
    <node name="Bool">
     <description>  Boolean scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Bool">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_nested_init :

-->
    <node name="Nested_init">
     <description>Nested init value</description>
      <sons/>
      <attributes/>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>

<!--

  N_str :

-->
    <node name="Str">
      <sons></sons>
      <attributes>
        <attribute name="String" inconstructor="yes" >
          <description>
            The value of this string. Note that the string needs to be
            in an encoding which is safe for printing in C code, e.g.
            special characters like quotation marks need to be escaped.
          </description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_type :

-->
    <node name="Type">
      <sons></sons>
      <attributes>
        <attribute name="Type" inconstructor="yes" >
	  <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_prf :

-->
    <node name="Prf">
     <description> Primitive (built-in) SAC function </description>
      <sons>
        <son name="Args">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Prf" inconstructor="yes" >
          <description>
            Describes the type of function this node
            represents. A list of possible values is
            found in src/libsac2c/tree/prf_info.mac
          </description>
          <type name="Prf">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="NoteintersectInsertionCycle" inconstructor="no" >
          <description>
	   This is used for analysis of AWLF performance. It is initialized
	   to global.cycle_counter when an F_noteintersect is inserted
	   into the AST, and referenced when AWLF actually performs
	   a WL fold. The intent is to see if we should make AWLF give
	   up on a folding attempt after some N iterations.
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
        <flags>
        <flag name="IsNoteIntersectPresent" default="FALSE" >
          <description>
                  Set by AWLFI for _sel_VxA_(iv, PWL) to
                  indicate that an _noteintersect_ node has been
                  generated for iv.
          </description>
        </flag>
        <flag name="IsInplaceSelect" default="FALSE" >
          <description>
          </description>
        </flag>
        <flag name="IsNop" default="FALSE" >
          <description>
	    Some optimization has decided that this N_prf is
	    a no-op. I.e., it can be (carefully) removed from
	    the AST, but is not in a position within the AST
	    traversal to remove it directly.
	    At present, the only case where this happens 
	    is in ixxx. CF performs the actual removal,
	    typically on a traversal after the one that
	    has set this flag.
          </description>
        </flag>
        <flag name="IsFoldNow"  default="FALSE">
          <description> 
            Set to true by CUBSL if this sel is in a consumer-WL and
	    has been determined to be foldable by AWLF.
	  </description>
          <phases>
            <range from="opt_saacyc_cubsl" to="opt_saacyc_cubsl" />
          </phases>
	</flag>
      </flags>
    </node>
<!--

  N_dot :

-->
    <node name="Dot">
      <sons></sons>
      <attributes>
        <attribute name="Num" inconstructor="yes" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_setwl :

-->
    <node name="SetWL">
      <sons>
        <son name="Vec">
          <targets>
            <target mandatory="yes">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="SPId" />
              <phases>
              <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Expr">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_icm :

-->
    <node name="Icm">
      <sons>
        <son name="Args">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes" >
          <type name="SharedString">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Indent_Before" default="0" inconstructor="no" >
          <description>the default value has to be fixed!</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Indent_After" default="0" inconstructor="no" >
          <description>the default value has to be fixed!</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsEndOfStatement" />
      </flags>
    </node>
<!--

  N_pragma :

-->
    <node name="Pragma">
      <sons>
        <son name="ReadOnly" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Nums" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Refcounting" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Nums" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Effect" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="LinkSign" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Nums" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="LinkName" default="NULL" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="CudaLinkName" default="NULL" inconstructor="no" >
          <description>Declaration of cuda version of an external function</description>
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LinkMod" default="NULL" inconstructor="no" >
          <type name="StringSet">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LinkObj" default="NULL" inconstructor="no" >
          <type name="StringSet">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WLComp_APS" default="NULL" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Exprs" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="APL" default="NULL" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Ap" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="NumParams" default="0" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="InitFun" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <!-- <range from="imp" to="readsib" /> TODO -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="CopyFun" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <!-- <range from="import" to="readsib" /> TODO -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FreeFun" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <!-- <range from="import" to="readsib" /> TODO -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="wldist" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
              </target>
            </targets>
          </type>
        </attribute>
       </attributes>
      <flags>
        <flag name="RefcountDots" default="FALSE" />
        <flag name="MutcThreadFun" default="FALSE" />
        <flag name="NoInline" default="FALSE" />
      </flags>
    </node>
<!--

  N_ssacnt :

-->
    <node name="SSAcnt">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="SSAcnt" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Count" inconstructor="yes" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="BaseId" inconstructor="yes" >
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_ssastack :

-->
    <node name="SSAstack">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="SSAstack" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Avis" inconstructor="yes" >
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Avis" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="NestLevel" inconstructor="yes" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="InUse" />
      </flags>
    </node>
<!--

  N_avis :

-->
    <node name="Avis">
    <description>Arg and vardec information structure</description> 
      <sons>
        <son name="Dim" default="NULL">
          <description>
          An N_num or N_id specifying the array's rank
          as a symbolic array attribute. The expression is a numeric
          constant (N_num) for AKS, AKD, and AKV arrays, and an
          identifier (N_id) for AUD arrays.
          </description>
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <range from="opt_saacyc_isaa" to="opt_esaa" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Shape" default="NULL">
          <description>
	  An N_array or N_id specifying the array's shape
	  as a symbolic array attribute. The array is
	  comprised of integer constants (N_num) for AKV and AKS arrays,
	  a mixed array of integer constants and identifiers (N_num, N_id)
	  for AKD arrays with partial shape information, or an
	  identifier (N_id) for AUD and some AKD arrays.
          </description>
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <range from="opt_saacyc_isaa" to="opt_esaa" />
              </phases>
            </target>
          </targets>
        </son>        
        <son name="Min" default="NULL">
          <description>
          This field is an N_id for the
          minimum value that this variable can have. 
          The field is valid only for integer-like
          types, i.e., it does not apply to doubles, etc.
          For example, the Min of the lower bound of a WL index 
          vector might be
          an N_id pointing to an N_array with value [0,0,0], 
          </description>
          <targets>
            <target mandatory="no">
              <node name="Id" />
              <phases>
                <range from="opt_saacyc" to="opt_esaa" />
              </phases>
            </target>
          </targets>
        </son>

        <son name="Max" default="NULL">
          <description>
           See AVIS_MIN description; MAX points to the avis of the maximum, 
           rather than the minimum, value of a WL index vector.
           However, like WL index vectors, MAX is
           part of a semi-closed interval; MAX(X) is at least 1+maxreduce(X),
           much the same as GENERATOR_BOUND2 in a with-loop.
          </description>
            <targets>
              <target mandatory="no">
                <node name="Id" />
                <phases>
                  <range from="opt_saacyc" to="opt_esaa" />
                </phases>
              </target>
            </targets>
        </son>

        <son name="Scalars" default="NULL">
          <description>
	  For small arrays, such as shape vectors and 
	  index vectors, this field comprises the scalars constituting
	  those arrays as an N_array. This allows us to manipulate the
	  scalars in optimizations such as AWLF, and avoids the need
	  to build an N_array within LACFUNs.
          </description>
            <targets>
              <target mandatory="no">
                <node name="Array" />
                <phases>
                  <range from="opt" to="opt_esaa" />
                </phases>
              </target>
            </targets>
        </son>
      </sons>

      <attributes>
        <attribute name="Decl" default="NULL" inconstructor="no" >
          <description>
                  If this variable is a local, this is a link to its
                  N_vardec. Otherwise, it is a function parameter,
                  and this is a link to its N_arg.
          </description>
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Vardec" />
                <phases>
                  <all />
                </phases>
              </target>
              <target mandatory="yes">
                <node name="Arg" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Name" inconstructor="yes" >
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Type" inconstructor="yes" >
	  <description>the inferred type, which may be more precise than DeclType.</description>
          <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="initial" to="cg_ctr" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
	<attribute name="DeclType" default="NULL" inconstructor="no" >
	  <description>the declared type, iff present.</description>
	  <type name="NewType">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="ConstrType" default="NULL" inconstructor="no" >
	  <description>type constraint as imposed by the applied use of the variable, iff present.</description>
	  <type name="NewType">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="ConstrVar" default="NULL" inconstructor="no" >
	  <description>pointer to the avis of the predicat that results from the type constraint in ConstrType, iff present</description>
	  <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="ConstrSet" default="NULL" inconstructor="no" >
	  <description>pointer to set of non-type constraints  as imposed by the applied use of the variable, iff present</description>
	  <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Constraint" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="Pos" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="idc" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSAAssign" default="NULL" inconstructor="no" >
          <description>
            provides a direct link to the N_assign node containing the definition of the identifier represented by this AVIS node. In SSA form, AVIS_SSAASSIGN must only be NULL for identifiers for function arguments and with-loop index variables.
          </description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Assign" />
                <phases>
		<!--
                  <range from="ptc_ssa" to="wlt_ussa" /> 
                  <range from="wlt_ssa" to="ussa_ussa" /> 
		  -->
                  <range from="ptc_ssa" to="ussa_ussa" /> 
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSACount" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="SSAcnt" />
                <phases>
                  <phase name="ptc_ssa" />
                  <phase name="wlt_ssa" />
                  <phase name="popt_ssa" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSAstack" inconstructor="no" >
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="SSAstack" />
                <phases>
                  <phase name="ptc_ssa" />
                  <phase name="wlt_ssa" />
                  <phase name="popt_ssa" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSAThen" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <phase name="ptc_ssa" />
                  <phase name="wlt_ssa" />
                  <phase name="popt_ssa" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSAElse" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <phase name="ptc_ssa" />
                  <phase name="wlt_ssa" />
                  <phase name="popt_ssa" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="NeedCount" inconstructor="no" >
          <description>
          xxx
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="opt_lir" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WL_NeedCount" inconstructor="no" >
          <description>
             This is a count of the number of producerWL references
             that occur in _sel_VxA_(iv, producerWL)
             and _idxsel_( offset, producerWL) operations within 
             a consumerWL.
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="opt_al" />
                  <range from="opt_saacyc_isaa" to="opt_ivexc" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Counting_WL" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="With" />
                <phases>
                  <range from="opt_saacyc_isaa" to="opt_ivexc" />
                </phases>
              </target>
            </targets>
          </type>
          <description>
            This field is the number of references to the producerWL that
            created this value, from one, arbitrary-chosen consumerWL.
            The field is used as a crude cost function on the producerWL,
            so that the AWLF is performed only if all references to the
            producerWL are from one other (consumerWL) WL.
          </description>
        </attribute>
        <attribute name="VarNo" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="mem_rc" />
                  <phase name="mem_rcm" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="BotRT" default="NULL" inconstructor="no" >
          <type name="NewType">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="tc_ebt" />
                </phases>
              </target>
            </targets>
          </type>
          <description>
            Used in order to memorize a replacement type for bottom funcond variables.
          </description>
        </attribute>
        <attribute name="Subst" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <phase name="opt_scc" />
                  <phase name="opt_cyc_cse" />
                  <phase name="opt_lir" />
                  <phase name="pc_ussa" />
                  <phase name="wlt_ussa" />
		  <phase name="ussa_rera" />
                  <phase name="mem_racc" />
                </phases>
              </target>
	      <target mandatory="no">
	        <node name="Objdef" />
		<phases>
		  <phase name="pc_reso" />
		</phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Alt" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                </phases>
              </target>
            </targets>
          </type>
          <description>
            Used by CompareTree to remember alpha conversion
          </description>
        </attribute>
        <attribute name="DefDepth" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="lir" />
                  <phase name="awlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LirMove" inconstructor="no" >
          <type name="BitField">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="lir" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ExpResult" inconstructor="no" >
          <type name="Bool">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="lir" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="AliasMask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="ia" />
                </phases>
              </target>
            </targets>
          </type>
          <description>Used by Interface Analysis in order to 
            obtain the transitive hull of variable aliases.</description>
        </attribute>
	<attribute name="UniqueRef" inconstructor="no" >
	  <description>First reference to this unique object declaration. Used to generate useful error messages in case of uniqueness violation.</description>
	  <type name="Link">
	    <targets>
	      <target mandatory="yes">
	        <node name="Id" />
		<phases>
		  <phase name="cu" />
		</phases>
	      </target>
	    </targets>
	  </type>
	</attribute>
        <attribute name="WithLoopLevel" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="popt_unq" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Demand" inconstructor="no" >
          <description>
            This attribute constitutes the demand of a variable during the
            specializing oracle for static shape knowledge.
          </description>
          <type name="Constant">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="With3Fold" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Fold" />
                <phases>
                 <range from="wlt_ass" to="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="BlockSize" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                 <range name="daa" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Count" inconstructor="no" default="0">
          <description>
            Used to count number of times the variable is used on the lhs.
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                 <range name="pc_mc" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Lacso" inconstructor="no" default="0">
          <description>
	   Hidey-hole used by LACSO to link the being-scalarized array to its
	   scalar elements. Strictly local, and could be eliminated with
	   a bit of work.
          </description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="opt_cyc_lacso"     to="opt_cyc_lacso" />
                  <range from="opt_saacyc_lacso" to="opt_saacyc_lacso" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
	<attribute name="PolylibColumnIndex" default="-1" >
	  <description> 
	  This is used by PHUTcollectAffineExprs to assign an
	  origin-1 column number to each distinct name found in
	  any particular affine expression tree.
	  </description>
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="opt_saacyc_pogo" to="opt_saacyc_pogo" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>	 
	<attribute name="Npart" default="NULL" >
	  <description> 
	  Pointer to the N_part that defines this variable, if
	  the variable is a WITHID_IDS or WITHID_VEC. It is 
	  used by POGO (and other polyhedral codes) to locate the
	  N_part that defines the variable, along with its generators.
	  It is NOT defined except within the scope of 
	  a specific traversal that descends through N_part nodes.
	  In particular, it is set to NULL when we exit the N_part.
	  </description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="opt_saacyc_pogo" to="opt_saacyc_pogo" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>	 
      </attributes>

      <flags>
        <flag name="SSADefined" />
        <flag name="SSALPINV" />
        <flag name="IsAlias" default="TRUE" >
          <description>Set by the Alias Analysis traversel, AVIS_ISALIAS 
            denotes whether there can be more than one identifier for a 
            given data object.</description>
        </flag>
        <flag name="IsDead" >
          <description>Used to indicate 
            which VARDECS are no longer needed and can thus be eliminated.
          </description>
        </flag>
        <flag name="IsDeadReturn" >
          <description>Used to indicate a dead N_return value.
	   This is used solely by DCI/DCR to mark return values that
	   are not used by the external caller. We must not use
	   AVIS_ISDEAD for this purpose, because the value may be
	   in use elsewhere, such as for an AVIS_SHAPE.
          </description>
        </flag>
        <flag name="IsLifted" >
          <description>Used by SpmdLift traversal in order to indicate 
            which VARDECS are no longer needed and can thus be eliminated.
          </description>
        </flag>
	<flag name="IsUniqueConsumed" default="FALSE" >
	  <description>Used by the uniqueness checker to determine whether
	  a unique type has been consumed earlier on.
	  </description>
	</flag>
	<flag name="IsUniqueConsumedThen" default="FALSE" >
	  <description>Used by the uniqueness checker to determine whether
	  a unique type has been consumed earlier on, before the THEN
	  branch of an N_cond.
	  </description>
	</flag>
	<flag name="IsUniqueConsumedElse" default="FALSE" >
	  <description>Used by the uniqueness checker to determine whether
	  a unique type has been consumed earlier on, before the ELSE
	  branch of an N_cond.
	  </description>
	</flag>
        <flag name="HasDTThenProxy" default="FALSE" />
        <flag name="HasDTElseProxy" default="FALSE" />
        <flag name="HasSAAArguments" default="FALSE">
          <description>Within the optimisation cycle we may introduce new parameters to functions, representing shape or dimension of other parameters. If this is done for this parameter, we may set this value to TRUE.</description>
        </flag>
        <flag name="HasMinvalArg" default="FALSE">
          <description>
	  This value has its AVIS_MIN present in LACFUN calls, in
	  the same manner as AVIS_DIM/SHAPE.
	  This flag ensures that we do not do repeated insertions of
	  extrema into LACFUN calls.
	  </description>
        </flag>
        <flag name="HasMaxvalArg" default="FALSE">
          <description>
	  This value has its AVIS_MAX present in LACFUN calls,
	  the same manner as AVIS_DIM/SHAPE.
	  This flag ensures that we do not do repeated insertions of
	  extrema into LACFUN calls.
	  </description>
        </flag>
        <flag name="IsUsed" default="FALSE" >
          <description>Used by Loop Scalarization to determine whether
          a variable is used otherwise than within array position of
          selections.
	  Furthermore, used by partial reuse candidate filtering to check
	  whether a reuse candidate appears somewhere other than in selections.
          </description>
        </flag>
        <flag name="BelongingAssignmentIsNotAllowedToBeMovedUp" default="FALSE">
          <description>
            This flag is used during the "Withloop Lock Optimization" process.
            It indicates that the belonging assignment is not allowed to be
            moved above the global object-lock.
          </description>
        </flag>
        <flag name="BelongingAssignmentIsNotAllowedToBeMovedDown" default="FALSE">
          <description>
            This flag is used during the "Withloop Lock Optimization" process.
            It indicates that the belonging assignment is not allowed to be
            moved below the global object-lock release.
          </description>
        </flag>
	<flag name="IsThreadIndex" default="FALSE">
	  <description>
	    If true, the given variable is the dedicated index variable for
	    this thread function. Used by the mutc backend.
	  </description>
	</flag>
	<flag name="IsWLFolded" default="FALSE">
	  <description>
             If true, the given variable is the result of a producerWL
             that has been folded out of existence.
	  </description>
	</flag>
        <flag name="IsHostReferenced" default="FALSE">
	</flag>
        <flag name="IsMinHandled" default="FALSE">
          <description>
                  If true, indicates that IVEXI/IVEXP have performed whatever
                  needs to be done to generate AVIS_MIN for this node.
                  For N_array assignments, the extrema are not directly
                  attached to the LHS (v), but to v' or v'', so looking
                  for non-NULL AVIS_MIN will not work.
          </description>
        </flag>

        <flag name="IsMaxHandled" default="FALSE">
          <description>
                  Like IsMinHandled, but for AVIS_MAX.
          </description>
        </flag>
        <flag name="IsCudaLocal" default="FALSE">
          <description>
                  If true, this (array) variable should be allocated locally on CUDA.
          </description>
        </flag>
        <flag name="IsDefinedInCurrentBlock" default="FALSE">
          <description>
                  This flags marks AVIS nodes that are assigned in the current block.
                  This is used in AL to separate identifiers from different blocks
                  to confine the effect of AL to single blocks.
          </description>
        </flag>
        <flag name="IsALActive" default="FALSE">
          <description>
                  This flags marks AVIS nodes as potential roots of multi-operand
                  expressions; it is used to avoid starting another go on AL for
                  any subexpression.
          </description>
        </flag>
        <flag name="IsLoopInvariant" default="FALSE">
          <description>
                  This flags marks AVIS nodes as loop invariant, i.e. the variable
                  is a parameter of a do-loop function and appears in the corresponding
                  argument position of the recursive application.
          </description>
        </flag>
        <flag name="IsDLActive" default="FALSE">
          <description>
                  This flags marks AVIS nodes as active in the current context.
                  This is used in DL to mark identifiers that are part of
                  an expression to be simplified.
          </description>
        </flag>
        <flag name="IsOmpPrivate" default="FALSE" >
          <description>
                 If true, the given variable is private OpenMP variable.
        </description>
        </flag>
        <flag name="IsOmpReduction" default="FALSE" >
          <description>
                  If true, the given variable is reduction OpenMP variable used in fold.
          </description>
        </flag>
        <flag name="suballoc" default="FALSE">
          <description>
            MUTC: This var is from a suballoc where the desc is passed in to 
            this function
          </description>
        </flag>
        <flag name="NeedBlocked" default="FALSE" >
          <description>
                  If true, the given variable is a loop index and the loop needs to be blocked
          </description>
        </flag>
        <flag name="IsGenarrayMemval" default="FALSE" >
          <description>
             Marks genarray with-loo operatorp memval identifier.
             Only used in SPMD functions.
          </description>
        </flag>
        <flag name="IsModarrayMemval" default="FALSE" >
          <description>
             Marks modarray with-loop operator memval identifier.
             Only used in SPMD functions.                  
          </description>
        </flag>
        <flag name="IsBreakMemval" default="FALSE" >
          <description>
             Marks break with-loop operator memval identifier.
             Only used in SPMD functions.                  
          </description>
        </flag>
        <flag name="IsPropagateDefault" default="FALSE" >
          <description>
             Marks propagate with-loop operator default identifier.
             Only used in SPMD functions.                  
          </description>
        </flag>
        <flag name="FinverseSwap" default="FALSE" >
          <description>
                  If true, the AVIS_MIN and AVIS_MAX values for this
                  index vector have to be swapped.
          </description>
        </flag>
	<flag name="GenericMarker" default="FALSE" >
	  <description> 
	  This Boolean may be used by any local traversal,
	  as long as you promise to reset it to its default
	  value when you are done. At present, it is used
	  by EDFA and LFU.
	  </description>
        </flag>	 
	<flag name="IsScalarized" default="FALSE" >
	  <description> 
	  Used by LACSO to indicate that a small array
	  argument or result has been scalarized. Its only
	  function is to prevent us from doing the scalarization
	  more than once.
	  </description>
        </flag>	 
      </flags>
    <checks>
      <check name="CHKavisReflection" />
      <check name="CHKavisSsaassignNodeType" />
    </checks>
    </node>
<!--

  N_mt :

-->
    <node name="MT">
      <sons>
        <son name="Region">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Fundef" inconstructor="no" >
          <type name="ExtLink">
            <targets>
              <target mandatory="yes">
                <node name="Fundef" />
                <phases>
                  <unknown />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_ex :

-->
    <node name="EX">
      <sons>
        <son name="Region">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_st :

-->
    <node name="ST">
      <sons>
        <son name="Region">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
    
<!--

  N_cudast :

-->
    <node name="Cudast">
      <sons>
        <son name="Region">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
    
<!--

  N_with :

-->
    <node name="With">
      <sons>
        <son name="Part">
          <description>
	    Definition of one partition of a with-loop.
	  </description>
          <targets>
            <target mandatory="yes">
              <node name="Part" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Code">
          <description>
	    Chain of codes associated with one or more partitions 
	    in the WL. Codes may be shared by more than one partition:
	    each partition has an attribute, PART_CODE, that points to
	    a WITH_CODE block. 
	  </description>
          <targets>
            <target mandatory="yes">
              <node name="Code" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="WithOp">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Parts" default="-1" inconstructor="no" >
          <description>
          The number of partitions in this with-loop.
          I have no idea what the -1 indicates.
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Pragma" inconstructor="no" >
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Pragma" />
                <phases>
                  <range from="scp_prs" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="In_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Referenced" inconstructor="no" >
          <description>
          The total number of RHS references to the result of this WL.
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="opt_cyc_wlf"     to="opt_cyc_wlf" />
                  <range from="opt_saacyc_awlfi" to="opt_saacyc_awlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Referenced_Fold" default="0">
          <description>
            The number of RHS references, within a potential consumerWL,  
            to the result of this WL, by the WL at
            Referenced_consumerWL. WLF and AWLF can fold WLs only
            if this field and WITH_REFERENCED are equal.
            The only rationale for this restriction is that it prevents
            the same producerWL element from being computed more than once.
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="opt_cyc_wlf"      to="opt_cyc_wlf" />
                  <range from="opt_saacyc_awlfi" to="opt_saacyc_awlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Referenced_consumerWL" default ="NULL" >
          <description>
            The first consumerWL that refers to the result created by
            this putative producerWL. See Referenced_Fold.
          </description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <unknown />
                <phases>
                  <range from="opt_saacyc_awlfi" to="opt_saacyc_awlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="References_Folded" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="opt_cyc_wlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SelMax" inconstructor="no" >
          <description>
            Maximum number of F_sel_VxA_ selections found in any of
            the code parts. This information is inferred by the WLSELC
            (WithLoopSelectionCount) traversal.
          </description>
          <type name="Integer">
            <targets>        <node name="Cudast" />
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="opt_cyc_wlprop" />
                  <phase name="opt_cyc_wlprop" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Cost" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="opt_cyc_awlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dist" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Access" inconstructor="no" >
          <description>
            A LUT containing information about the memory access patterns of
            relatively free arrays, for the distributed backend.
          </description>
          <type name="LUT">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="pc_ima" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsFoldable" />
        <flag name="Cudarizable" default="FALSE" />
        <flag name="hasRC" default="FALSE" />
        <flag name="IsDependent" />
        <flag name="isAWLFFoldable" default="FALSE" />
        <flag name="containsFunAps" >
          <description>
             indicates whether any partition contains an application
             of a user defined function. This information is inferred in
             the WLSELC (WithLoopSelectionCount) traversal.
          </description>
        </flag>

      </flags>
    </node>
<!--

  N_part :

-->
    <node name="Part">
      <sons>
        <son name="WithId">
          <targets>
            <target mandatory="yes">
              <node name="Withid" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Generator">
          <targets>
          <target mandatory="yes">
              <node name="Generator" />
              <node name="Default" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Part" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Code" inconstructor="yes">
          <description>
	  A pointer to the WITH_CODE block that contains the code
	  for this partition.  if present, the used counter for the code
            needs to be increased.</description>
          <type name="CodeLink">
            <targets>
              <target mandatory="yes">
                <node name="Code" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="InnerWlidxAssign" inconstructor="no">
         <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Assign" />
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ThreadBlockShape" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="cuda_acuwl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsCopy" >
          <description>
            Set to true if this WL partition is a copy partition.
	    I.e., it copies, without an index vector offset, elements of the
	    producer-WL partition.
	    This value is critical to optimizations that reuse
	    memory by performing in-placed indexed assigns into a small
	    part of a matrix. E.g., Gaussian Elimination.
	  </description>
	</flag>
        <flag name="IsRefcounted" default="TRUE" />
        <flag name="Cudarizable" default="FALSE" />
        <flag name="IsConsumerPart"  default="FALSE">
          <description> 
            Set to true if this WL partition has been determined
            to be a consumer-WL, and a noteintersect has
            been attached to it.
            This is used by the cubeslicer to allow it to slice
            cubes in CUBSLpart.
	  </description>
	</flag>
      </flags>
    </node>
<!--

  N_withid :

-->
    <node name="Withid">
      <sons>
        <son name="Vec">
          <targets>
            <target mandatory="yes">
              <node name="SPIds" />
              <phases>
                <range from="initial" to="ptc_ivd" />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Ids" />
              <phases>
                <range from="ptc_ivd" to="mem_alloc" />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
          <description>This is the vector form of a WL generator. After explicit allocation (EMAL), Vec points to 
            an N_id node.</description>
	</son>
        <son name="Ids">
          <targets>
            <target mandatory="no">
              <node name="Ids" />
              <phases>
                <range from="ptc_ivd" to="mem_alloc" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="SPIds" />
              <phases>
                <range from="initial" to="ptc_ivd" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
          <description> This is the scalarized form of a WL generator. After explicit allocation (EMAL), Ids points to 
            an N_exprs-list of N_id nodes.</description>
	</son>
        <son name="Idxs" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Ids" />
              <phases>
                <range from="opt_wlidx" to="mem_alloc" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
	    <description>This is a chain of indices into the ravels of the results of genarray and modarray withloops. Once they are explicitly allocated in mem_alloc, they are transformed from identifier definitions (N_ids) into use sites (N_exprs of N_id).</description>
	</son>
      </sons>
      <attributes>
      </attributes>
      <flags>
        <flag name="VecNeeded" />
      </flags>
    </node>
<!--

  N_generator :

-->
    <node name="Generator">
      <sons>
        <son name="Bound1">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <range from="scp_prs" to="final" />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Dot" />
              <phases>
                <range from="scp_prs" to="pre_acn" />
              </phases>
            </target>
          </targets>
          <description>Bound must be an N_id or an N_array, except that, in 
                  saacyc, it must be an N_id. </description>
        </son>
        <son name="Bound2">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <range from="scp_prs" to="final" />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Dot" />
              <phases>
                <range from="scp_prs" to="pre_acn" />
              </phases>
            </target>
          </targets>
          <description>Bound must be an N_id or an N_array, except that, 
                  in saacycit must be an N_id. </description>
        </son>
        <son name="Step">
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Width">
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="GenWidth" default="NULL">
          <targets>
            <target mandatory="no" >
              <set name="Expr" />
              <phases>
                <range from="opt_cyc" to="opt_wrci" />
              </phases>
            </target>
          </targets>
          <description>
            GENWIDTH contains a vector resulting from subtracting BOUND1 from BOUND2. 
            GENWIDTH is introduced by wlsimplification which puts the operations performing the subtraction 
            in front of the loop. In many cases, the partial evaluation infrastructure can determine 
            a value for GENWIDTH although the bounds are not known at compile time.
            Example: BOUND1 = [a], BOUND2 = [b], where b = a + [1] => GENWIDTH = [1].
             GENWIDTH then serves three purposes: First, it is used by wlsimplicition to identify 
             empty generators which can then be eliminated. Second, it is used in constant folding 
             to propagate static index vector knowledge for one-element generators. 
             Finally, it is used by the with-loop reuse candidate inference mechanism 
             to identify further reuse candidates in situations where a WL A performs 
             mainly B[iv] except in exactly one generator where B[iv+off] is selected.
             If off >= GENWIDTH, then B is a reuse candidate for A. 
             All GENWIDTH annotations are removed by wrci, the remaining computations are removed by dcr.
          </description>
        </son>
      </sons>
      <attributes>
        <attribute name="Op1" inconstructor="yes">
          <type name="Prf">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>        
        </attribute>
        <attribute name="Op2" inconstructor="yes">
          <type name="Prf">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_default :

-->
    <node name="Default">
      <sons></sons>
      <attributes></attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_code :

-->
    <node name="Code">
      <sons>
        <son name="CBlock">
	<description> 
	 A possibly empty list of N_assigns that correspond to the set
	 of expressions that appear within the curly braces
	 that (may) follow a WL generator specification.
	</description> 
          <targets>
            <target mandatory="no">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="CExprs">
	<description> 
	 A non-empty list of N_exprs that represent the expressions
	 that create the result elements associated with
	 each WL partition generator.
	</description> 
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Code" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Used" default="0" mandatory="yes" inconstructor="no">
	<description> Reference count - the number of PART_CODE
	 entries that point to this code block.
	</description>
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Id" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="final" /> <!-- TODO misc phase? -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WLAA_Info" default="NULL" inconstructor="no">
          <type name="AccessInfo">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="initial" />
		  <!-- this is only used during wlaa and array padding! -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="IRA_Info" default="NULL" inconstructor="no">
          <type name="ReuseInfo">
            <targets>
              <target mandatory="no">
                <any />
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="TSI_TileShp" inconstructor="no">
          <type name="ShpSeg">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="Visited" />
        <flag name="HasResolveableDependencies" />
        <flag name="HasExtrema" default="FALSE">
          <description> 
            Set to true if the WITHIDs for this code block have
            extrema attached to them. This keeps IVEXI from
            attaching extrema more than once per block.
	  </description>
	</flag>
      </flags>
    </node>
<!--

  N_with2 :

-->
    <node name="With2">
      <sons>
        <son name="WithId">
          <targets>
            <target mandatory="yes">
              <node name="Withid" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Segs">
          <targets>
            <target mandatory="yes">
              <node name="WLseg" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Code">
          <targets>
            <target mandatory="yes">
              <node name="Code" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="WithOp">
          <targets>
            <target mandatory="yes">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Dims" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Pragma" default="NULL" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Pragma" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="In_Mask" inconstructor="no">
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no">
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no">
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Omp_Private_List" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ReUse" inconstructor="no">
          <type name="DFMask">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="rci" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dist" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Access" inconstructor="no" >
          <description>
            A LUT containing information about the memory access patterns of
            relatively free arrays, for the Distributed backend.
          </description>
          <type name="LUT">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="pc_ima" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
       </attributes>
      <flags>
	<flag name="NeedsOffset" />
	<flag name="Parallelize" />
	<flag name="HasNaiveOrdering" default="FALSE">
	  <description>True, iff the naive compilation scheme was used and thus the with-loop is not computed in canonical order.</description>
	</flag>
    <flag name="Cudarizable" default="FALSE" />
      </flags>
    </node>
<!--

  N_genarray :

-->
    <node name="Genarray">
      <description>withloop generate array operation.</description>
      <sons>
        <son name="Shape">
          <description>
            The frame shape of the result. The WL result shape
            is: Shape ++ shape(Default).
          </description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Default">
          <description>
           The default cell of the result.
          </description>
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Mem" default="NULL">
          <targets>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Sub" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Id" />
              <phases>
                <range from="pc_mmv" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="RC" default="NULL">
                <description>
                   RC(xxx) encodes that xxx is a reuse candidate for this WL, 
                   i.e., that the result of this WL or, more specifically,
                   the operator the RC(xxx) is attached to, can potentially 
                   be stored in xxx. This information is inferred at the end
                   of the optimisations, IIRC but only used later on 
                   in reference counting to perform memory reuse.
                </description>

          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <range from="opt_wrci" to="mem_rci" />
              </phases>
            </target>
          </targets>
	</son>
        <son name="PRC" default="NULL">
                <description>
                   PRC(xxx) encodes that xxx is a partial reuse candidate for 
		   this WL, i.e., that the result of this WL or, more 
		   specifically, the operator the PRC(xxx) is attached to, 
		   can potentially be stored in an extension of xxx. This 
		   information is inferred at the end of the optimisations, 
		   but only used later on in reference counting to perform 
		   data reuse of xxx is a prefix of the result.
                </description>

          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <range from="opt_wrci" to="mem_rci" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="DefShapeExpr" default="NULL">
          <description>For with3 loops, the default element is given by genarray( DefShapeExpr, Default) where default denotes the default element of the genarray. Only present if a default element is present, as well.</description>
          <targets>
            <target mandatory="no">
              <node name="Array" />
              <phases>
                <range from="wlt_wlsd" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="SPEXPR" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="sp" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Idx" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <range from="opt_wlidx" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_modarray :

-->
    <node name="Modarray">
      <description>withloop operation</description>
      <sons>
        <son name="Array">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Mem" default="NULL">
          <targets>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Sub" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Id" />
              <phases>
                <range from="pc_mmv" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="RC" default="NULL">
                <description>
                   RC(xxx) encodes that xxx is a reuse candidate for this WL, 
                   i.e., that the result of this WL or, more specifically,
                   the operator the RC(xxx) is attached to, can potentially 
                   be stored in xxx. This information is inferred at the end
                   of the optimisations, IIRC but only used later on 
                   in reference counting to perform memory reuse.
                </description>
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <range from="opt_wrci" to="mem_rci" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="SPEXPR" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="sp" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Idx" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <range from="opt_wlidx" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_spfold :

-->
    <node name="SPFold">
      <description>withloop operation (SP version)</description>
      <sons>
        <son name="Neutral">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Guard" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <range from="scp" to="sim_flt" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="SPId" />
              <phases>
                <range from="sim_flt" to="ptc_ivd" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="Id" />
              <phases>
                <range from="ptc_ivd" to="ptc_cwf" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Fn" default="NULL">
          <description>The reduction function.
          </description>
            <targets>
              <target mandatory="no">
                <node name="SPId" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
        </son>
        <son name="Args" default="NULL">
          <description>Relatively free arguments to the reduction function
                       in case of the partial application.
          </description>
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="SPEXPR" inconstructor="no">
          <description> Used in sac.y only in order to ship the WL body result
                        into the N_code!
          </description>
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="sp" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_fold :

-->
    <node name="Fold">
      <description>withloop operation</description>
      <sons>
        <son name="Neutral">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Args" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Guard" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Id" />
              <phases>
                <range from="ptc_cwf" to="ewl_accu" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Initial" default="NULL">
          <description>
            MUTC the value to start folding from.
          </description>
          <targets>
            <target mandatory="no">
              <node name="Id" />
              <phases>
                <range from="wlt_wlsd" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="PartialMem" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Fundef" inconstructor="yes">
          <type name="ExtLink">
            <targets>
              <target mandatory="yes">
                <node name="Fundef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="OmpReductionOp" default="(omp_reduction_op)0" inconstructor="no">
          <description>
            This attribute indicates the type of OpenMP reducation operator.
          </description>
          <type name="OmpOP">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsPartialFold" >
          <description>
            Flag to indicate if the fold performs a partial CUDA fold.
          </description>
        </flag>
      </flags>
    </node>
<!--

  N_break :

-->
    <node name="Break">
      <description>Withloop operation for stopping folding</description>
      <sons>
        <son name="Mem" default="NULL">
          <targets>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_propagate:

-->
    <node name="Propagate">
      <description>Withloop operation for propagating objects between iterations</description>
      <sons>
        <son name="Default">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_wlseg :

-->
    <node name="WLseg">
      <sons>
        <son name="Contents">
          <targets>
            <target mandatory="yes">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLseg" />
              <phases>
                <range from="wlt_wltr" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="IdxInf" default="NULL">
          <description>Gives the infimum of all indices in the iteration space of this segment. Note that for static segments (ISDYNAMIC == FALSE), this must be an array of integer constants.</description>
          <targets>
            <target mandatory="yes">
              <node name="Array" />
              <phases>
                <range from="wlt_wltr" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="IdxSup" default="NULL">
          <description>Gives the supremum of all indices in the iteration space of this segment. Note that for non-dynamic segments (ISDYNAMIC == FALSE), this must be an array of integer constants.</description>
          <targets>
            <target mandatory="yes">
              <node name="Array" />
              <phases>
                <range from="wlt_wltr" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="UBV" default="NULL">
	  <description>This son is only present if the segment is static (ISDYNAMIC == FALSE). The length of the vector is replicated by the BLOCKS attribute.</description>
          <targets>
            <target mandatory="no">
              <node name="Array"/>
              <phases>
                <range from="wlt_wltr" to="final" />
              </phases>
            </target>
          </targets>
        </son>
	<!--
        <attribute name="BV" default="NULL" inconstructor="no">
          <type name="IntegerPointerArray">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="wlt_wltr" to="cg_cpl" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
	-->
        <son name="BV" default="NULL">
	  <description>This son contains an N_exprs chain of integer vectors encoded as N_array nodes. The number of expressions in the chain needs to be equal to the BLOCKS attribute. Each vector, in turn, needs to have exactly DIMS many elements.</description>
          <targets>
            <target mandatory="no">
              <node name="Exprs"/>
              <phases>
                <range from="wlt_wltr" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="SV" default="NULL">
	  <description>This son is only present if the segment is static (ISDYNAMIC == FALSE). The length of the vector is replicated by the BLOCKS attribute.</description>
          <targets>
            <target mandatory="no">
              <node name="Array"/>
              <phases>
                <range from="wlt_wltr" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="HomSV" default="NULL">
	  <description>This son is only present if the segment is static (ISDYNAMIC == FALSE). The length of the vector is replicated by the BLOCKS attribute.</description>
          <targets>
            <target mandatory="no">
              <node name="Array"/>
              <phases>
                <range from="wlt_wltr" to="final" />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Dims" inconstructor="yes">
	  <description>Gives the number of dimensions of this segment, i.e., the rank of the computed result.</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Blocks" default="0" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Scheduling" inconstructor="no">
          <type name="Scheduling">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                
                  <range from="wlt_wltr" to="final" />
                <!--
                  <range from="mt_sched" to="pc_moi" />
                -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="TaskSel" inconstructor="no">
          <type name="TaskSel">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                <!--
                  <range from="wlt_wltr" to="final" />
                -->
                  <phase name="pc_mmv" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsDynamic">
	  <description>Signals that this segment has bounds that are not statically known.</description>
	</flag>
      </flags>
    </node>
<!--

  N_wlblock :

-->
    <node name="WLblock">
      <sons>
        <son name="Bound1">
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Bound2">
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Step">
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="NextDim">
          <targets>
            <target mandatory="no">
              <node name="WLblock" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Contents">
          <targets>
            <target mandatory="no">
              <node name="WLublock" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="no">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLblock" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dim" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_wlublock :

-->
    <node name="WLublock">
      <sons>
        <son name="Bound1">
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Bound2">
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Step">
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="NextDim">
          <targets>
            <target mandatory="no">
              <node name="WLublock" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Contents">
          <targets>
            <target mandatory="no">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLublock" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dim" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_wlstride :

-->
    <node name="WLstride">
      <sons>
        <son name="Bound1">
	  <description>Gives the lower bound of this stride. This needs to be an N_num if ISDYNAMIC is not set.</description>
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Bound2">
	  <description>Gives the lower bound of this stride. This needs to be an N_num if ISDYNAMIC is not set.</description>
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Step">
	  <description>Gives the step of this stride. This needs to be an N_num if ISDYNAMIC is not set.</description>
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Contents">
          <targets>
            <target mandatory="yes">
              <node name="WLgrid" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dim" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Part" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Part" />
                <phases>
                  <range from="wlt_wltr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="DoUnroll" />
        <flag name="IsModified">
          <description> Used in wltransform.  </description>
        </flag>
	<flag name="IsDynamic" default="FALSE">
	  <description>Signals that this stride has bounds or a step that are not statically known.</description>
	</flag>
      </flags>
    </node>
<!--

  N_wlgrid:

-->
    <node name="WLgrid">
      <sons>
        <son name="Bound1">
	  <description>Encodes the lower bound of the grid. This needs to be a N_num node if ISDYNAMIC is not set.</description>
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Bound2">
	  <description>Encodes the upper bound of the grid. This needs to be a N_num node if ISDYNAMIC is not set.</description>
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="NextDim">
          <targets>
            <target mandatory="no">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLgrid" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dim" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Code" inconstructor="yes">
          <description>if present, the used counter for the code
            needs to be increased</description>
          <type name="CodeLink">
            <targets>
            <target mandatory="yes">
                <node name="Code" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsFitted" />
        <flag name="DoUnroll" />
        <flag name="IsNoOp" />
        <flag name="IsModified">
          <description>Used in wltransform.</description>
        </flag>
	<flag name="IsDynamic" default="FALSE">
	  <description>Signals that this grid has bounds that are not statically known.</description>
	</flag>
      </flags>
    </node>
<!--

  N_dataflownode :

-->
    <node name="Dataflownode">
      <sons></sons>
      <attributes>
	<attribute name="Graph" inconstructor="yes">
	  <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Dataflowgraph"/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
	<attribute name="Assign" inconstructor="yes">
	  <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Assign" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
	<attribute name="Name" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="Dependent" default="NULL" inconstructor="no">
	  <type name="NodeList">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="UsedNodes" default="NULL" inconstructor="no">
	  <type name="NodeList">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="RefCount" default="1" inconstructor="no">
	  <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="ExecMode" default="MUTH_ANY" inconstructor="no">
	  <type name="MTExecMode">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="DFGThen" default="NULL" inconstructor="no">
	  <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Block" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
	<attribute name="DFGElse" default="NULL" inconstructor="no">
	  <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Block" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
	<attribute name="RefLeft" inconstructor="no">
	  <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="AssignmentsRearrange" />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="IsUsed" />
      </flags>
    </node>
<!--

  N_dataflowgraph :

-->
    <node name="Dataflowgraph">
      <sons></sons>
      <attributes>
        <attribute name="Members" default="NULL">
	  <type name="NodeList">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="Source" default="NULL" inconstructor="no">
	  <type name="Node">
            <targets>
              <target>
                <node name="Dataflownode"/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
        </attribute>
	<attribute name="Sink" default="NULL" inconstructor="no">
	  <type name="Node">
            <targets>
              <target mandatory="yes">
                <node name="Dataflownode"/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
	<attribute name="MyHomeDFN" default="NULL" inconstructor="no">
	  <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Dataflownode"/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_import :

-->
    <node name="Import">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <set name="Interface" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Symbol">
          <targets>
            <target mandatory="no">
              <node name="Symbol" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Mod" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_export :

-->
    <node name="Export">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <set name="Interface" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Symbol">
          <targets>
            <target mandatory="no">
              <node name="Symbol" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_use :

-->
    <node name="Use">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <set name="Interface" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Symbol">
          <targets>
            <target mandatory="no">
              <node name="Symbol" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Mod" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_provide :

-->
    <node name="Provide">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <set name="Interface" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Symbol">
          <targets>
            <target mandatory="no">
              <node name="Symbol" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_symbol :

-->
    <node name="Symbol">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Symbol" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Id" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="Used" default="FALSE">
	  <description>Used to flag those symbols that are in fact used, that is, those that do exist in the module.</description>
	</flag>
      </flags>
    </node>
<!--

  N_set :

-->
    <node name="Set">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Set" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Member" inconstructor="yes">
          <type name="ExtLink" >
            <targets>
              <target mandatory="yes" >
                <node name="Objdef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_constraint :

-->
    <node name="Constraint">
      <sons>
        <son name="Expr">
          <targets>
            <target mandatory="yes">
              <node name="Prf" />
              <node name="Ap" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Constraint" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="PredAvis" inconstructor="yes">
          <type name="Link" >
            <targets>
              <target mandatory="yes" >
                <node name="Avis" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_ret :

-->
    <node name="Ret">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Ret" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Type" inconstructor="yes">
	  <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="Linksign" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no" >
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsAliasing" default="TRUE" />
        <flag name="IsArtificial" >
	  <description> Set to true if the given return value was introduced when resolving reference arguments and thus will be removed again later on. Set to false for all other return values.
	  </description>
	</flag>
        <flag name="IsRefcounted" default="TRUE" />
        <flag name="HasLinksignInfo" />
        <flag name="IsCReturn" />
        <flag name="WasRemoved" default="FALSE" />
        <flag name="IsUnique" default="FALSE" />
      </flags>
    </node>
<!--

  N_ids :

-->
    <node name="Ids">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Ids" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Avis" inconstructor="yes">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Avis" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    <checks>
      <check name="CHKattribsIds" />
    </checks>
    </node>
<!--

  N_nums :

-->
    <node name="Nums">
     <description>  Linked list of Integers, used only in scanner/parser </description>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Nums" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Val" inconstructor="yes">
	  <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_globobj :

-->
    <node name="Globobj">
      <sons>
      </sons>
      <attributes>
        <attribute name="Objdef" inconstructor="yes">
	  <type name="ExtLink">
            <targets>
              <target mandatory="yes">
              <node name="Objdef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_spid :

-->
    <node name="SPId">
      <sons></sons>
      <attributes>
        <attribute name="Ns" inconstructor="yes">
	  <type name="Namespace">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="initial" to="ptc_goi" />
                </phases>
              </target>
              <!--  <target mandatory="yes">
                      <any />
                      <phases>
                        <phase name="ptc_gon"/>
                      </phases>
                    </target> -->
            </targets>
          </type>
	</attribute>
        <attribute name="Name" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_spids :

-->
    <node name="SPIds">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="SPIds" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_spap :

-->
    <node name="SPAp">
      <sons>
        <son name="Id">
          <targets>
            <target mandatory="yes">
              <node name="SPId" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
        <son name="Args">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="SpawnPlace" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <phases>
                 <all/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsSpawned">
          <description>This function is spawned when using functional
          parallelism</description>
        </flag>
        <flag name="IsRemote">
          <description>
            This function call should be spawned on another resource
          </description>
        </flag>
      </flags>
    </node>
<!--

  N_error :

-->
    <node name="Error">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no" >
              <node name="Error" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="message" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="anyphase" inconstructor="yes">
          <type name="CompilerPhase">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--
  
  N_funbundle :

-->
    <node name="FunBundle">
      <sons>
        <son name="Fundef">
          <targets>
            <target mandatory="no" >
              <node name="Fundef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no" >
              <node name="Fundef" />
              <node name="FunBundle" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Ns" inconstructor="yes">
          <type name="Namespace">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ExtName" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Arity" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsXtBundle">
          <description>Used to tack a funbundle as an XT version of another
            bundler</description>
        </flag>
        <flag name="IsStBundle">
          <description>Used to tack a funbundle as an ST version of another
            bundler</description>
        </flag>
      </flags>
    </node>
<!--

  N_with3 :

-->
    <node name="With3">
      <description>Used to model the 1d with-loop used by the mutc backend.  The with3 loop is nested to provide the needed number of detentions</description>
      <sons>
        <son name="Ranges">
	  <description>Gives the set of ranges (generators) this with-loop is defined for. Needs to be a full partition of the outer-most dimension of the result.</description>
          <targets>
            <target mandatory="yes">
              <node name="Range" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Operations">
	  <description>The operations this with-loop computes.</description>
          <targets>
            <target mandatory="yes">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="In_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="popt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dist" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="UseConcurrentRanges" default="TRUE">
	  <description>Controls whether the ranges of a with3 will be computed concurrently, or whether the ranges are sequentialised</description>
	</flag>
        <flag name="Dense" default="TRUE">
          <description>This with3 covers all of the index space without gaps</description>
        </flag>
	<flag name="IsTopLevel" default="FALSE">
	  <description>This with3 represents a top-level stride of a former with2. This is used to indetify into what array the IIRR (see N_range) indexes.</description>
	</flag>
      </flags>
    </node>
<!--

  N_range :

-->
    <node name="Range">
      <description>The generator of a with3</description>
      <sons>
        <son name="Index">
	  <description>Scalar index of this range.</description>
          <targets>
            <target mandatory="yes">
              <node name="Ids" />
              <phases>
                <range from="wlt_wlsd" to="mem_alloc" />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <range from="mem_alloc" to="pc_lw3" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="LowerBound">
	  <description>Lower bound of this range.</description>
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="UpperBound">
	  <description>Upper bound of this range.</description>
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="ChunkSize">
	  <description>Chunk size of this range. If non-NULL, this range is not computed by computing each cell alone, but by computing vectors of ChunkSize many elements per iteration. Note that the total number of elements computed by this range needs to be a multiple of ChunkSize! If the range is 0 then the chunk must be 1!</description>
          <targets>
            <target mandatory="no">
              <node name="Num" />
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Body">
	  <description>Block computed for each iteration.</description>
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Results">
	  <description>Values assigned to the result for each iteration.</description>
          <targets>
            <target mandatory="yes">
              <node name="Exprs" />
              <phases>
                <range from="wlt_wlsd" to="pc_lw3" />                
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Ap" />
              <phases>
                <range from="pc_lw3" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Idxs">
          <targets>
            <target mandatory="no">
              <node name="Ids" />
              <phases>
                <range from="wlt_wlsd" to="mem_dr" />
              </phases>
            </target>
          </targets>
	  <description>This is a chain of indices into the ravels of the results of genarray and modarray withloops. Once they are explicitly used in mem_alloc and mem_dr, this special reference is freed.</description>
	</son>
	<son name="IIRR" default="NULL">
	  <description>This is a chain of indices into the ravel of the overall result of genarray/modarray withloops. It corresponds (value-wise) to the wlidx of the origininal with2 and is used in optimisations like data-reuse to identify selections into the reused array. This chain only exists for the ranges of the innermost with3 of a transformed with2, as it is only defined in that level.</description>
	  <targets>
	    <target mandatory="no">
	      <node name="Exprs" />
	      <phases>
	        <range from="wlt_wlsd" to="mem_dr" />
	      </phases>
	    </target>
	  </targets>
	</son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Range" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="BlockSize" default="0">
	  <description>Used for resource allocation. Corresponds to the blocksize argument of the create instruction in mutc.</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="G2SInstrs" default="0">
	  <description>Used for temporarily storing global to shared memory data load instructions.</description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Assign" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>

      </attributes>
      <flags>
        <flag name="IsGlobal" default="FALSE">
	  <description>True iff this range should be distributed globally over multiple cores</description>
	</flag>
        <flag name="IsBlocked" default="FALSE">
	  <description>True iff this range is blocked by the blocking pragma</description>
	</flag>
        <flag name="IsFitting" default="FALSE">
	  <description>True iff this range is a fitting range</description>
	</flag>
        <flag name="NeedCudaUnroll" default="FALSE">
	  <description>True iff this range needs to be unrolled by the CUDA compiler</description>
	</flag>
      </flags>
    </node>
<!--

  N_idag :

-->
    <node name="Idag">
      <description>
        Node to represent infinite graphs as needed for the subtyping relation
        of the array shape type component
      </description>
      <sons>
        <son name="VFams">
          <targets>
            <target mandatory="no">
              <node name="Idagvfam" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="EFams">
          <targets>
            <target mandatory="no">
              <node name="Idagefam" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Dag" inconstructor="yes">
          <type name="Dag">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_idagvfam :

-->
    <node name="IdagVFam">
      <description>
        represents the head entry of a vertex family chain
      </description>
      <sons>
        <son name="Vertices" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="IdagVertices" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Froms" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="IdagEFams" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Tos" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="IdagEFams" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="IdagVFam" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Cmpfun" inconstructor="yes">
          <type name="IdagFun">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_idagefam :

-->
    <node name="IdagEFam">
      <description>
        represents the head entry of a edge family chain
      </description>
      <sons>
        <son name="From">
          <targets>
            <target mandatory="yes">
              <node name="IdagVFam" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="To">
          <targets>
            <target mandatory="yes">
              <node name="IdagVFam" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="IdagEFam" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Checkfun" inconstructor="yes">
          <type name="IdagFun">
            <targets>
              <target mandatory="yes">
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_idagvertices :

-->
    <node name="IdagVertices">
      <description>
        a simple chain of links to vertices
      </description>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Idagvertices" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Vertex" inconstructor="yes">
          <type name="Vertex">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
<!--

  N_idagefams :

-->
    <node name="IdagEFams">
      <description>
        a simple chain of links to edge family entries
      </description>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Idagefams" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="EFam" inconstructor="yes" >
          <type name="ExtLink">
            <targets>
              <target mandatory="yes">
                <node name="Idagefam" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
    </node>
        <!--
         
         N_withs :
         
         -->
        <node name="Withs">
          <description>
            a simple chain of with-loops, used by distributed backend to support
            different transformations of with-loop code for each target architecture.
          </description>
          <sons>
            <son name="With">
              <targets>
                <target mandatory="yes">
                  <set name="Withloop" />
                  <phases>
                    <all />
                  </phases>
                </target>
              </targets>
            </son>
            <son name="Next">
              <targets>
                <target mandatory="no">
                  <node name="Withs" />
                  <phases>
                    <all />
                  </phases>
                </target>
              </targets>
            </son>
          </sons>
          <attributes>
          </attributes>
          <flags> <flag name="DummyFlag" default="FALSE"/> </flags>
        </node>
  </syntaxtree>
</definition>

