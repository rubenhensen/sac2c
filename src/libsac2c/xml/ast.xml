<?xml-stylesheet href="ast2html.xsl" type="text/xsl" name="HTML" media="screen"?>
<!-- $Id$ -->
<definition>
  <attributetypes>
    <type name="String" ctype="char*" init="NULL"
    copy="function" />
    <type name="SharedString" ctype="char*" init="NULL"
    copy="function" />
    <type name="Namespace" ctype="namespace_t*" init="NULL"
    copy="function" />
    <type name="Integer" ctype="int" init="0" copy="literal" />
    <type name="Long" ctype="long" init="0" copy="literal" />
    <type name="Bool" ctype="bool" init="FALSE" copy="literal" />
    <type name="Float" ctype="float" init="0.0" copy="literal" />
    <type name="Double" ctype="double" init="0.0" copy="literal" />
    <type name="Char" ctype="unsigned char" init="'\0'" copy="literal" />
    <type name="OldType" ctype="types*" init="NULL"
    copy="function" persist="no" />
    <type name="Node" ctype="node*" init="NULL" copy="function" />
    <!-- a Link pointing to a node within the tree -->
    <type name="Link" ctype="node*" init="NULL" copy="hash" persist="yes" />
    <!-- a Link pointing outside of the current context, e.g. to another
         son of a module node -->
    <type name="ExtLink" ctype="node*" init="NULL" copy="hash" persist="yes" />
    <!-- a Link pointing from a N_part node to a N_code node -->
    <type name="CodeLink" ctype="node*" init="NULL" copy="hash" persist="yes" />
    <type name="FileType" ctype="file_type" init="F_unknown"
    copy="literal" />
    <type name="LUT" ctype="lut_t*" init="NULL" copy="function" persist="no" />
    <type name="Prf" ctype="prf" init="0" copy="literal" />
    <type name="NodeList" ctype="nodelist*" init="NULL"
    copy="function" />
    <type name="SharedNodeList" ctype="nodelist*" init="NULL"
    copy="function" />
    <type name="DFMask" ctype="dfmask_t*" init="NULL"
    copy="function" persist="no" />
    <type name="DFMaskBase" ctype="dfmask_base_t*" init="NULL"
    copy="function" persist="no" />
    <type name="NewType" ctype="ntype*" init="NULL"
    copy="function" />
    <type name="ArgTab" ctype="argtab_t*" init="NULL"
    copy="function" />
    <type name="IndexPointer" ctype="index_info*" init="NULL"
    copy="function" />
    <type name="Shape" ctype="shape*" init="NULL"
    copy="function" />
    <type name="SimpleType" ctype="simpletype" init="T_unknown" 
    copy="literal" />
    <type name="AccessInfo" ctype="access_info_t*" init="NULL"
    copy="function" persist="no" />
    <type name="AccessFeature" ctype="feature_t" init="0"
    copy="literal"  />
    <type name="ShpSeg" ctype="shpseg*" init="NULL"
    copy="function" />
    <type name="IntegerPointer" ctype="int*" init="NULL"
    copy="function" />
    <type name="IntegerPointerArray" ctype="int*" size="7"
    init="NULL" copy="function" />
    <type name="Scheduling" ctype="sched_t*" init="NULL"
    copy="function" persist="no" />
    <type name="TaskSel" ctype="tasksel_t*" init="NULL"
    copy="function" persist="no" />
    <type name="NodePointer" ctype="node**" init="NULL"
    copy="function" />
    <type name="BitField" ctype="int" init="0" copy="literal" />
    <type name="Constant" ctype="constant*" init="NULL"
    copy="function" />
    <type name="MTExecMode" ctype="mtexecmode_t" init="MUTH_ANY"
    copy="literal" />
    <type name="StringSet" ctype="stringset_t*" init="NULL"
    copy="function" persist="no" />
    <type name="IndexInfo" ctype="index_info*" init="NULL"
    copy="function" persist="no" />
    <type name="TypeCheckingStatus" ctype="NTC_stat" init="NTC_not_checked"
    copy="literal" persist="yes" />
  </attributetypes>
  <traversals>
    <!-- id is the short id of the traversal 
         name is a descriptive name
	 default gives the default traversal mode
	   user  a user defined function
	   sons  TravSons
	   none  TravNone
	   error TravError
	 include the include file needed for the traversal
    -->
      <traversal id="SOSSK" name="Specialization Oracle for Static Shape Knowledge" default="sons" include="specialization_oracle_static_shape_knowledge.h" >
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Assign" />
          <node name ="Cond" />
          <node name="Exprs" />
          <node name="Fold" />
          <node name="Genarray" />
          <node name ="Modarray" />
          <node name="Generator" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Ret" />
          <node name="Return" />
          <node name="Prf" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Code" />
          <node name="Part" />
          <node name="Withid" />
          <node name="With" />
        </travuser>
      </traversal>
      <traversal id="LW3" name="Lift with3s into functions" default="sons" include="lift_with3_bodies.h" >
        <travuser>
          <node name="Module" />
          <node name="Range" />
        </travuser>
      </traversal>
      <traversal id="DST" name="Distribute threads" default="sons" include="distribute_threads.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="With3" />
          <node name="Range" />
        </travuser>
      </traversal>
      <traversal id="WLLOM" name="Withloop lock optimization marking" default="sons" include="wl_lock_optimization_marking.h" >
        <travuser>
          <node name="With" />
          <node name="Code" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Ids" />
          <node name="Id" />
          <node name="Prf" />
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="WLLOS" name="Withloop lock optimization shifting" default="sons" include="wl_lock_optimization_shifting.h" >
        <travuser>
        <node name="With" />
        <node name="Block" />
        <node name="Assign" />
        <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="PRT" name="Print Syntax Tree" default="user" include="print.h" >
        <travsons>
          <node name="SSAstack" />
          <node name="WLblock" />
          <node name="WLublock" />
          <node name="Nums" />
        </travsons>
      </traversal>
      <traversal id="DUP" name="Tree duplication" default="user" include="DupTree.h">
      </traversal>
      <traversal id="FREE" name="Free Tree" default="user" include="free_node.h" />
      <traversal id="UWT" name="Update Wrapper Types" default="sons" include="update_wrapper_type.h" >
        <travuser>
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="REN" name="Rename identifiers" default="sons" include="rename.h" >
        <travuser>
          <node name="Arg" />
          <node name="Vardec" />
          <node name="Id" />
          <node name="Ids" />
          <node name="WLsegVar" />
        </travuser>
      </traversal>
      <traversal id="MCG" name="Map Call Graph" default="sons" include="map_call_graph.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Ap" />
        </travuser>
      </traversal>
      <traversal id="MFT" name="Map Traversal on Fundefs" default="sons" include="map_fun_trav.h" >
        <travuser>
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="MAT" name="Map Traversal on Avis nodes" default="sons" include="map_avis_trav.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Avis" />
          <node name="Block" />
        </travuser>
      </traversal>
      <traversal id="GLF" name="Group Local functions" default="sons" include="group_local_funs.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
        </travuser>
      </traversal> 
      <traversal id="IVEXI" name="Index Variable Extrema Insertion" default="sons" include="ivextrema.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Block" />
          <node name="Assign" />
          <node name="With" />
          <node name="Part" />
          <node name="Let" />
          <node name="Code" />
        </travuser>
      </traversal> 
      <traversal id="UGLF" name="Ungroup Local functions" default="sons" include="ungroup_local_funs.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
        </travuser>
      </traversal> 
      <traversal id="PINL" name="Prepare inlining" default="sons" include="prepare_inlining.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Vardec" />
          <node name="Avis" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Arg" />
          <node name="Id" />
          <node name="Ids" />
        </travuser>
      </traversal>
      <traversal id="SBT" name="Serialize Build Stack" default="user" include="serialize_buildstack.h" />
      <traversal id="SET" name="Serialize Node Traversal" default="user" include="serialize_node.h" />
      <traversal id="SEL" name="Serialize Link Traversal" default="user" include="serialize_link.h" />
      <traversal id="AFB" name="Add Function Body Traversal" default="sons" include="add_function_body.h">
        <travuser>
          <node name="Fundef" />
          <node name="Return" />
          <node name="Block" />
          <node name="Arg" />
          <node name="Ap" />
        </travuser>
      </traversal>
      <traversal id="TP" name="Tag Preparation" default="sons" include="tag_preparation.h" >
        <travuser>
          <node name="Arg" />
        </travuser>
      </traversal>
      <traversal id="CTR" name="Converting to old type representation" default="sons" include="convert_type_representation.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Block" />
          <node name="Vardec" />
          <node name="Ret" />
        </travuser>
      </traversal>
      <traversal id="CUD" name="Cleanup Declarations" default="sons" include="cleanup_decls.h" >
        <travuser>
          <node name="Block" />
          <node name="Fundef" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Vardec" />
        </travuser>
      </traversal>
      <traversal id="F2L" name="Fun2Lac Traversal" default="sons" include="fun2lac.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Arg" />
        </travuser>
      </traversal>
      <traversal id="USSAT" name="UndoSSATransform Traversal" default="sons" include="UndoSSATransform.h" >
        <travuser>
          <node name="Assign" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Block" />
          <node name="Vardec" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Cond" />
          <node name="Funcond" />
        </travuser>
      </traversal>
      <traversal id="INFDFMS" name="Infer DataFlowMask Traversal" default="sons" include="infer_dfms.h" >
        <travuser>
          <node name="Assign" />
          <node name="Do" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Arg" />
          <node name="Code" />
          <node name="Range" />
          <node name="Ap" />
          <node name="Id" />
          <node name="Ids" />
          <node name="With" />
          <node name="With2" />
          <node name="With3" />
          <node name="Cond" />
          <node name="Block" />
        </travuser>
	<traverror>
          <node name="Icm" />
	</traverror>
      </traversal>
      <traversal id="RDFMS" name="Remove DataFlowMask Traversal" default="sons" include="remove_dfms.h" >
        <travuser>
          <node name="Do" />
          <node name="Fundef" />
          <node name="With" />
          <node name="With2" />
          <node name="With3" />
          <node name="Cond" />
          <node name="Block" />
        </travuser>
      </traversal>
      <traversal id="CMPT" name="Compare Tree Traversal" default="CMPTunknown" prefun="CMPTnodeType" include="compare_tree.h" >
        <travuser>
          <node name="Num" />
          <node name="Char" />
          <node name="Bool" />
          <node name="Float" />
          <node name="Double" />
          <node name="Type" />
          <node name="Str" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Array" />
          <node name="Prf" />
          <node name="Ap" />
          <node name="Generator" />
          <node name="Fold" />

          <node name="Block" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Return" />
          <node name="Cond" />
          <node name="Do" />
          <node name="Funcond" />
          <node name="Exprs" />
          <node name="Empty" />
          <node name="With" />
          <node name="Part" />
          <node name="Withid" />
          <node name="Code" />
          <node name="Genarray" />
          <node name="Modarray" />
        </travuser>
      </traversal>
      <traversal id="CHK" name="Check the Tree" default="user" ifdef="show_malloc" include="check.h" />
      <traversal id="CHKTST" name="Check the TreeTest" default="user" ifdef="show_malloc" include="checktst.h" />
      <traversal id="CHKM" name="Check the memspace" default="user" postfun="CHKMpostfun" ifdef="show_malloc" include="check_node.h" />
      <traversal id="HM" name="Handle Mops" default="sons" include="handle_mops.h" >
        <travuser>
          <node name="SPMop" />
        </travuser>
      </traversal>
      <traversal id="HWLG" name="Handle multi-generator with-loops"
                 default="sons" include="handle_with_loop_generators.h" >
        <travuser>
          <node name="Assign" />
          <node name="With" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="SPFold" />
          <node name="Propagate" />
        </travuser>
      </traversal>
      <traversal id="HWLO" name="Handle multi-operator with-loops"
                 default="sons" include="handle_with_loop_operators.h" >
        <travuser>
          <node name="Assign" />
          <node name="Let" />
          <node name="With" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="SPFold" />
          <node name="Propagate" />
        </travuser>
      </traversal>
      <traversal id="HZGWL" name="Handle zero-generator withloops"
                 default="sons" include="handle_zero_generator_with_loops.h" >
        <travuser>
          <node name="With" />
          <node name="Modarray" />
          <node name="Genarray" />
          <node name="SPFold" />
          <node name="Propagate" />
          <node name="Let" />
          <node name="Assign" />
          <node name="Return" />
        </travuser>
      </traversal>
      <traversal id="IUTC" name="Introduce User Trace Calls" default="sons" include="introduce_user_tracing_calls.h">
        <travuser>
          <node name="Fundef" />
          <node name="Arg" />
          <node name="SPIds" />
          <node name="Assign" />
          <node name="Return" />
          <node name="Block" />
        </travuser>
	<travnone>
	  <node name="Withid" />
	</travnone>
      </traversal>
      <traversal id="HD" name="Handle Dots" default="sons" include="handle_dots.h">
        <travuser>
          <node name="SPId" />
          <node name="With" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Dot" />
          <node name="SPAp" />
          <node name="Prf" />
          <node name="Assign" />
          <node name="SetWL" />
          <node name="SPId" />
        </travuser>
      </traversal>
      <traversal id="CSGD" name="Check and Simplify Generic Definitions" default="sons" include="check_and_simplify_generic_definitions.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Ret" />
          <node name="Avis" />
          <node name="Cast" />
          <node name="Return" />
          <node name="Assign" />
        </travuser>
      </traversal>
      <traversal id="GGTC" name="Generate Generic Type Conversions" default="sons" include="generate_generic_type_conversions.h">
        <travuser>
          <node name="Module" />
          <node name="Typedef" />
          <node name="Export" />
          <node name="Provide" />
          <node name="Symbol" />
        </travuser>
      </traversal>
      <traversal id="RSP" name="Resolve pragmas" default="sons" include="resolvepragma.h">
        <travuser>
          <node name="Typedef" />
          <node name="Objdef" />
          <node name="Fundef" />
          <node name="Module" />
          <node name="Ret" />
          <node name="Arg" />
        </travuser>
      </traversal>
      <traversal id="W2D" name="While2do" default="sons" include="while2do.h" >
	<travuser>
	  <node name="While" />
	</travuser>
      </traversal>
      <traversal id="HCE" name="Handle conditional expressions" 
                 default="sons" include="handle_condexpr.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Code" />
	  <node name="Cond" />
	  <node name="Do" />
	  <node name="Funcond" />
	  <node name="With" />
	</travuser>
      </traversal>
      <traversal id="FLAT" name="Flatten" default="sons" include="flatten.h" >
        <travuser>
          <node name="Assign" />
          <node name="Module" />
          <node name="Fundef" />
          <node name="Cast" />
          <node name="Exprs" />
          <node name="SPAp" />
          <node name="Block" />
          <node name="Cond" />
          <node name="Do" />
          <node name="Array" />
          <node name="Return" />
          <node name="Prf" />
          <node name="With" />
          <node name="Withid" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Propagate" />
          <node name="SPFold" />
          <node name="Code" />
        </travuser>
      </traversal>
      <traversal id="FLATG" name="Flattengenerators" default="sons" include="flattengenerators.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="With" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Assign" />
        </travuser>
      </traversal>
      <traversal id="L2F" name="Lac2Fun Traversal" default="sons" include="lac2fun.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Do" />
	  <node name="Fundef" />
	  <node name="Cond" />
	</travuser>
      </traversal>
      <traversal id="SSAT" name="SSA Transform Traversal" default="sons" include="SSATransform.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Ap" />
	  <node name="Fundef" />
	  <node name="Cond" />
          <node name="Block" />
          <node name="Code" />
          <node name="Let" />
          <node name="Arg" />
          <node name="Vardec" />
          <node name="Id" />
          <node name="With" />
          <node name="With2" />
          <node name="Part" />
          <node name="Withid" />
          <node name="Funcond" />
          <node name="Return" />
          <node name="Ids" />
	</travuser>
      </traversal>
      <traversal id="RSA" name="Resolve All Flags" default="sons" include="resolveall.h" >
        <travuser>
	  <node name="Use" />
	  <node name="Import" />
	  <node name="Provide" />
	  <node name="Export" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="GDP" name="Gather Dependencies" default="sons" include="gatherdependencies.h">
        <travuser>
	  <node name="Use" />
	  <node name="Import" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	  <node name="Avis" />
	  <node name="Ret" />
	  <node name="SPId" />
	  <node name="SPFold" />
	  <node name="Cast" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="ANS" name="Annotate Namespaces" default="sons" include="annotatenamespace.h">
        <travuser>
	  <node name="Symbol" />
	  <node name="Use" />
	  <node name="Import" />
	  <node name="Export" />
	  <node name="Provide" />
	  <node name="Fundef" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	  <node name="While" />
	  <node name="Do" />
	  <node name="SPAp" />
	  <node name="SPMop" />
	  <node name="Avis" />
	  <node name="Array" />
	  <node name="Arg" />
	  <node name="Ret" />
	  <node name="Vardec" />
	  <node name="SPIds" />
	  <node name="SPId" />
	  <node name="Let" />
	  <node name="With" />
	  <node name="SPFold" />
	  <node name="Module" />
	  <node name="Cast" />
	</travuser>
      </traversal>
      <traversal id="USS" name="Use Symbols" default="sons" include="usesymbols.h" >
        <travuser>
	  <node name="Typedef" />
	  <node name="Objdef" />
	  <node name="SPFold" />
	  <node name="Avis" />
	  <node name="Array" />
	  <node name="Ret" />
	  <node name="SPAp" />
	  <node name="SPId" />
	  <node name="SPMop" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="IMP" name="Import Symbols" default="sons" include="importsymbols.h" >
        <travuser>
	  <node name="Module" />
	  <node name="Import" />
	  <node name="Export" />
	  <node name="Use" />
	  <node name="Provide" />
	  <node name="Symbol" />
        </travuser>
      </traversal>
      <traversal id="INSVD" name="Insert Vardecs" default="sons" include="insert_vardec.h" >
	<travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="SPAp" />
          <node name="SPId" />
          <node name="SPIds" />
          <node name="With" />
          <node name="Let" />
          <node name="Part" />
          <node name="Code" />
          <node name="Do" />
	</travuser>
      </traversal>
      <traversal id="INSTC" name="Insert Type Conversions" default="sons" include="insert_type_conv.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Block" />
          <node name="Avis" />
          <node name="Assign" />
          <node name="Ids" />
          <node name="Id" />
          <node name="With" />
          <node name="Return" />
        </travuser>
      </traversal>
      <traversal id="CRTWRP" name="Create Wrappers" default="sons" include="create_wrappers.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="SPAp" />
          <node name="Genarray" />
          <node name="SPFold" />
        </travuser>  
      </traversal>
      <traversal id="RST" name="Resolve Symbol Types" default="sons" include="resolvesymboltypes.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Ret" />
          <node name="Avis" />
          <node name="Array" />
          <node name="Typedef" />
          <node name="Objdef" />
          <node name="Type" />
          <node name="Cast" />
        </travuser>
      </traversal>
      <traversal id="OI" name="Object Initializer" default="sons" include="object_init.h">
        <travuser>
          <node name="Module" />
          <node name="Objdef" />
        </travuser>
      </traversal>
      <traversal id="OAN" name="Object Analysis" default="sons" include="object_analysis.h">
        <travuser>
          <node name="Module" />
          <node name="Globobj" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Objdef" />
        </travuser>
      </traversal>
      <traversal id="GOI" name="Generating Object Initialiser" default="sons" include="generate_object_initialiser.h" >
        <travuser>
	  <node name="Fundef" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="RSO" name="Resolve Objects" default="sons" include="resolve_objects.h" >
        <travuser>
	  <node name="Ap" />
	  <node name="Fundef" />
	  <node name="Globobj" />
          <node name="Let" />
	  <node name="Module" />
          <node name="Propagate" />
	  <node name="With" />
	</travuser>
      </traversal>
      <traversal id="RRA" name="Resolve Reference Args" default="sons" include="resolve_reference_args.h" >
        <travuser>
	  <node name="Fundef" />
	  <node name="Return" />
	  <node name="Let" />
	  <node name="Ap" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="EWT" name="Extend Wrapper Types" default="sons" include="extend_wrapper_types.h" >
        <travuser>
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="ESP" name="Enforce Specialization" default="sons" include="enforce_specialization.h" >
        <travuser> 
          <node name="Module" />
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="NTC" name="New Type Inference" default="sons" include="new_typecheck.h" >
        <travuser> 
          <node name="Module" />
          <node name="Fundef" />
          <node name="Block" />
          <node name="Vardec" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Funcond" />
          <node name="Let" />
          <node name="Return" />
          <node name="Ap" />
          <node name="Prf" />
          <node name="Array" />
          <node name="Cast" />
          <node name="Exprs" />
          <node name="Id" />
          <node name="Globobj" />
          <node name="Type" />
          <node name="Num" />
          <node name="Bool" />
          <node name="Char" />
          <node name="Double" />
          <node name="Float" />
          <node name="With" />
          <node name="Generator" />
          <node name="Part" />
          <node name="Withid" />
          <node name="Code" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Break" />
          <node name="Propagate" />
          <node name="Str" />
        </travuser>
      </traversal>
      <traversal id="SWR" name="Split Wrappers" default="sons" include="split_wrappers.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="With" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Propagate" />
        </travuser>
      </traversal>
      <traversal id="CWC" name="Create Wrapper Code" default="sons" include="create_wrapper_code.h" >
        <travuser>
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="DFC" name="Dispatch Funcalls and Create Foldfuns" default="sons" include="dispatchfuncalls.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="With" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Propagate" />
          <node name="Let" />
        </travuser>
      </traversal>
      <traversal id="ELF" name="Extend LaC funs" default="sons" include="extend_lac_funs.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Ap" />
        </travuser>
      </traversal>
      <traversal id="EAT" name="Eliminate type variables and do some cleanup" default="sons" include="elim_alpha_types.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Avis" />
          <node name="Array" />
          <node name="Block" />
          <node name="Let" />
          <node name="Part" />
          <node name="Withid" />
          <node name="With" />
        </travuser>
      </traversal>
      <traversal id="EBT" name="Eliminate bottom types" default="sons" include="elim_bottom_types.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Block" />
          <node name="Ids" />
          <node name="Vardec" />
          <node name="Let" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Funcond" />
        </travuser>
      </traversal>
      <traversal id="FDI" name="Free Dispatch Information" default="sons" include="free_dispatch_information.h">
        <travuser>
          <node name="Ap" />
          <node name="Module" />
          <node name="Fundef" />
        </travuser>  
      </traversal>
      <traversal id="PF" name="Annotate Function Calls " default="sons" include="annotate_fun_calls.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Fundef" />
        </travuser>  
      </traversal>
      <traversal id="EXP" name="Export Symbols" default="sons" include="export.h">
        <travuser>
	  <node name="Use" />
	  <node name="Import" />
	  <node name="Provide" />
	  <node name="Export" />
	  <node name="Symbol" />
	  <node name="Fundef" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	  <node name="Module" />
	</travuser>
      </traversal>
      <traversal id="SER" name="Serialize Module" default="sons" include="serialize.h">
        <travuser>
	  <node name="Fundef" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	</travuser>
      </traversal>
      <traversal id="EA" name="Explicit Accumulate" default="sons" include="ExplicitAccumulate.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="With" />
          <node name="Propagate" />
          <node name="Fold" />
          <node name="Code" />
        </travuser>
      </traversal>
      <traversal id="WLDP" name="With-Loop Default Partition" default="sons" include="wldefaultpartition.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="With" />
          <node name="Part" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Propagate" />
         </travuser>
      </traversal>
      <traversal id="WLPG" name="With-Loop Partition Generation" default="sons" include="WLPartitionGeneration.h" >
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Ap" />
          <node name="With" />
        </travuser>
      </traversal>
      <traversal id="WLA" name="With-Loop Analysis" default="sons" include="wlanalysis.h" >
        <travuser>
          <node name="With" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Genarray" />
         </travuser>
      </traversal>
      <traversal id="CUA" name="Check uniqueness annotations" default="sons" include="check_uniqueness_annotations.h">
        <travuser>
	  <node name="Objdef" />
	  <node name="Arg" />
	  <node name="Ret" />
	</travuser>
      </traversal>
      <traversal id="CU" name="Check uniqueness" default="sons" include="check_uniqueness.h">
        <travuser>
	  <node name="Avis" />
	  <node name="Block" />
    <node name="Code" />
	  <node name="Cond" />
	  <node name="Funcond" />
	  <node name="Fundef" />
	  <node name="Id" />
	  <node name="Ids" />
    <node name="Code" />
    <node name="Prf" />
	</travuser>
      </traversal>
      <traversal id="LOF" name="Lift OptFlags" default="sons" include="liftoptflags.h">
        <travuser>
	  <node name="Fundef" />
	</travuser>
      </traversal>
      <traversal id="PPI" name="Prepare Inline" default="sons" include="prepareinline.h">
        <travuser>
	  <node name="Fundef" />
	  <node name="Module" />
	  <node name="Ap" />
	  <node name="Fold" />
	</travuser>
      </traversal>
      <traversal id="DFR" name="Dead Function Removal" default="sons" include="DeadFunctionRemoval.h" >
        <travuser>
	  <node name="Module" />
	  <node name="Objdef" />
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Ap" />
	  <node name="Fold" />
	</travuser>
      </traversal>
      <traversal id="APC" name="Array Padding Collect" default="sons" include="pad_collect.h" >
        <travuser>
          <!-- <node name="Fundef" /> -->
          <!-- <node name="Let" /> -->
          <!-- <node name="Prf" /> -->
          <!-- <node name="Ap" /> -->
          <!-- <node name="With" /> -->
          <!-- <node name="Genarray" /> -->
          <!-- <node name="Modarray" /> -->
          <!-- <node name="Fold" /> -->
          <!-- <node name="Code" /> -->
          <!-- <node name="Id" /> -->
          <!-- <node name="Array" /> -->
        </travuser>
      </traversal>
      <traversal id="APT" name="Array Padding Transform" default="sons" include="pad_transform.h" >
        <travuser>
          <!-- <node name="Fundef" /> -->
          <!-- <node name="Arg" /> -->
          <!-- <node name="Block" /> -->
          <!-- <node name="Let" /> -->
          <!-- <node name="Vardec" /> -->
          <!-- <node name="Assign" /> -->
          <!-- <node name="Array" /> -->
          <!-- <node name="With" /> -->
          <!-- <node name="Genarray" /> -->
          <!-- <node name="Modarray" /> -->
          <!-- <node name="Fold" /> -->
          <!-- <node name="Code" /> -->
          <!-- <node name="Id" /> -->
          <!-- <node name="Ap" /> -->
          <!-- <node name="Prf" /> -->
        </travuser>
      </traversal>
      <traversal id="ETC" name="TypeConv Elimination" default="sons" include="elimtypeconv.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Prf" />
	</travuser>
      </traversal>
      <traversal id="INFNC" name="NeedCounter Inference" default="sons" include="inferneedcounters.h" >
	<travuser>
	  <node name="Block" />
	  <node name="Fundef" />
	  <node name="Prf" />
	  <node name="Avis" />
	  <node name="Id" />
	</travuser>
      </traversal>
      <traversal id="AS" name="Arithmetic Simplification" default="sons" include="arithmetic_simplification.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Prf" />
	</travuser>
      </traversal>
      <traversal id="AL" name="Associative Law Optimization" default="sons" include="associative_law.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Ids" />
	  <node name="Prf" />
	</travuser>
      </traversal>
      <traversal id="DL" name="Distributive Law Optimization" default="sons" include="distributive_law.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Ids" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="LS" name="Loop Scalarization" default="sons" include="loop_scalarization.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Assign" />
          <node name="Ap" />
          <node name="Prf" />
          <node name="Id" />
        </travuser>
        <travnone>
          <node name="Withid" />
        </travnone>
      </traversal>
      <traversal id="IDC" name="Insert Domain Constraints" default="sons" include="insert_domain_constraints.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Ids" />
          <node name="With" />
          <node name="Withid" />
          <node name="Code" />
          <node name="Id" />
          <node name="Avis" />
        </travuser>
      </traversal>
      <traversal id="ICC" name="Insert Conformity Checks" default="sons" include="insert_conformity_checks.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Prf" />
          <node name="Let" />
          <node name="With" />
          <node name="Generator" />
          <node name="Code" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Propagate" />
          <node name="Block" />
        </travuser>
      </traversal>
      <traversal id="SCC" name="Strip Conformity Checks" default="sons" include="strip_conformity_checks.h" >
        <travuser>
          <node name="Block" />
          <node name="Assign" />
          <node name="Prf" />
          <node name="Let" />
          <node name="Id" />
          <node name="Vardec" />
        </travuser>
      </traversal>
      <traversal id="UFL" name="Unflatten WL Partitions" default="sons" include="unflatten.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="With" />
	  <node name="Withid" />
	  <node name="Block" />
	  <node name="Vardec" />
	  <node name="Part" />
	  <node name="Id" />
	  <node name="Generator" />
	</travuser>
      </traversal>
      <traversal id="CF" name="Constant Folding" default="sons" include="constant_folding.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Let" />
          <node name="Ids" />
          <node name="Array" />
          <node name="Prf" />
          <node name="Ap" />
          <node name="With" />
          <node name="Code" />
          <node name="Part" />
          <node name="Funcond" />
        </travuser>
        <travnone>
          <node name="Withid" />
        </travnone>
      </traversal>
      <traversal id="CSE" name="Common Subexpression Elimination" default="sons" include="SSACSE.h" >
	<travuser>
	  <node name="Fundef" />
          <node name="Arg" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Code" />
	  <node name="Cond" />
	  <node name="With" />
	  <node name="Ap" />
          <node name="Ids" />
	  <node name="Id" />
	  <node name="Return" />
	</travuser>
        <travnone>
          <node name="Withid" />
        </travnone>
      </traversal>
      <traversal id="CVP" name="Constant Variable Propagation" default="sons" include="ConstVarPropagation.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Code" />
	  <node name="Range" />
	  <node name="Cond" />
	  <node name="Generator" />
	  <node name="Genarray" />
	  <node name="Modarray" />
	  <node name="Fold" />
	  <node name="Ap" />
	  <node name="Prf" />
	  <node name="Id" />
	  <node name="Return" />
	  <node name="Array" />
	  <node name="Funcond" />
          <node name="Avis" />
	</travuser>
      </traversal>
      <traversal id="UPRF" name="Unroll PRFs" default="sons" include="prfunroll.h">
        <travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Prf" />
        </travuser>
      </traversal>
    <traversal id="DCR" name="Dead Code Removal" default="sons" include="deadcoderemoval.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Ret" />
	  <node name="Vardec" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Annotate" />
	  <node name="Let" />
	  <node name="Ids" />
	  <node name="Code" />
	  <node name="Cond" />
	  <node name="Ap" />
	  <node name="Return" />
	</travuser>
      </traversal>
    <traversal id="DCI" name="Dead Code Inference" default="sons" include="deadcodeinference.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Vardec" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Return" />
	  <node name="Cond" />
	  <node name="Let" />
	  <node name="Ap" />
	  <node name="Id" />
	  <node name="Ids" />
	  <node name="Code" />
	  <node name="Withid" />
	  <node name="Range" />
          <node name="WLsegVar" />
	</travuser>
      </traversal>
      <traversal id="DDEPEND" name="Detect Dependencies" default="sons" include="detectdependencies.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Prf" />
	  <node name="Id" />
	  <node name="With" />
          <node name="Code" />
	</travuser>
      </traversal>
      <traversal id="ESD" name="ElimSubDiv" default="sons" include="ElimSubDiv.h" >
	<travuser>
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Prf" />
	  <node name="Fundef" />
	</travuser>
      </traversal>
      <traversal id="ILI" name="InferLoopInvariants" default="sons" include="SSAInferLI.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Ap" />
	</travuser>
      </traversal>
      <traversal id="INL" name="Inline Traversal" default="sons" include="inlining.h" >
	<travuser>
	  <node name="Module" />
	  <node name="Assign" />
	  <node name="Fundef" />
	  <node name="Let" />
	  <node name="Ap" />
	</travuser>
      </traversal>
      <traversal id="LINL" name="LAC Inline Traversal" default="sons" include="lacinlining.h" >
	<travuser>
	  <node name="Module" />
	  <node name="Assign" />
	  <node name="Fundef" />
	  <node name="Let" />
	  <node name="Ap" />
	</travuser>
      </traversal>
      <traversal id="LIR" name="Loop Invariants Traversal" default="sons" include="SSALIR.h" >
	<travuser>
	  <node name="Ids" />
	  <node name="Assign" />
	  <node name="Fundef" />
          <node name="Arg" />
          <node name="Vardec" />
          <node name="Block" />
          <node name="Let" />
          <node name="Id" />
          <node name="Ap" />
          <node name="Cond" />
          <node name="Return" />
          <node name="With" />
          <node name="Withid" />
          <node name="Exprs" />
	</travuser>
      </traversal>
      <traversal id="LIRMOV" name="Loop Invariants Move Traversal" default="sons" include="SSALIR.h" >
	<travuser>
	  <node name="Id" />
	  <node name="Withid" />
	  <node name="Assign" />
          <node name="Block" />
          <node name="Let" />
          <node name="Ids" />
	</travuser>
      </traversal>
      <traversal id="LUR" name="Loop Unrolling Traversal" default="sons" include="SSALUR.h" >
	<travuser>
	  <node name="Ap" />
	  <node name="Assign" />
	  <node name="Fundef" />
	</travuser>
      </traversal>
      <traversal id="WLUR" name="With-Loop Unrolling Traversal" default="sons" include="SSAWLUnroll.h" >
	<travuser>
    <node name="Ap" />
	  <node name="Assign" />
    <node name="Fundef" />
	  <node name="With" />
	</travuser>
      </traversal>
      <traversal id="CS" name="Print Constraint Statistics" default="sons" include="constraint_statistics.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="TS" name="Print Type Statistics" default="sons" include="type_statistics.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Vardec" />
        </travuser>
      </traversal>
      <traversal id="RDEPEND" name="Resolve Dependencies" default="sons" include="resolvedependencies.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Prf" />
   	</travuser>
      </traversal>
      <traversal id="RC" name="Remove Cast" default="sons" include="rmcasts.h" >
        <travuser>
          <node name="Let" />
          <node name="Cast" />
          <node name="Avis" />
          <node name="Array" />
          <node name="Ret" />
          <node name="Objdef" />
          <node name="Type" />
        </travuser>
      </traversal>
      <traversal id="SISI" name="Signature Simplification" default="sons" include="signature_simplification.h" >
	<travuser>
	  <node name="Assign" />
          <node name="Fundef" />
	  <node name="Block" />
	  <node name="Let" />
	  <node name="Return" />
	  <node name="Ret" />
          <node name="Ap" />
          <node name="Ids" />
          <node name="Id" />
          <node name="Exprs" />
	  <node name="Arg" />
	  <node name="Module" />
   	</travuser>
      </traversal>
      <traversal id="TDEPEND" name="Tag Dependencies" default="sons" include="tagdependencies.h" >
	<travuser>
	  <node name="Assign" />
	  <node name="Id" />
	  <node name="With" />
   	</travuser>
      </traversal>
      <traversal id="ISAA" name="Insert Symbolic Array Attributes" default="sons" 
        include="insert_symb_arrayattr.h" >
	<travuser>
          <node name="Fundef" />
	  <node name="Avis" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Let" />
          <node name="Ids" />
          <node name="Id" />
          <node name="With" />
          <node name="Part" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Funcond" />
          <node name="Ap" />
   	</travuser>
        <travnone>
          <node name="Withid" />
        </travnone>
      </traversal>     
      <traversal id="MDE" name="Make Dim Expression" default="error"
        include="makedimexpr.h">
        <travuser>
          <node name="Id" />
          <node name="Funcond" />
          <node name="Ap" />
          <node name="Array" />
          <node name="Prf" />
          <node name="With" />
          <node name="Bool" />
          <node name="Char" />
          <node name="Num" />
          <node name="Float" />
          <node name="Double" />         
        </travuser>
      </traversal>
      <traversal id="MSE" name="Make Shape Expression" default="error"
        include="makeshapeexpr.h">
        <travuser>
          <node name="Id" />
          <node name="Funcond" />
          <node name="Ap" />
          <node name="Array" />
          <node name="Prf" />
          <node name="With" />
          <node name="Bool" />
          <node name="Char" />
          <node name="Num" />
          <node name="Float" />
          <node name="Double" />         
        </travuser>
      </traversal>
      <traversal id="ESV" name="Eliminate Shape Variables" default="sons" 
        include="elim_shapevars.h" >
	<travuser>
          <node name="Fundef" />
	  <node name="Avis" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Id" />
          <node name="Prf" />
   	</travuser>
        <travnone>
          <node name="Withid" />
        </travnone>
      </traversal>      
      <traversal id="RMV" name="Remove Vardecs" default="sons" 
        include="remove_vardecs.h" >
	<travuser>
          <node name="Fundef" />
	  <node name="Block" />
	  <node name="Vardec" />
          <node name="Ids" />
   	</travuser>
      </traversal>     
      <traversal id="WLPROP" name="With-Loop Propagation" default="sons" include="wlpropagation.h" >
	<travuser>
	  <node name="Assign" />
          <node name="Fundef" />
	  <node name="Ap" />
	  <node name="Exprs" /> 
          <node name="Id" />
        </travuser>
      </traversal>
       <traversal id="WLSELC" name="With-Loop Selections Counter" default="sons" include="wlselcount.h" >
	<travuser>
	  <node name="With" />
          <node name="Fundef" />
	  <node name="Code" />
	  <node name="Ap" />
	  <node name="Prf" /> 
        </travuser>
      </traversal>
      <traversal id="UESD" name="UndoElimSubDiv" default="sons" include="UndoElimSubDiv.h" >
        <travuser>
	  <node name="Fundef" />
	  <node name="Block" />
          <node name="Let" />
	  <node name="Assign" />
	  <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="WLI" name="With-Loop-Interference" default="sons" include="SSAWLI.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Id" />
          <node name="Let" />
          <node name="Cond" />
	  <node name="With" />
	  <node name="Modarray" />
	  <node name="Part" />
	  <node name="Generator" />
          <node name="Code" />
	</travuser>
      </traversal>
     <traversal id="WLF" name="With-Loop-Folding" default="sons" include="SSAWLF.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Id" />
          <node name="Let" />
	  <node name="With" />
          <node name="Code" />
	</travuser>
     </traversal>
     <traversal id="SWLFI" name="Symbolic With-Loop-Folding Inference" default="sons" include="symb_wlfi.h" >
       <travuser>
          <node name="Fundef"  />
          <node name="Block"   />
          <node name="Assign"  />
          <node name="Let"  />
          <node name="Id"  />
          <node name="Cond" />
          <node name="With"    />
          <node name="Modarray"    />
          <node name="Code"    />
          <node name="Part"    />
          <node name="Ids"     />
          <node name="Prf"     />
       </travuser>
     </traversal>
     <traversal id="SWLF" name="Symbolic With-Loop-Folding" default="sons" include="symb_wlf.h" >
       <travuser>
          <node name="Fundef"  />
          <node name="Assign"  />
          <node name="With"    />
          <node name="Code"    />
          <node name="Part"    />
          <node name="Ids"     />
          <node name="Prf"     />
       </travuser>
     </traversal>
     <traversal id="WLCC" name="With-Loop Cost Check" default="sons" include="wl_cost_check.h" >
       <travuser>
          <node name="With"    />
          <node name="Code"    />
          <node name="Prf"     />
          <node name="Ap"      />
       </travuser>
     </traversal>
     <traversal id="WLNC" name="With-Loop NeedCount Check" default="sons" include="wl_needcount.h" >
       <travuser>
          <node name="Fundef"    />
          <node name="Block"     />
          <node name="Avis"      />
          <node name="With"      />
          <node name="Part"      />
          <node name="Code"      />
          <node name="Prf"       />
          <node name="Ap"        />
          <node name="Id"        />
       </travuser>
     </traversal>
     <traversal id="WLFS" name="With-Loop-Fusion" default="sons" include="WithloopFusion.h" >
	<travuser>
	  <node name="Fundef" />
	  <node name="Block" />
	  <node name="Assign" />
	  <node name="Id" />
	  <node name="With" />
	  <node name="Genarray" />
	  <node name="Modarray" />
	  <node name="Fold" />
	  <node name="Part" />
	  <node name="Generator" />
	</travuser>
      </traversal>
      <traversal id="WLSIMP" name="With-Loop Simplification" default="sons" include="wlsimplification.h">
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="With" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Break" />
          <node name="Propagate" />
          <node name="Code" />
          <node name="Part" />
          <node name="Generator" />
          <node name="Default" />
        </travuser>
      </traversal>
      <traversal id="CWLE" name="Copy With-Loop Elimination" default="sons" include="copywlelim.h">
        <travuser>
          <node name="Fundef" />
          <node name="With" />
          <node name="Let" />
          <node name="Code" />
          <node name="Assign" />
          <node name="Ids" />
          <node name="Arg" />
        </travuser>
      </traversal>
      <traversal id="WLS" name="With-Loop Scalarization" default="sons" include="wls.h">
        <travuser>
          <node name="Assign" />
          <node name="Fundef" />
          <node name="With" />
        </travuser>
      </traversal>
      <traversal id="WLSC" name="With-Loop Scalarization Check traversal" default="sons" include="wls.h">
        <travuser>
          <node name="Block" />
          <node name="Code" />
          <node name="Default" />
          <node name="Id" />
          <node name="Part" />
          <node name="With" />
          <node name="Withid" />
          <node name="Generator" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="Propagate" />
        </travuser>
      </traversal>
      <traversal id="WLSW" name="With-Loop Scalarization Withloopification traversal" default="sons" include="wls.h">
        <travuser>
          <node name="Code" />
          <node name="Id" />
          <node name="Let" />
          <node name="Part" />
          <node name="With" />
          <node name="Withid" />
        </travuser>
      </traversal>
      <traversal id="WLSB" name="With-Loop Scalarization Build traversal" default="sons" include="wls.h">
        <travuser>
          <node name="Code" />
          <node name="Generator" />
          <node name="Part" />
          <node name="With" />
          <node name="Withid" />
          <node name="Genarray" />
          <node name="Modarray" />
        </travuser>
      </traversal>
      <traversal id="IVESPLIT" name="Index Vector Elimination (Split Selections)" default="sons" include="ive_split_selections.h">
        <travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Prf" />
        </travuser>
      </traversal>
      <traversal id="IVERAS" name="Index Vector Elimination (Reuse WL-offsets and Scalarize)" default="sons" include="ive_reusewl_and_scalarize.h">
        <travuser>
	  <node name="Prf" />
	  <node name="Let" />
	  <node name="With" />
	  <node name="Part" />
	  <node name="Code" />
        </travuser>
      </traversal>
      <traversal id="WLFLT" name="Flattening multi-dimensional withloops" default="sons" include="withloop_flattening.h">
        <travuser>
	  <node name="Id" />
	  <node name="Avis" />
	  <node name="With" />
	  <node name="Genarray" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Block" />
	  <node name="Fundef" />
	  <node name="Withid" />
	  <node name="Generator" />
	  <node name="Ids" />
        </travuser>
      </traversal>
      <traversal id="WLIDX" name="Annotate withloop idxs" default="sons" include="wlidxs.h">
        <travuser>
          <node name="Fundef" />
          <node name="Let" />
          <node name="With" />
          <node name="Withid" />
        </travuser>
      </traversal>
      <traversal id="WLTRA" name="With-Loop Transformation traversal" default="sons" include="wltransform.h">
        <travuser>
          <node name="Assign" />
          <node name="Code" />
          <node name="Let" />
          <node name="With" />
        </travuser>
      </traversal>
      <traversal id="WLSD" name="With-Loop Split Dimensions" default="sons" include="wl_split_dimensions.h">
        <travuser>
	  <node name="Fundef" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Block" />
	  <node name="With2" />
	  <node name="Withid" />
	  <node name="WLseg" />
	  <node name="WLsegVar" />
	  <node name="WLstride" />
	  <node name="WLstrideVar" />
	  <node name="WLgrid" />
	  <node name="WLgridVar" />
	</travuser>
	<traverror>
	  <!-- blocking is not supported for now. -->
	  <node name="WLblock" />
	  <node name="WLublock" />
	</traverror>
      </traversal>
      <traversal id="SIMD" name="SIMD inference" default="sons" include="simd_infer.h">
        <travuser> 
          <node name="Ap" />
          <node name="Prf" />
          <node name="Array" />
          <node name="With2" />
          <node name="Code" />
          <node name="WLstride" />
          <node name="WLgrid" />
        </travuser> 
      </traversal>
      <traversal id="EMAA" name="Alias analysis" default="none" include="aliasanalysis.h" >
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Assign" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Fold" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Id" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="With" />
          <node name="With2" />
          <node name="Vardec" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Block" />
          <node name="Exprs" />
        </travsons>
      </traversal>
      <traversal id="EMLR" name="Loop reuse" default="none" include="loopreuseopt.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Fundef" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Let" />
          <node name="With" />
          <node name="With2" />
          <node name="Cond" />
          <node name="Code" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="EMLRO" name="Loop reuse optimization" default="none" include="loopreuseopt.h">
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Fundef" />
          <node name="Id" />
          <node name="Prf" />
        </travuser>
        <travsons>
          <node name="Exprs" />
          <node name="Module" />
          <node name="Let" />
          <node name="Assign" />
          <node name="With" />
          <node name="With2" />
          <node name="Cond" />
          <node name="Code" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="ASD" name="AUD SCL distinction" 
                 default="sons" include="audscldist.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Ap" />
          <node name="Cond" />
          <node name="With" />
          <node name="With2" />
          <node name="Code" />
          <node name="Prf" />
        </travuser>
	<traverror>
          <node name="Do" />
	</traverror>
      </traversal>
      <traversal id="EMAL" name="Allocation" default="none" include="alloc.h" >
        <travuser>
          <node name="Num" />
          <node name="Char" />
          <node name="Bool" />
          <node name="Float" />
          <node name="Double" />

          <node name="Ap" />
          <node name="Array" />
          <node name="Assign" />
          <node name="Break" />
          <node name="Code" />
          <node name="Fold" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Id" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="Propagate" />
          <node name="With" />
          <node name="With2" />
          <node name="Withid" />
          <node name="With3" />
          <node name="Range" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Cond" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="EMDR" name="Data reuse" default="none" include="datareuse.h" >
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Withid" />
          <node name="With" />
          <node name="With2" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Prf" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="With" />
          <node name="With2" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="EMEC" name="Explicit Copy" default="none" include="explicitcopy.h" >
        <travuser>
          <node name="Assign" />
          <node name="Fundef" />
          <node name="Ap" />
          <node name="Prf" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Let" />
          <node name="With" />
          <node name="With2" />
          <node name="Cond" />
          <node name="Code" />
          <node name="Block" />
        </travsons>
      </traversal>
      <traversal id="EMRACC" name="Remove Alias Results from Conformity Checks" default="sons" include="rm_alias_results_cc.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Block" />
          <node name="Vardec" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
          <node name="Id" />
        </travuser>
      </traversal>
      <traversal id="SRCE" name="Scope-based reuse-candidate elimination" default="sons" include="scoperce.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Ids" />
          <node name="Ap" />
          <node name="Code" />
          <node name="Prf" />
          <node name="Exprs" />
        </travuser>
      </traversal>
      <traversal id="FRC" name="Filter Reuse Candidates" default="sons" include="filterrc.h" >
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Assign" />
          <node name="Break" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Fold" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Id" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="With" />
          <node name="With2" />
        </travuser>
        <travnone>
          <node name="Objdef" />
        </travnone>   
      </traversal>
      <traversal id="EMIA" name="Interface Analysis" default="none" include="interfaceanalysis.h" >
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Assign" />
          <node name="Block" />
          <node name="Cond" />
          <node name="Fold" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Id" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Ret" />
          <node name="Return" />
          <node name="Vardec" />
          <node name="With" />
          <node name="With2" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Exprs" />
        </travsons>
      </traversal>
      <traversal id="EMRB" name="Reuse branching" default="none" include="reusebranching.h" >
        <travuser>
          <node name="Assign" />
          <node name="Code" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Ids" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="With" />
          <node name="With2" />
          <node name="Withid" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Let" />
          <node name="Cond" />
          <node name="Block" />
          <node name="Fold" />
        </travsons>
      </traversal>
      <traversal id="EMRI" name="Reuse inference" default="sons" include="reuse.h" >
        <travuser>
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
          <node name="Genarray" />
          <node name="Modarray" />
        </travuser>
      </traversal>
      <traversal id="WRCI" name="With-loop reuse candidate inference" default="sons" include="wrci.h">
        <travuser>
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="With" />     
          <node name="Genarray" />     
          <node name="Modarray" />     
          <node name="Fold" />     
          <node name="Generator" />
        </travuser>
      </traversal>
      <traversal id="RWO" name="Reuse With-loop arrays with offsets" default="sons" include="reusewithoffset.h">
        <travuser>
          <node name="Prf" />
          <node name="Id" />
          <node name="Ids" />
        </travuser>
      </traversal>
      <traversal id="REUSE" name="Reuse With Arrays" default="sons" include="ReuseWithArrays.h">
        <travuser>
          <node name="Let" />
          <node name="Prf" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
          <node name="With" />     
          <node name="Part" />     
        </travuser>
      </traversal>
      <traversal id="EMSR" name="Static Reuse" default="none" include="staticreuse.h" >
        <travuser>
          <node name="Prf" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Let" />
          <node name="With" />
          <node name="With2" />
          <node name="Code" />
          <node name="Block" />
          <node name="Cond" />
        </travsons>
      </traversal>
      <traversal id="EMIP" name="Inplace Computation" default="sons" include="inplacecomp.h">
        <travuser>
          <node name="Ap" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Prf" />
        </travuser>
        <travnone>
          <node name="Objdef" />
        </travnone>
      </traversal>
      <traversal id="EMIPH" name="Inplace Computation helper" default="sons" include="inplacecomp.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Id" />
        </travuser>
        <travnone>
          <node name="Objdef" />
        </travnone>
      </traversal>
      <traversal id="RCI" name="Reference Counting Inference" default="sons" include="referencecounting.h" >
        <travuser>
          <node name="Ap" />
          <node name="Array" />
          <node name="Assign" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Fold" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="Propagate" />
          <node name="Range" />
          <node name="Return" />
          <node name="With" />
          <node name="With2" />
          <node name="With3" />
          <node name="Withid" />
        </travuser>
        <travnone>
          <node name="Objdef" />
          <node name="Arg" />
          <node name="Vardec" />
        </travnone>
      </traversal>
      <traversal id="RCM" name="Reference counting minimization" default="sons" include="rcminimize.h" >
        <travuser>
          <node name="Ap" />
          <node name="Arg" />
          <node name="Assign" />
          <node name="Code" />
          <node name="Cond" />
          <node name="Funcond" />
          <node name="Fundef" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Let" />
          <node name="Prf" />
          <node name="Range" />
          <node name="Return" />
        </travuser>
        <travnone>
          <node name="Objdef" />
          <node name="Withid" />
        </travnone>
      </traversal>
      <traversal id="EMRCO" name="Reference counting optimizations" default="none" include="rcopt.h" >
        <travuser>
          <node name="Assign" />
          <node name="Block" />
          <node name="Fold" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="Cond" />
          <node name="With" />
          <node name="With2" />
          <node name="Code" />
        </travsons>
      </traversal>
      <traversal id="MVSMI" name="Move shared memory management instructions" 
        default="sons" include="movesharedmeminstr.h" >
        <travuser>
          <node name="Assign" />
          <node name="Fundef" />
          <node name="Ap" />
        </travuser>
      </traversal>
      <traversal id="COSMI" name="Collect shared memory management instructions"
        default="sons" include="movesharedmeminstr.h" >
        <travuser>
          <node name="Fundef" />
          <node name="Ret" />
          <node name="Arg" />
          <node name="Block" />
          <node name="Vardec" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
          <node name="With2" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Fold" />
        </travuser>
        <traverror>
          <node name="With" />
        </traverror>
      </traversal>
      <traversal id="EMRE" name="Reuse elimination" default="none" include="reuseelimination.h" >
        <travuser>
          <node name="Assign" />
          <node name="Block" />
          <node name="Cond" />
          <node name="Fundef" />
          <node name="Genarray" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="Vardec" />
        </travuser>
        <travsons>
          <node name="Module" />
          <node name="With" />
          <node name="With2" />
          <node name="Fold" />
          <node name="Code" />
        </travsons>
      </traversal>
     <traversal id="MTCM" name="Multithreading cost model" default="sons" include="cost_model.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Block" />
          <node name="Assign" />
          <node name="Let" />
          <node name="With2" />
          <node name="With" />
          <node name="Fold" />
          <node name="Genarray" />
          <node name="Modarray" />
        </travuser>
      </traversal>
      <traversal id="MTSTF" name="Create MT/ST functions" default="sons" include="create_mtst_funs.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="With2" />
          <node name="Ap" />
          <node name="Fold" />
        </travuser>
      </traversal>
       <traversal id="MTSPMDF" name="Create SPMD functions" default="sons" include="create_spmd_funs.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="With2" />
          <node name="Let" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Withid" />
        </travuser>
      </traversal>

      <traversal id="MTAS" name="Annotate scheduling" default="sons" include="annotate_scheduling.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="With2" />
          <node name="WLsegVar" />
          <node name="WLseg" />
        </travuser>
      </traversal>
      <traversal id="SSPMDLS" name="Set SPMD linksign" default="sons" include="set_spmd_linksign.h">
        <travuser>
          <node name="Arg" />
          <node name="Id" />
          <node name="Exprs" />
          <node name="Return" />
          <node name="Propagate" />
          <node name="Genarray" />
          <node name="Modarray" />
          <node name="Break" />
          <node name="With2" />
          <node name="Let" />
          <node name="Ret" />
          <node name="Fundef" />
          <node name="Module" />
        </travuser>
      </traversal>
      <traversal id="TEM" name="Tag Executionmode" default="sons" include="tag_executionmode.h">
        <travuser>
          <node name="Ap" />
          <node name="Array" />
          <node name="Assign" />
          <node name="Let" />
          <node name="Prf" />
          <node name="With2" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="CRWIW" name="Create Withinwith Replication" default="sons" include="create_withinwith.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Fundef" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="PEM" name="Propagate Executionmode" default="sons" include="propagate_executionmode.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="Cond" />
          <node name="Fundef" />
          <node name="With2" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="CDFG" name="Create Dataflowgraph" default="sons" include="create_dataflowgraph.h">
        <travuser>
          <node name="Assign" />
          <node name="Block" />
          <node name="Id" />
          <node name="Withid" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="ASMRA" name="Assignments Rearrange" default="sons" include="assignments_rearrange.h">
        <travuser>
          <node name="Block" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="CRECE" name="Create Cells" default="sons" include="create_cells.h">
        <travuser>
          <node name="Assign" />
          <node name="Block" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="CEGRO" name="Cell Growth" default="sons" include="cell_growth.h">
        <travuser>
          <node name="Assign" />
          <node name="Block" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="REPFUN" name="Replicate Functions" default="sons" include="replicate_functions.h">
        <travuser>
          <node name="Ap" />
          <node name="Assign" />
          <node name="EX" />
          <node name="Fundef" />
          <node name="Module" />
          <node name="MT" />
          <node name="ST" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="CONCEL" name="Consolidate Cells" default="sons" include="consolidate_cells.h">
        <travuser>
          <node name="EX" />
          <node name="Fundef" />
          <node name="MT" />
          <node name="ST" />
        </travuser>
        <travsons>
        </travsons>
        <travnone>
        </travnone>
        <traverror>
        </traverror>
      </traversal>
      <traversal id="REC" name="Remove External Code" default="sons" include="remove_external_code.h" >
        <travuser>
	  <node name="Fundef" />
	</travuser>
      </traversal>
      <traversal id="FSFS" name="SPMD Function Signature Fix" default="sons" include="spmdfun_fix.h">
        <travuser>
          <node name="Ap" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Return" />
          <node name="With2" />
        </travuser>
      </traversal>
      <traversal id="RERA" name="Restore Reference Args" default="sons" include="restore_reference_args.h">
        <travuser>
	  <node name="Ap" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Return" />
	  <node name="Fundef" />
	  <node name="Prf" />
 	  <node name="Id" />
 	  <node name="Ids" />
	  <node name="Module" />
	  <node name="With" />
	  <node name="With2" />
	  <node name="Block" />
	</travuser>
      </traversal>
      <traversal id="RESO" name="Restore Global Objects" default="sons" include="restore_objects.h">
        <travuser>
	  <node name="Ap" />
	  <node name="Id" />
	  <node name="Assign" />
	  <node name="Let" />
	  <node name="Block" />
	  <node name="Fundef" />
	  <node name="Module" />
    <node name="Propagate" />
	</travuser>
      </traversal>
      <traversal id="SLS" name="Set Linksign" default="sons" include="setlinksign.h" >
        <travuser>
	  <node name="Module" />
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Ret" />
	</travuser>
      </traversal>
      <traversal id="MMV" name="MarkMemVals" default="sons" include="markmemvals.h" >
        <travuser>
          <node name="Block" />
          <node name="Break" />
          <node name="Code" />
          <node name="Do" />
          <node name="Fold" />
          <node name="Fundef" />
          <node name="Module" />
          <node name="Genarray" />
          <node name="Propagate" />
          <node name="Id" />
          <node name="Ids" />
          <node name="Ap" />
          <node name="Let" />
          <node name="Modarray" />
          <node name="Prf" />
          <node name="Vardec" />
          <node name="With" />
          <node name="With2" />
          <node name="With3" />
          <node name="WLseg" />
          <node name="WLsegVar" />
          <node name="Return" />
          <node name="Ret" />
        </travuser>
      </traversal>
      <traversal id="MOI" name="Manage object initialisers" default="sons" include="manage_object_initialisers.h" >
        <travuser>
          <node name="Assign" />
          <node name="Id" />
          <node name="Fundef" />
        </travuser>
      </traversal>
      <traversal id="FPC" name="Function Precompilation" default="sons" include="functionprecompile.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Let" />
          <node name="Ret" />
          <node name="Arg" />
          <node name="Ap" />
          <node name="Range" />
        </travuser>
      </traversal>
      <traversal id="TCP" name="Type Conversions" default="sons" include="typeconv_precompile.h">
        <travuser>
          <node name="Module" />
          <node name="Fundef" />
          <node name="Assign" />
          <node name="Prf" />
          <node name="Ap" />
          <node name="Range" />
        </travuser>
      </traversal>
      <traversal id="MNG" name="Mark NoOp Grids" default="sons" include="mark_noop_grids.h">
        <travuser>
          <node name="WLgrid" />
          <node name="WLgridVar" />
          <node name="WLstride" />
          <node name="WLstrideVar" />
          <node name="WLblock" />
          <node name="WLublock" />
          <node name="Code" />
          <node name="Let" />
        </travuser>
      </traversal>
      <traversal id="RID" name="Rename Identifiers" default="sons" include="renameidentifiers.h">
        <travuser>
	  <node name="Module" />
	  <node name="Typedef" />
	  <node name="Objdef" />
	  <node name="Fundef" />
	  <node name="Arg" />
	  <node name="Return" />
	  <node name="Ap" />
	  <node name="Icm" />
	  <node name="WLseg" />
	  <node name="WLsegVar" />
	  <node name="Avis" />
	</travuser>
      </traversal>
      <traversal id="RCS" name="Resolve Code Sharing" default="sons" include="resolve_code_sharing.h">
        <travuser>
	  <node name="With" />
	  <node name="With2" />
	  <node name="Code" />
	  <node name="Part" />
	  <node name="WLgrid" />
	  <node name="WLgridVar" />
	</travuser>
      </traversal>
      <traversal id="COMP" name="Compile" default="sons" include="compile.h">
        <travuser>
          <node name="Ap" />
          <node name="Array" />
          <node name="Assign" />
          <node name="Block" />
          <node name="Cond" />
          <node name="Fundef" />
          <node name="Id" />
          <node name="Let" />
          <node name="Do" />
          <node name="Module" />
          <node name="Objdef" />
          <node name="Prf" />
          <node name="Return" />
          <node name="Typedef" />
          <node name="Vardec" />
          <node name="Num" />
          <node name="Char" />
          <node name="Bool" />
          <node name="Float" />
          <node name="Double" />
          <node name="With" />
          <node name="Withid" />
          <node name="Part" />
          <node name="Generator" />
          <node name="With2" />
          <node name="WLseg" />
          <node name="WLsegVar" />
          <node name="WLblock" />
          <node name="WLublock" />
          <node name="WLstride" />
          <node name="WLstrideVar" />
          <node name="WLgrid" />
          <node name="WLgridVar" />
          <node name="Code" />
          <node name="With3" />
          <node name="Range" />
        </travuser>
        <travnone>
          <node name="Icm">
            <description>
              Using TRAVsons, COMPid would be applied to ICM_ARG1.
            </description>
          </node>
        </travnone>
        <traverror>
          <node name="Cast">
            <description>
              Node is already eliminated.
            </description>
          </node>
          <node name="While">
            <description>
              Node is already eliminated.
            </description>
          </node>
          <node name="Funcond">
            <description>
              Node is already eliminated.
            </description>
          </node>
        </traverror>
      </traversal>
      <traversal id="CBL" name="Construct Bundles" default="sons"
                 include="construct_bundles.h">
        <travuser>
          <node name="Fundef" />
          <node name="Module" />
        </travuser>
      </traversal>
      <traversal id="CCWH" name="Create C wrapper header" default="sons"
                 include="create_c_wrapper_header.h">
        <travuser>
          <node name="FunBundle" />
          <node name="Fundef" />
          <node name="Arg" />
          <node name="Ret" />
          <node name="Typedef" />
          <node name="Module" />
        </travuser>
      </traversal>
      <traversal id="GCF" name="Generate Copy And Free" default="sons"
                 include="generate_copy_and_free.h">
        <travuser>
          <node name="Typedef" />
          <node name="Module" />
        </travuser>
      </traversal>
      <traversal id="CCWB" name="Create C wrapper body" default="sons"
                 include="create_c_wrapper_body.h">
        <travuser>
          <node name="FunBundle" />
        </travuser>
      </traversal>
      <traversal id="BTF" name="Bundle to Fundef" default="sons"
                 include="bundle_to_fundef.h">
        <travuser>
          <node name="FunBundle" />
          <node name="Fundef" />
        </travuser>
      </traversal>
   </traversals>

  <nodesets>
    <nodeset name="Expr">
      <target>
        <node name="Num" />
        <node name="Double" />
        <node name="Float" />
        <node name="Char" />
        <node name="Bool" />
        <node name="Id" />
        <node name="SPId" />
        <node name="With" />
        <node name="With2" />
        <node name="With3" />
        <node name="Array" />
        <node name="Ap" />
        <node name="SPAp" />
        <node name="Prf" />
        <node name="Funcond" />
	<node name="Cast" />
	<node name="SPMop" />
	<node name="SetWL" />
	<node name="Dot" />
	<node name="Str" />
        <node name="Icm" />
        <node name="Type" />
        <node name="Globobj" />
      </target>
    </nodeset>

    <nodeset name="Instr">
      <target>
        <node name="Let" />
        <node name="Cond" />
        <node name="Return" />
        <node name="Do" />
        <node name="Annotate" />
        <node name="While" />
        <node name="Icm" />
      </target>
    </nodeset>

    <nodeset name="Interface">
      <target>
        <node name="Import" />
	<node name="Export" />
	<node name="Use" />
	<node name="Provide" />
      </target>
    </nodeset>

    <nodeset name="WithOp">
      <target>
        <node name="Genarray" />
	<node name="Modarray" />
	<node name="SPFold" />
	<node name="Fold" />
        <node name="Break" />
        <node name="Propagate" />
      </target>
     </nodeset>

     <nodeset name="IntValue">
      <target>
        <node name="Num" />
        <node name="Array" />
        <node name="Id" />
      </target>
     </nodeset>

  </nodesets>
  <syntaxtree version="1.0">
<!--

  N_module :

-->
    <node name="Module">
      <description>node for a module declaration</description>
      <sons>
        <son name="Interface">
          <description>symbols imported and exported by the module</description>
          <targets>
            <target mandatory="no">
              <set name="Interface" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Types">
          <description>types defined within the module</description>
          <targets>
            <target mandatory="no">
              <node name="Typedef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Objs">
          <targets>
            <target mandatory="no">
              <node name="Objdef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Funs">
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="ThreadFuns" default="NULL">
          <description>
            Contains thread functions for mutc back-end.
          </description>
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <range from="pc_lw3" to="final"/>
                <all/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="FunDecs">
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="FunSpecs" default="NULL">
          <description>
            contains the signatures of forced specializations
          </description>
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <range from="scp_prs" to="tc_esp" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="SPMDStore" default="NULL" >
          <targets>
            <target mandatory="no">
              <node name="Assign" />
              <phases>
                <range from="cg_cpl" to="final" />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Namespace" inconstructor="yes">
          <type name="Namespace" >
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FileType" inconstructor="yes">
          <type name="FileType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WrapperFuns" inconstructor="no">
          <type name="LUT">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="ptc_cwf" to="tc_swr" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Deprecated" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_typedef :

-->
    <node name="Typedef">
      <description>definition of a user defined type</description>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Typedef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Ns" inconstructor="yes">
          <type name="Namespace">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="initial" to="mod_ans" />
                  <range from="pc_rid" to="final" />
                </phases>
              </target>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="mod_ans" to="pc_rid" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="NType" inconstructor="yes">
          <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Pragma" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Pragma" />
                <phases>
                  <range from="scp" to="pre_rpr" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="CopyFun" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="InitFun" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="FreeFun" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Icm" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SymbolName" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="mod_imp" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsExported" />
        <flag name="IsProvided" />
        <flag name="IsLocal" default="TRUE"/>
        <flag name="IsUnique" />
        <flag name="IsAlias" />
      </flags>
    </node>
<!--

  N_objdef :

-->
    <node name="Objdef">
      <sons>
        <son name="Expr">
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Objdef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Type" inconstructor="yes">
          <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Ns" inconstructor="yes">
          <type name="Namespace">
            <targets>
          
              <target mandatory="no">
                <any />
                <phases>
                  <range from="initial" to="mod_ans" />
                  <range from="pc_rid" to="final" />
                </phases>
              </target>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="mod_ans" to="pc_rid" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Name" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LinkName" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Pragma" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="yes">
                <node name="Pragma" />
                <phases>
                  <range from="scp" to="pre_rpr" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ArgAvis" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Id" />
                <phases>
                  <phase name="ptc_rso" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
	<attribute name="NT_Tag" inconstructor="no">
	  <type name="String">
	    <targets>
	      <target mandatory="no">
	        <phases>
                  <range from="cg_cpl" to="final" />
		</phases>
              </target>
	    </targets>
	  </type>
	</attribute>
        <attribute name="Icm" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="InitFun" inconstructor="no">
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Fundef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SymbolName" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="mod_imp" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsExported" />
        <flag name="IsProvided" />
        <flag name="IsLocal" default="TRUE"/>
        <flag name="IsExtern" />
        <flag name="IsAlias" /> 
        <flag name="IsNeeded" default="TRUE" />
     </flags>
    </node>
<!--

  N_fundef :

-->
    <node name="Fundef">
      <sons>
        <son name="Rets">
          <targets>
            <target mandatory="no">
              <node name="Ret" />
              <phases>
                  <range from="initial" to="ptc_rrp"/>
                  <range from="ussa_rera" to="final"/>
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Ret" />
              <phases>
                  <range from="ptc_rrp" to="ussa_rera"/>
              </phases>
            </target>
          </targets>
        </son>
        <son name="Args">
          <targets>
            <target mandatory="no">
              <node name="Arg" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Body">
          <targets>
            <target mandatory="no">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Objects" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Set" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="AffectedObjects" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="LocalFuns" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Fundef" />
              <phases>
                <range from="opt_glf" to="opt_uglf" />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Ns" inconstructor="yes">
          <type name="Namespace">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="initial" to="mod_ans" />
                  <range from="pc_rid" to="final" />
                </phases>
              </target>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="mod_ans" to="pc_rid" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SymbolName" default="NULL" mandatory="no" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="mod_imp" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LinkName" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WrapperType" default="NULL" inconstructor="no">
          <type name="NewType">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="mod_imp" to="opt_fdi"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FunNo" default="0" mandatory="no" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="opt_pfap" to="final"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Pragma" default="NULL" inconstructor="no">
          <type name="Node" >
            <targets>
              <target mandatory="no">
                <node name="Pragma" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Types" inconstructor="no">
          <type name="OldType">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="cg_ctr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Specs" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                      <range from="tc" to="final" /> 
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Return" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Return" />
                <phases>
                  <range from="ptc_l2f" to="final"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Impl" inconstructor="no">
	  <description>
	  Points to the implementation. In case of a wrapper function this is the only available instance. In case of an objectwrapper this is the wrapped function instance.
	  </description>
          <type name="ExtLink">
            <targets>
              <target mandatory="no" >
                <node name="Fundef" />
                <phases>
                  <range from="mod_imp" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
	<attribute name="SpecNs" inconstructor="no">
	  <type name="Namespace">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="tc_esp" to="tc_swr"/>
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="Icm" inconstructor="no">
          <description>ICM for function definitions</description>
          <type name="Node">
            <targets>
              <target mandatory="yes">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="IcmDecl" inconstructor="no">
          <description>ICM for function decelerations</description>
          <type name="Node">
            <targets>
              <target mandatory="yes">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="IcmDefEnd" inconstructor="no">
          <description>ICM to mark the end of a function definition
          </description>
          <type name="Node">
            <targets>
              <target mandatory="yes">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="TCStat" inconstructor="no">
          <type name="TypeCheckingStatus">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="tc" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="DFM_Base" inconstructor="no">
          <type name="DFMaskBase">
            <targets>
              <target mandatory="no">
               <any />
               <phases>
<!-- TODO: Somewhere in the OPT pass, it is left to be re-utlised. -->
<!-- Should be cleaned -->
                 <all/>
               </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ArgTab" inconstructor="no">
          <type name="ArgTab">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="pc_fpc" to="cg_frtr" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Companion" inconstructor="no">
          <description>This link points to the companion function of the current function. In case this is the sequential version (as encoded by ISSTFUN) of the function, the companion will be the parallel version (as encoded by ISMTFUN) and vice versa. The attribute is used in both implementations of MT.</description>
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Fundef" />
                <phases>
                  <phase name="mt_mtstf"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ExecMode" inconstructor="no">
          <type name="MTExecMode">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <!-- <range from="BuildMultithread" to="crece"/> TODO -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="AkvId" default="0" inconstructor="no">
          <description>Identifier for function instances with akv-arguments 
            (used for function naming in renameidentifiers.c)</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="InlineCounter" default="0" inconstructor="no">
          <description>Counter for how many times the function has been recursively
            inlined.</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <!-- This has NOT been TESTED -->
                  <phase name="opt_cyc_linl" /> 
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LastChange" default="0" inconstructor="no">
          <description>
            This attribute indicates in which iteration round the PV of the
            function itself was changed the last time during the specialization
            oracle for static shape knowledge.
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                 <!-- Not ENABLED, i.e. Not TESTED -->
                  <range from="tc_sossk" to="tc_ti" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LastIterationRound" default="0" inconstructor="no">
          <description>
            This attribute indicates in which iteration round this function was
            the last time "iterated" (fully or partially) during the
            specialization oracle for static shape knowledge
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                 <!-- Not ENABLED, i.e. Not TESTED -->
                  <range from="tc_sossk" to="tc_ti" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Depth" default="0" inconstructor="no">
          <description>Used to count the depth in the static call graph.
            (see distribute_threads.c)</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Height" default="0" inconstructor="no">
          <description>Used to count the height in the static call graph.
            (see distribute_threads.c)</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsExported">
          <description>This function is being exported from the current namespace and will thus be fully visible from outside.</description>
        </flag>
        <flag name="IsProvided">
          <description>This function is being provided from the current namespace and will thus be available for use from outside, only.</description>
        </flag>
        <flag name="WasImported">
          <description>This function was imported from another namespace. This as well means that it is local now.</description>
        </flag>
        <flag name="WasUsed">
          <description>This function was used from another namespace. This as well means that it is not local.</description>
        </flag>
        <flag name="IsLocal" default="TRUE">
          <description>This function is defined locally in the current namespace. That is, it was defined locally or imported.</description>
        </flag>
        <flag name="IsSticky" default="FALSE">
          <description>This function should not be removed by DeadFunctionRemoval. This is mainly used by the module system to ensure that for all exported functions code is generated. Furthermore, it is used to ensure that the prelude functions are not removed during compilation.</description>
        </flag>
        <flag name="IsSACargConversion" default="FALSE">
          <description>This function is a special SACarg conversion function used by the C interface. This tag is mainly used to ensure that these functions do not turn up in the resulting C header file.</description>
        </flag>
        <flag name="IsNeeded">
          <description>This flag is used in multiple phases, usually to tag functions that are referenced in some sense. It has always to be reset to FALSE at the end of each phase.</description>
        </flag>
        <flag name="IsCondFun">
          <description>This is a lifted conditional. The function is only referenced once from the context the conditional was lifted from.</description>
        </flag>
        <flag name="IsThreadFun">
          <description>This is a lifited with3.  The function is only referenced once by the with3 it was lifted from.</description>
        </flag>
        <flag name="IsDoFun">
          <description>This function is a functional representation of a do loop; it is only referenced twice: Once from the context the loop was lifted from and once from the inner recursive application.</description>
        </flag>
        <flag name="IsSpmdfun">
          <description>This function is a lifted region (usually one withloop) from a SPMD-block; it is only called once from within the region it was lifted from. From a backend perspective, the SPMD function is the transition from sequential to parallel execution. It is called while in sequential mode, its body is exectuted in parallel by multiple threads and it syncronizes on the return.</description>
        </flag>
        <flag name="IsMtfun">
          <description>This is (potentially) a copy of the original function that will be executed in parallel by multiple threads during runtime. Note that all functions called from such a function need to be MT-funs, as well. If the function is only used in parallel context, this may in fact be the original function that has been reused.</description>
        </flag>
        <flag name="IsStfun">
          <description>This is (potentially) a copy of the original function that will be executed sequentially by a single thread during runtime. If the function is only used in sequential context, this may in fact be the original function that has been reused.</description>
        </flag>
        <flag name="IsWrapperfun" />
        <flag name="IsZombie" />
        <flag name="IsExtern" />
        <flag name="IsGeneric" >
	  <description>True if the function definition contains generic arguments.</description>
	</flag>
        <flag name="IsInline" />
        <flag name="IsInlineCompleted" />
        <flag name="IsLacInline" />
        <flag name="AllowsInfix" />
        <flag name="HasDotArgs" />
        <flag name="HasDotRets" />
	<flag name="RefcountDots" default="FALSE" />
        <flag name="IsSpecialisation" />
        <flag name="IsTypeError">
	  <description>TRUE if the given function is a bodyless type error and thus has at least one bottom return type</description>
	</flag>
        <flag name="IsObjectWrapper" >
	  <description>TRUE if the given function is a wrapper for an instance whose instance needed to be extended in the current namespace due to added objects.</description>
	</flag>
        <flag name="WasOptimized" default="TRUE">
          <description>TRUE if function should be accounted for next optimization cycle again</description>
        </flag>
        <flag name="WasUpgraded">
	  <description>TRUE iff the return type has changed during the last run of type-upgrade</description>
	</flag>
        <flag name="FixpointFound" default="FALSE">
          <description>
            TRUE iff the fixpoint of this function has been found in SOSSK.
          </description>
        </flag>
      </flags>
    </node>
<!--

  N_arg :

-->
    <node name="Arg">
      <description>
      One argument of a defined function definition.
      </description>
      <sons>
        <son name="Avis">
          <targets>
            <target mandatory="yes">
              <node name="Avis" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Arg" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Type"  default="NULL" inconstructor="no">
          <type name="OldType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="cg_ctr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="TypeString" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="rid" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Objdef" inconstructor="no">
          <type name="ExtLink">
            <targets>
              <target mandatory="no">
                <node name="Objdef" />
                <phases>
                <!--
                  <range from="ptc_rso" to="ussa_reso" />
                -->
                  <range from="mod_uss" to="ussa_reso" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
	<attribute name="Linksign" inconstructor="no">
	  <type name="Integer">
            <targets>
              <target mandatory="no" >
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="IsReadonly" />
        <flag name="IsReference" >
	  <description> Set to true if the given argument is a reference argument. The flag is reset to false when resolving reference arguments and WasReference is set to true instead. For all other kinds of arguments it is set to false.
	  </description>
	</flag>
        <flag name="WasReference" >
	  <description> Set to true after resolving reference args if the given argument was a reference argument before. Set to false otherwise.
	  </description>
	</flag>
        <flag name="IsArtificial" >
	  <description> Set to true after resolving objects if the given argument was introduced by an object dependency and thus will be removed once the objects are reintroduced in precompile. Set to false otherwise.
	  </description>
	</flag>
        <flag name="IsPadded" />
        <flag name="IsAliasing" default="TRUE" />
        <flag name="IsRefcounted" default="TRUE" />
        <flag name="HasLinksignInfo" />
	<flag name="IsUnique" />
	<flag name="IsInUse" default="FALSE" >
	  <description> Used to mark unused function arguments in DeadCodeRemoval. Marked arguments are removed in signature simplification.
	  </description>
        </flag>	  
      </flags>
    </node>
<!--

  N_block :

-->
    <node name="Block">
      <sons>
        <son name="Instr">
          <targets>
            <target mandatory="yes">
              <node name="Assign" />
              <node name="Empty" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Vardec">
          <targets>
            <target mandatory="no">
              <node name="Vardec" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="CacheSim" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SPMD_Prolog_ICMs" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Fundef" />
                <phases>
                  <phase name="comp" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Scheduler_Init" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Assign" />
                <phases>
                  <phase name="comp" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSACounter" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="SSAcnt" />
                <phases>
                  <phase name="ssa" />
                  <phase name="wltssa" />
                  <phase name="ssawc" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dataflowgraph" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Dataflowgraph" />
                <phases>
                  <range from="mt3_cdfg" to="mt3_concel" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="In_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_vardec :

-->
    <node name="Vardec">
      <sons>
        <son name="Avis">
          <targets>
            <target mandatory="yes">
              <node name="Avis" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Vardec" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Type" default="NULL" inconstructor="no">
          <type name="OldType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="cg_ctr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Icm" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Icm" />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsPadded" />
        <flag name="HasBeenEliminated" >
	  <description>Used in ArrayElimination to mark vardecs that are not used anymore. These are later freed by DCR</description>
	</flag>
      </flags>
    </node>
<!--

  N_assign :

-->
    <node name="Assign">
    <description>Spine of an N_block</description>
      <sons>
        <son name="Instr">
          <targets>
            <target mandatory="yes">
              <set name="Instr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Assign" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
	<attribute name="ExecMode" inconstructor="no">
	  <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <!-- NOT TESTED -->
                  <range from="mt3_crwiw" to="mt3_repfun" /> 
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="CellId" inconstructor="no">
	  <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="mt3_asmra" to="mt3_crece" />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="Visited_With" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="With" />
                <phases>
                  <phase name="wlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Tag" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="With" />
                <phases>
                  <phase name="wlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dataflownode" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Dataflownode" />
                <phases>
                  <range from="mt3_cdfg" to="mt3_concel" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Index" inconstructor="no">
          <type name="IndexInfo">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase from="opt_cyc_wli" to="opt_cyc_wlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsUnused" />
        <flag name="IsNotAllowedToBeMovedUp" default="FALSE">
          <description>
            This flag is used during the "Withloop Lock Optimization" process.
            It indicates that certain assignments are not allowed to be moved
            above the global object-lock.
          </description>
        </flag>
        <flag name="IsNotAllowedToBeMovedDown" default="FALSE">
          <description>
            This flag is used during the "Withloop Lock Optimization" process.
            It indicates that certain assignments are not allowed to be moved
            below the global object-lock release.
          </description>
        </flag>
      </flags>
      <checks>
        <check name="CHKassignAvisSSAAssign" />
      </checks>
    </node>
<!--

  N_let :

-->
    <node name="Let">
    <description>Assignment of value to identifier</description> 
      <sons>
        <son name="Ids">
          <targets>
            <target mandatory="no">
              <node name="SPIds" />
              <phases>
                <range from="initial" to="ptc_ivd" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="Ids" />
              <phases>
                <range from="ptc_ivd" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Expr">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="LIRFlag" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="lir" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_cast :

-->
    <node name="Cast">
      <sons>
        <son name="Expr">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="NType" inconstructor="yes">
          <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_return :

-->
    <node name="Return">
      <sons>
        <son name="Exprs">
          <targets>
            <target mandatory="no" >
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="CRet" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <set name="Expr" />
                <phases>
                  <!--  <range from="precompile" to="final" /> TODO -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!-- 
  N_cond :

-->
    <node name="Cond">
      <sons>
        <son name="Cond">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Then">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Else">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="In_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_do :

-->
    <node name="Do">
      <sons>
        <son name="Cond">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Body">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Skip" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Label" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="initial" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="In_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_while :

-->
    <node name="While">
      <sons>
        <son name="Cond">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Body">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_annotate :

-->
    <node name="Annotate">
      <sons></sons>
      <attributes>
        <attribute name="Tag" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FunNumber" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FunApNumber" inconstructor="yes" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_ap :

-->
    <node name="Ap">
	    <description>
            Application of a user-defined function.
            </description>
      <sons>
        <son name="Args">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Fundef" inconstructor="yes" >
          <type name="ExtLink">
            <targets>
              <target mandatory="yes">
                <node name="Fundef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ArgTab" inconstructor="no" >
          <type name="ArgTab">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="pc_fpc" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="ConsiderInline" default="TRUE" />
        <flag name="IsRecursiveDoFunCall" default="FALSE" />
      </flags>
    </node>
<!--

  N_mop :

-->
    <node name="SPMop">
      <sons>
        <son name="Ops">
          <targets>
            <target mandatory="yes" >
              <node name="Exprs"/>
              <phases>
                <all />
              </phases>
            </target>
          </targets>
       	</son>
        <son name="Exprs">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes> </attributes>
      <flags>
        <flag name="IsFixed" />
      </flags>
    </node>
<!--

  N_exprs :

-->
    <node name="Exprs">
      <sons>
        <son name="Expr">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_funcond :

-->
    <node name="Funcond">
     <description>
      A SaC expression of the form: cond ? truevalue : elsevalue.
     </description>
      <sons>
        <son name="If">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Then">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Else">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_array :

-->
    <node name="Array">
    <description>Constant array of array elements. In early phases, 
     the elements are exprs; after the array flattening phase, the
     elements may be an arbitrary mixture of N_id nodes and/or 
     scalar constant nodes.
     The shapes of all elements must match. The shape of the array
     represented by the N_array is the catenation of the ARRAY_FRAMESHAPE
     and the shape specified by the ELEMTYPE.</description>
      <sons>
        <son name="AElems">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Elemtype" inconstructor="yes" >
          <description> The type of all array elements. The Elemtype may be used
           to deduce the common shape of those elements.</description>
          <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FrameShape" inconstructor="yes" >
		<description>The frameshape of the array. 
			The frameshape may NOT be an empty vector, 
			with one simple scalar (e.g., N_num) hanging from
			AELEMS. Simple scalars must be represented directly
			as themselves, or via an N_id node.
		 </description>
          <type name="Shape">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="String" default="NULL" inconstructor="no" >
          <description>In case of constant character arrays defined
            as strings, this attribute holds the original
            definition. The definition needs to be safe for printing as
            a C string, e.g. special characters need to be escaped.
            TODO: This should be eliminated as soon as possible.
          </description>
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
      </flags>
    </node>
<!--

  N_id :

-->
    <node name="Id">
      <sons></sons>
      <attributes>
        <attribute name="Avis" inconstructor="yes">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Avis" />
                <phases>
                  <range from="initial" to="cg_cpl"/>
                </phases>
              </target>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <range from="cg_cpl" to="final"/>
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WL" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <unknown />
                <phases>
                  <phase name="wlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ICMtext" default="NULL" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
          <description>
            Deprecated. Still used in the compiler backend until major redesign of backend node structure.
          </description>
        </attribute>
        <attribute name="NT_Tag" default="NULL" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="cg_cpl" to="final" />
                </phases>
              </target>
            </targets>
          </type>
          <description>
            Deprecated. Still used in the compiler backend until major redesign of backend node structure.
          </description>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsSclPrf" />
      </flags>




    </node>
<!--

  N_num :

-->
    <node name="Num">
     <description>  Integer scalar </description>
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_char :

-->
    <node name="Char">
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Char">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_float :

-->
    <node name="Float">
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Float">
            <targets>
              <target mandatory="yes">
<!--                <any />-->
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_double :

-->
    <node name="Double">
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Double">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_bool :

-->
    <node name="Bool">
      <sons></sons>
      <attributes>
        <attribute name="Val" inconstructor="yes" >
          <type name="Bool">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_str :

-->
    <node name="Str">
      <sons></sons>
      <attributes>
        <attribute name="String" inconstructor="yes" >
          <description>
            The value of this string. Note that the string needs to be
            in an encoding which is safe for printing in C code, e.g.
            special characters like quotation marks need to be escaped.
          </description>
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_type :

-->
    <node name="Type">
      <sons></sons>
      <attributes>
        <attribute name="Type" inconstructor="yes" >
	  <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
    </node>
<!--

  N_prf :

-->
    <node name="Prf">
      <sons>
        <son name="Args">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Prf" inconstructor="yes" >
          <description>
            Describes the type of function this node
            represents. A list of possible values is
            found in src/libsac2c/tree/prf_info.mac
          </description>
          <type name="Prf">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="SelIssuedDataflowGuard" default="FALSE" >
         <description> 
          If true, this sel operation has already
          emitted an F_dataflowguard operation that now precedes this
          sel op. If false, then SWLFI will emit a guard, then set this flag.
         </description> 
        </flag>
      </flags>
    </node>
<!--

  N_dot :

-->
    <node name="Dot">
      <sons></sons>
      <attributes>
        <attribute name="Num" inconstructor="yes" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_setwl :

-->
    <node name="SetWL">
      <sons>
        <son name="Vec">
          <targets>
            <target mandatory="yes">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="SPId" />
              <phases>
              <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Expr">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_empty :

-->
    <node name="Empty">
      <sons></sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_icm :

-->
    <node name="Icm">
      <sons>
        <son name="Args">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes" >
          <type name="SharedString">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Indent_Before" default="0" inconstructor="no" >
          <description>the default value has to be fixed!</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Indent_After" default="0" inconstructor="no" >
          <description>the default value has to be fixed!</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsEndOfStatement" />
      </flags>
    </node>
<!--

  N_pragma :

-->
    <node name="Pragma">
      <sons>
        <son name="ReadOnly" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Nums" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Refcounting" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Nums" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Effect" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="LinkSign" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Nums" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="LinkName" default="NULL" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LinkMod" default="NULL" inconstructor="no" >
          <type name="StringSet">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LinkObj" default="NULL" inconstructor="no" >
          <type name="StringSet">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WLComp_APS" default="NULL" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Exprs" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="APL" default="NULL" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Ap" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="NumParams" default="0" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="InitFun" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <!-- <range from="imp" to="readsib" /> TODO -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="CopyFun" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <!-- <range from="import" to="readsib" /> TODO -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="FreeFun" inconstructor="no" >
          <type name="String">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <!-- <range from="import" to="readsib" /> TODO -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
       </attributes>
      <flags>
        <flag name="RefcountDots" default="FALSE" />
      </flags>
    </node>
<!--

  N_ssacnt :

-->
    <node name="SSAcnt">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="SSAcnt" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Count" inconstructor="yes" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="BaseId" inconstructor="yes" >
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_ssastack :

-->
    <node name="SSAstack">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="SSAstack" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Avis" inconstructor="yes" >
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Avis" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="NestLevel" inconstructor="yes" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="InUse" />
      </flags>
    </node>
<!--

  N_avis :

-->
    <node name="Avis">
    <description>Arg and vardec information structure</description> 
      <sons>
        <son name="Dim" default="NULL">
          <description>
          An expression (N_exprs) specifying the array's rank
          as a symbolic array attribute. The expression is a numeric
          constant (N_num) for AKS, AKD, and AKV arrays, and an
          identifier (N_id) for AUD arrays.
          </description>
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <range from="opt_isaa1" to="opt_esaa1" />
                <range from="opt_isaa2" to="opt_esaa2" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Shape" default="NULL">
          <description>
	  An array (N_array) specifying the array's shape
	  as a symbolic array attribute. The array is
	  comprised of integer constants (N_num) for AKV and AKS arrays,
	  a mixed array of integer constants and identifiers (N_num, N_id)
	  for AKD arrays with partial shape information, or an
	  identifier (N_id) for AUD arrays.
          </description>
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <range from="opt_isaa1" to="opt_esaa1" />
                <range from="opt_isaa2" to="opt_esaa2" />
              </phases>
            </target>
          </targets>
        </son>        
      </sons>

      <attributes>
        <attribute name="Decl" default="NULL" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Vardec" />
                <phases>
                  <all />
                </phases>
              </target>
              <target mandatory="yes">
                <node name="Arg" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Name" inconstructor="yes" >
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Type" inconstructor="yes" >
	  <description>the inferred type, which may be more precise than DeclType.</description>
          <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="initial" to="cg_ctr" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
	<attribute name="DeclType" default="NULL" inconstructor="no" >
	  <description>the declared type, iff present.</description>
	  <type name="NewType">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="ConstrType" default="NULL" inconstructor="no" >
	  <description>type constraint as imposed by the applied use of the variable, iff present.</description>
	  <type name="NewType">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="ConstrVar" default="NULL" inconstructor="no" >
	  <description>pointer to the avis of the predicat that results from the type constraint in ConstrType, iff present</description>
	  <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="ConstrSet" default="NULL" inconstructor="no" >
	  <description>pointer to set of non-type constraints  as imposed by the applied use of the variable, iff present</description>
	  <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Constraint" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="Pos" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="idc" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSAAssign" inconstructor="no" >
          <description>
            provides a direct link to the N_assign node containing the definition of the identifier represented by this AVIS node. In SSA form, AVIS_SSAASSIGN must only be NULL for identifiers for function arguments and with-loop index variables.
          </description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Assign" />
                <phases>
                  <!-- 
                  <range from="ptc_ssa" to="wlt_l2f" /> 
                  <range from="wlt_ssa" to="ussa_ussa" /> 
                  -->
                  <range from="ptc_ssa" to="cg_frtr" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSACount" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="SSAcnt" />
                <phases>
                  <phase name="ptc_ssa" />
                  <phase name="wlt_ssa" />
                  <phase name="cwc_ssa" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSAstack" inconstructor="no" >
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="SSAstack" />
                <phases>
                  <phase name="ptc_ssa" />
                  <phase name="wlt_ssa" />
                  <phase name="cwc_ssa" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSAThen" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <phase name="ptc_ssa" />
                  <phase name="wlt_ssa" />
                  <phase name="cwc_ssa" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SSAElse" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <phase name="ptc_ssa" />
                  <phase name="wlt_ssa" />
                  <phase name="cwc_ssa" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="NeedCount" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="opt_lir" />
                  <phase name="opt_al" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WL_NeedCount" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="opt_al" />
                  <range from="opt_saacyc_swlfi" to="opt_saacyc_swlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Counting_WL" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="With" />
                <phases>
                  <phase name="opt_al" />
                  <phase name="opt_saacyc_swlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="VarNo" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="mem_rc" />
                  <phase name="mem_rcm" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="BotRT" default="NULL" inconstructor="no" >
          <type name="NewType">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="tc_ebt" />
                </phases>
              </target>
            </targets>
          </type>
          <description>
            Used in order to memorize a replacement type for bottom funcond variables.
          </description>
        </attribute>
        <attribute name="Subst" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <phase name="opt_scc" />
                  <phase name="opt_cyc_cse" />
                  <phase name="opt_lir" />
                  <phase name="pc_ussa" />
                  <phase name="wlt_ussa" />
		  <phase name="ussa_rera" />
                  <phase name="mem_racc" />
                </phases>
              </target>
	      <target mandatory="no">
	        <node name="Objdef" />
		<phases>
		  <phase name="pc_reso" />
		</phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SubstLvl" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="idc" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SubstCd" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="idc" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Alt" inconstructor="no" >
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                </phases>
              </target>
            </targets>
          </type>
          <description>
            Used by CompareTree to remember alpha conversion
          </description>
        </attribute>
        <attribute name="DefDepth" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="lir" />
                  <phase name="swlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="LirMove" inconstructor="no" >
          <type name="BitField">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="lir" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ExpResult" inconstructor="no" >
          <type name="Bool">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="lir" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="AliasMask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="ia" />
                </phases>
              </target>
            </targets>
          </type>
          <description>Used by Interface Analysis in order to 
            obtain the transitive hull of variable aliases.</description>
        </attribute>
	<attribute name="UniqueRef" inconstructor="no" >
	  <description>First reference to this unique object declaration. Used to generate useful error messages in case of uniqueness violation.</description>
	  <type name="Link">
	    <targets>
	      <target mandatory="yes">
	        <node name="Id" />
		<phases>
		  <phase name="cu" />
		</phases>
	      </target>
	    </targets>
	  </type>
	</attribute>
        <attribute name="WithLoopLevel" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="unq" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Demand" inconstructor="no" >
          <description>
            This attribute constitutes the demand of a variable during the
            specializing oracle for static shape knowledge.
          </description>
          <type name="Constant">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="MinVal" default="NULL">
          <description>
          This field is a pointer to the N_avis of the
          minimum value that this variable can have. 
          The field is valid only for integer-like
          types, i.e., it does not apply to doubles, etc.
          The value may be an N_num, an N_array, or an N_id.
          If it points to an N_id, the N_id must have an associated SSAASSIGN
          giving the origin of the value. For example, the
          MinVal of the lower bound of a WL index vector might be
          an N_array with value [0,0,0], or it might be an N_id
          with SSASSIGN value of "_shape_A_(X) - 1". 

          A typical use of MinVal is to allow constant folding to
          to eliminate an F_non_neg_val_V call.

          The AVIS attributes DIM, SHAPE, MINVAL, and MAXVAL 
          are explicitly handled by DCR as if they were AST sons. 
          I.e., the presence of a non-null pointer in one of them causes
          preservation of the AVIS pointed to, along with its baggage.
          </description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                <range from="opt_isaa1" to="opt_esaa1" />
                <range from="opt_isaa2" to="opt_esaa2" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>

        <attribute name="MaxVal" default="NULL">
          <description>
         See MinVal description; MAXVAL points to the avis of the maximum, rather
         than the minimum, value of a WL index vector.
         However, like WL index vectors, MAXVAL is
         part of a semi-closed interval; MAXVAL(X) is at least 1+maxreduce(X).
         A typical use of MAXVAL is to allow the constant folder to
         eliminate an F_val_le_val_VxV call.
          </description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                <range from="opt_isaa1" to="opt_esaa1" />
                <range from="opt_isaa2" to="opt_esaa2" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>

      <flags>
        <flag name="SSADefined" />
        <flag name="SSALPINV" />
        <flag name="IsAlias" default="TRUE" >
          <description>Set by the Alias Analysis traversel, AVIS_ISALIAS 
            denotes whether there can be more than one identifier for a 
            given data object.</description>
        </flag>
        <flag name="IsDead" >
          <description>Used to indicate 
            which VARDECS are no longer needed and can thus be eliminated.
          </description>
        </flag>
        <flag name="IsLifted" >
          <description>Used by SpmdLift traversal in order to indicate 
            which VARDECS are no longer needed and can thus be eliminated.
          </description>
        </flag>
	<flag name="IsUniqueConsumed" default="FALSE" >
	  <description>Used by the uniqueness checker to determine whether
	  a unique type has been consumed earlier on.
	  </description>
	</flag>
	<flag name="IsUniqueConsumedThen" default="FALSE" >
	  <description>Used by the uniqueness checker to determine whether
	  a unique type has been consumed earlier on, before the THEN
	  branch of an N_cond.
	  </description>
	</flag>
	<flag name="IsUniqueConsumedElse" default="FALSE" >
	  <description>Used by the uniqueness checker to determine whether
	  a unique type has been consumed earlier on, before the ELSE
	  branch of an N_cond.
	  </description>
	</flag>
        <flag name="HasDTThenProxy" default="FALSE" />
        <flag name="HasDTElseProxy" default="FALSE" />
        <flag name="HasSAAArguments" default="FALSE">
          <description>Within the optimisation cycle we may introduce new parameters to functions, representing shape or dimension of other parameters. If this is done for this parameter, we may set this value to TRUE.</description>
        </flag>
        <flag name="IsUsed" default="FALSE" >
          <description>Used by Loop Scalarization to determine whether
          a variable is used otherwise than within array position of
          selections.
          </description>
        </flag>
        <flag name="BelongingAssignmentIsNotAllowedToBeMovedUp" default="FALSE">
          <description>
            This flag is used during the "Withloop Lock Optimization" process.
            It indicates that the belonging assignment is not allowed to be
            moved above the global object-lock.
          </description>
        </flag>
        <flag name="BelongingAssignmentIsNotAllowedToBeMovedDown" default="FALSE">
          <description>
            This flag is used during the "Withloop Lock Optimization" process.
            It indicates that the belonging assignment is not allowed to be
            moved below the global object-lock release.
          </description>
        </flag>
	<flag name="IsThreadIndex" default="FALSE">
	  <description>
	    If true, the given variable is the dedicated index variable for
	    this thread function. Used by the mutc backend.
	  </description>
	</flag>
	<flag name="IsWLFolded" default="FALSE">
	  <description>
             If true, the given variable is the result of a foldeeWL
             that has been folded out of existence.
	  </description>
	</flag>
      </flags>
    </node>
<!--

  N_mt :

-->
    <node name="MT">
      <sons>
        <son name="Region">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Fundef" inconstructor="no" >
          <type name="ExtLink">
            <targets>
              <target mandatory="yes">
                <node name="Fundef" />
                <phases>
                  <unknown />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_ex :

-->
    <node name="EX">
      <sons>
        <son name="Region">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_st :

-->
    <node name="ST">
      <sons>
        <son name="Region">
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_with :

-->
    <node name="With">
      <sons>
        <son name="Part">
          <description>
	    Definition of one partition of a with-loop.
	  </description>
          <targets>
            <target mandatory="yes">
              <node name="Part" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Code">
          <description>
	    Chain of codes associated with one or more partitions 
	    in the WL. Codes may be shared by more than one partition:
	    each partition has an attribute, PART_CODE, that points to
	    a WITH_CODE block. 
	  </description>
          <targets>
            <target mandatory="yes">
              <node name="Code" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="WithOp">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Parts" default="-1" inconstructor="no" >
          <description>
          The number of partitions in this with-loop.
          I have no idea what the -1 indicates.
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Pragma" inconstructor="no" >
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Pragma" />
                <phases>
                  <range from="scp_prs" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="In_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Referenced" inconstructor="no" >
          <description>
          The total number of RHS references to the result of this WL.
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="opt_cyc_wlf"     to="opt_cyc_wlf" />
                  <range from="opt_saacyc_swlfi" to="opt_saacyc_swlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Referenced_Fold" default="0">
          <description>
            The number of RHS references, within a potential folder-WL,  
            to the result of this WL, by the WL at
            Referenced_Fold_WL. WLF and SWLF can fold WLs only
            if this field and WITH_REFERENCED are equal.
            The only rationale for this restriction is that it prevents
            the same foldee-WL element from being computed more than once.
          </description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="opt_cyc_wlf"      to="opt_cyc_wlf" />
                  <range from="opt_saacyc_swlfi" to="opt_saacyc_swlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Referenced_Folderwl" default ="NULL" >
          <description>
            The with-loop that refers to the result created by
            this with-loop. See Referenced_Fold.
          </description>
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <unknown />
                <phases>
                  <range from="opt_saacyc_swlfi" to="opt_saacyc_swlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="References_Folded" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="opt_cyc_wlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SelMax" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="opt_cyc_wlprop" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="isSWLFFoldable" inconstructor="no" >
          <type name="Bool">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="opt_cyc_swlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Cost" inconstructor="no" >
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="opt_cyc_swlf" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsFoldable" />

	<flag name="IsDependent" />
      </flags>
    </node>
<!--

  N_part :

-->
    <node name="Part">
      <sons>
        <son name="WithId">
          <targets>
            <target mandatory="yes">
              <node name="Withid" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Generator">
          <targets>
          <target mandatory="yes">
              <node name="Generator" />
              <node name="Default" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Part" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Code" inconstructor="yes">
          <description>
	  A pointer to the WITH_CODE block that contains the code
	  for this partition.  if present, the used counter for the code
            needs to be increased.</description>
          <type name="CodeLink">
            <targets>
              <target mandatory="yes">
                <node name="Code" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsCopy" />
      </flags>
    </node>
<!--

  N_withid :

-->
    <node name="Withid">
      <sons>
        <son name="Vec">
          <targets>
            <target mandatory="yes">
              <node name="SPIds" />
              <phases>
                <range from="initial" to="ptc_ivd" />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Ids" />
              <phases>
                <range from="ptc_ivd" to="mem_alloc" />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
          <description>This is the vector form of a WL generator. After explicit allocation (EMAL), Vec points to 
            an N_id node.</description>
	</son>
        <son name="Ids">
          <targets>
            <target mandatory="no">
              <node name="Ids" />
              <phases>
                <range from="ptc_ivd" to="mem_alloc" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="SPIds" />
              <phases>
                <range from="initial" to="ptc_ivd" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
          <description> This is the scalarized form of a WL generator. After explicit allocation (EMAL), Ids points to 
            an N_exprs-list of N_id nodes.</description>
	</son>
        <son name="Idxs" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Ids" />
              <phases>
                <range from="opt_wlidx" to="mem_alloc" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
	    <description>This is a chain of indices into the ravels of the results of genarray and modarray withloops. Once they are explicitly allocated in mem_alloc, they are transformed from identifier definitions (N_ids) into use sites (N_exprs of N_id).</description>
	</son>
      </sons>
      <attributes>
      </attributes>
      <flags>
        <flag name="VecNeeded" />
      </flags>
    </node>
<!--

  N_generator :

-->
    <node name="Generator">
      <sons>
        <son name="Bound1">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <range from="scp_prs" to="cwc_ebt" />
                <range from="opt_ufl" to="final" />
              </phases>
            </target>
            <target>
             <node name="Id" />
             <phases>
               <range from="scp_prs" to="final" />
             </phases>
            </target>
            <target mandatory="yes">
              <node name="Dot" />
              <phases>
                <range from="scp_prs" to="pre_acn" />
              </phases>
            </target>
          </targets>
          <description>Bound may be an N_num or an N_array, except that, in phase 11 (optimizations), it must be an N_id. </description>
        </son>
        <son name="Bound2">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <range from="scp_prs" to="cwc_ebt" />
                <range from="opt_ufl" to="final" />
              </phases>
            </target>
            <target>
             <node name="Id" />
             <phases>
               <range from="scp_prs" to="final" />
             </phases>
            </target>
            <target mandatory="yes">
              <node name="Dot" />
              <phases>
                <range from="scp_prs" to="pre_acn" />
              </phases>
            </target>
          </targets>
          <description>Bound may be an N_num or an N_array, except that, in phase 11 (optimizations), it must be an N_id. </description>
        </son>
        <son name="Step">
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Width">
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="GenWidth" default="NULL">
          <targets>
            <target mandatory="no" >
              <set name="Expr" />
              <phases>
                <range from="opt_cyc" to="opt_wrci" />
              </phases>
            </target>
          </targets>
          <description>
            GENWIDTH contains a vector resulting from subtracting BOUND1 from BOUND2. GENWIDTH is introduced by wlsimplification which puts the operations performing the subtraction in front of the loop. In many cases, the partial evaluation infrastructure can determine a value for GENWIDTH although the bounds are not known at compile time. Example: BOUND1 = [a], BOUND2 = [b], where b = a + [1] => GENWIDTH = [1]. GENWIDTH then serves three purposes: First, it is used by wlsimplicition to identify empty generators which can then be eliminated. Second, it is used in constant folding to propagate static index vector knowledge for one-element generators. Finally, it is used by the with-loop reuse candidate inference mechanism to identify further reuse candidates in situations where a WL A performs mainly B[iv] except in exactly one generator where B[iv+off] is selected. If off >= GENWIDTH, then B is a reuse candidate for A. All GENWIDTH annotations are removed by wrci, the remaining computations are removed by dcr.
          </description>
        </son>
      </sons>
      <attributes>
        <attribute name="Op1" inconstructor="yes">
          <type name="Prf">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>        
        </attribute>
        <attribute name="Op2" inconstructor="yes">
          <type name="Prf">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_default :

-->
    <node name="Default">
      <sons></sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_code :

-->
    <node name="Code">
      <sons>
        <son name="CBlock">
	<description> 
	 A list of N_assigns that correspond to the set
	 of expressions that appear within the curly braces
	 that (may) follow a WL generator specification.
	</description> 
          <targets>
            <target mandatory="no">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="CExprs">
	<description> 
	 A list of N_exprs that represent the expressions
	 that create the result elements associated with
	 each WL partition generator.
	</description> 
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Code" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Used" default="0" mandatory="yes" inconstructor="no">
	<description> Reference count - the number of PART_CODE
	 entries that point to this code block.
	</description>
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Id" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="final" /> <!-- TODO misc phase? -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="WLAA_Info" default="NULL" inconstructor="no">
          <type name="AccessInfo">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="initial" />
		  <!-- this is only used during wlaa and array padding! -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="TSI_TileShp" inconstructor="no">
          <type name="ShpSeg">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="Visited" />
        <flag name="HasResolveableDependencies" />
	<flag name="IsDummyCode" />
        <flag name="IsSimdSuitable" />
      </flags>
    </node>
<!--

  N_with2 :

-->
    <node name="With2">
      <sons>
        <son name="WithId">
          <targets>
            <target mandatory="yes">
              <node name="Withid" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Segs">
          <targets>
            <target mandatory="yes">
              <node name="WLseg" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="WLsegVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Code">
          <targets>
            <target mandatory="yes">
              <node name="Code" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="WithOp">
          <targets>
            <target mandatory="yes">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Dims" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Pragma" default="NULL" inconstructor="no">
          <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Pragma" />
                <phases>
                  <range from="wlt_wltr" to="wlt_l2f" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="In_Mask" inconstructor="no">
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no">
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no">
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ReUse" inconstructor="no">
          <type name="DFMask">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <phase name="rci" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
       </attributes>
      <flags>
	<flag name="NeedsOffset" />
	<flag name="Parallelize" />
	<flag name="HasNaiveOrdering" default="FALSE">
	  <description>True, iff the naive compilation scheme was used and thus the with-loop is not computed in canonical order.</description>
	</flag>
      </flags>
    </node>
<!--

  N_genarray :

-->
    <node name="Genarray">
      <description>withloop generate array operation.</description>
      <sons>
        <son name="Shape">
          <description>
            The frame shape of the result. The WL result shape
            is: Shape ++ shape(Default).
          </description>
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Default">
          <description>
           The default cell of the result.
          </description>
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Mem" default="NULL">
          <targets>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Sub" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Id" />
              <phases>
                <range from="pc_mmv" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="RC" default="NULL">
                <description>
                  Somebody please provide a description of RC!
                </description>

          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <range from="opt_wrci" to="mem_rci" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="DefShapeExpr" default="NULL">
          <description>For with3 loops, the default element is given by genarray( DefShapeExpr, Default) where default denotes the default element of the genarray. Only present if a default element is present, as well.</description>
          <targets>
            <target mandatory="no">
              <node name="Array" />
              <phases>
                <range from="wlt_wlsd" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="SPEXPR" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="sp" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Idx" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <range from="opt_wlidx" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_modarray :

-->
    <node name="Modarray">
      <description>withloop operation</description>
      <sons>
        <son name="Array">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Mem" default="NULL">
          <targets>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Sub" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Id" />
              <phases>
                <range from="pc_mmv" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="RC" default="NULL">
                <description>
                  Somebody please provide a description of RC!
                </description>
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <range from="opt_wrci" to="mem_rci" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="SPEXPR" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="sp" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Idx" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Avis" />
                <phases>
                  <range from="opt_wlidx" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_spfold :

-->
    <node name="SPFold">
      <description>withloop operation (SP version)</description>
      <sons>
        <son name="Neutral">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Guard" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="Expr" />
              <phases>
                <range from="scp" to="sim_flt" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="SPId" />
              <phases>
                <range from="sim_flt" to="ptc_ivd" />
              </phases>
            </target>
            <target mandatory="no">
              <node name="Id" />
              <phases>
                <range from="ptc_ivd" to="ptc_cwf" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Fun" default="NULL" inconstructor="no">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Ns" default="NULL" inconstructor="no">
          <type name="Namespace">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>          
            </targets>
          </type>
        </attribute>
        <attribute name="SPEXPR" inconstructor="no">
          <description> Used in sac.y only in order to ship the WL body result
                        into the N_code!
          </description>
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="sp" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_fold :

-->
    <node name="Fold">
      <description>withloop operation</description>
      <sons>
        <son name="Neutral">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Guard" default="NULL">
          <targets>
            <target mandatory="no">
              <node name="Id" />
              <phases>
                <range from="ptc_cwf" to="ewl_accu" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Fundef" inconstructor="yes">
          <type name="ExtLink">
            <targets>
              <target mandatory="yes">
                <node name="Fundef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_break :

-->
    <node name="Break">
      <description>Withloop operation for stopping folding</description>
      <sons>
        <son name="Mem" default="NULL">
          <targets>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <range from="mem_alloc" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_propagate:

-->
    <node name="Propagate">
      <description>Withloop operation for propagating objects between iterations</description>
      <sons>
        <son name="Default">
          <targets>
            <target mandatory="yes">
              <set name="Expr" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next" default="NULL">
          <targets>
            <target mandatory="no">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_wlseg :

-->
    <node name="WLseg">
      <sons>
        <son name="Contents">
          <targets>
            <target mandatory="yes">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLseg" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="no">
              <node name="WLsegVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Dims" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Idx_Min" default="NULL" inconstructor="no">
          <type name="IntegerPointer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Idx_Max" default="NULL" inconstructor="no">
          <type name="IntegerPointer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="UBV" default="NULL" inconstructor="no">
          <type name="IntegerPointer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Blocks" default="0" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="BV" default="NULL" inconstructor="no">
          <type name="IntegerPointerArray">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                <!--
                  <all />
                -->
                  <range from="wlt_wltr" to="cg_cpl" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="SV" default="NULL" inconstructor="no">
          <type name="IntegerPointer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="wlt_wltr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="HomSV" inconstructor="no">
          <type name="IntegerPointer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="wlt_wltr" to="final" />
                </phases>
              </target>
            </targets>
          </type> 
       </attribute>
        <attribute name="Scheduling" inconstructor="no">
          <type name="Scheduling">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                
                  <range from="wlt_wltr" to="final" />
                <!--
                  <range from="mt_sched" to="pc_moi" />
                -->
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="TaskSel" inconstructor="no">
          <type name="TaskSel">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                <!--
                  <range from="wlt_wltr" to="final" />
                -->
                  <phase name="pc_mmv" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_wlsegvar :

-->
    <node name="WLsegVar">
      <sons>
        <son name="Contents">
          <targets>
            <target mandatory="yes">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="WLstrideVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLseg" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="no">
              <node name="WLsegVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Dims" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Idx_Min" default="NULL" inconstructor="no">
          <type name="NodePointer">
            <description>wird bei der correct-type function ausgelassen, da nicht klar 
              war, wie mit dem Arraytyp umgegangen werden soll.</description>
            <targets>
              <target mandatory="yes">
                <node name="Num" />
                <phases>
                  <all />
                </phases>
              </target>
              <target mandatory="yes">
                <node name="Id" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
          <phases>
            <all />
          </phases>
        </attribute>
        <attribute name="Idx_Max" default="NULL" inconstructor="no">
          <type name="NodePointer">
            <description>wird bei der correct-type function ausgelassen, da nicht klar 
              war, wie mit dem Arraytyp umgegangen werden soll.</description>
            <targets>
              <target mandatory="yes">
                <node name="Num" />
                <phases>
                  <all />
                </phases>
              </target>
              <target mandatory="yes">
                <node name="Id" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Scheduling" inconstructor="no">
          <type name="Scheduling">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="wlt_wltr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="TaskSel" inconstructor="no">
          <type name="TaskSel">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <range from="wlt_wltr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_wlblock :

-->
    <node name="WLblock">
      <sons>
        <son name="NextDim">
          <targets>
            <target mandatory="no">
              <node name="WLblock" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Contents">
          <targets>
            <target mandatory="no">
              <node name="WLublock" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="no">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLblock" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dim" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Bound1" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Bound2" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Step" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_wlublock :

-->
    <node name="WLublock">
      <sons>
        <son name="NextDim">
          <targets>
            <target mandatory="no">
              <node name="WLublock" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Contents">
          <targets>
            <target mandatory="no">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLublock" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dim" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Bound1" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Bound2" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Step" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_wlsimd :

-->
    <node name="WLsimd">
      <sons>
        <son name="Body" mandatory="yes">
          <target>
            <node name="WLstride" />
          </target>
        </son>
      </sons>
      <attributes>
      </attributes>
    </node>
<!--

  N_wlstride :

-->
    <node name="WLstride">
      <sons>
        <son name="Contents">
          <targets>
            <target mandatory="yes">
              <node name="WLgrid" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="WLgridVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="no">
              <node name="WLstrideVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dim" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>                
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Bound1" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Bound2" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Step" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Part" inconstructor="no">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Part" />
                <phases>
                  <range from="wlt_wltr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="DoUnroll" />
        <flag name="IsModified">
          <description>
            Used in wltransform.
          </description>
        </flag>
        <flag name="IsSimdSuitable" />
      </flags>
    </node>
<!--

  N_wlstridevar :

-->
    <node name="WLstrideVar">
      <sons>
        <son name="Bound1">
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Bound2">
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Step">
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Contents">
          <targets>
            <target mandatory="yes">
              <node name="WLgrid" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="WLgridVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLstride" />
              <node name="WLstrideVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dim" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_wlgrid :

-->
    <node name="WLgrid">
      <sons>
        <son name="NextDim">
          <targets>
            <target mandatory="no">
              <node name="WLblock" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="no">
              <node name="WLublock" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="no">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="no">
              <node name="WLstrideVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
       </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLgrid" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="no">
              <node name="WLgridVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dim" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Bound1" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Bound2" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Code" inconstructor="yes">
          <description>if present, the used counter for the code
            needs to be increased</description>
          <type name="CodeLink">
            <targets>
              <target mandatory="no">
                <node name="Code" />
                <phases>
                  <range from="wlt_wltr" to="cg_cpl" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsFitted" />
        <flag name="DoUnroll" />
        <flag name="IsNoOp" />
        <flag name="IsModified">
          <description>Used in wltransform.</description>
        </flag>
      </flags>
    </node>
<!--

  N_wlgridvar :

-->
    <node name="WLgridVar">
      <sons>
        <son name="Bound1">
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Bound2">
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="NextDim">
          <targets>
            <target mandatory="no">
              <node name="WLstride" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="no">
              <node name="WLstrideVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="WLgrid" />
              <phases>
                <all />
              </phases>
            </target>
            <target mandatory="no">
              <node name="WLgridVar" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Level" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Dim" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Code" inconstructor="yes">
          <description>if present, the used counter for the code
            needs to be increased</description>
          <type name="CodeLink">
            <targets>
            <target mandatory="yes">
                <node name="Code" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsFitted" />
        <flag name="DoUnroll" />
        <flag name="IsNoOp" />
      </flags>
    </node>
<!--

  N_dataflownode :

-->
    <node name="Dataflownode">
      <sons></sons>
      <attributes>
	<attribute name="Graph" inconstructor="yes">
	  <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Dataflowgraph"/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
	<attribute name="Assign" inconstructor="yes">
	  <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Assign" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
	<attribute name="Name" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="Dependent" default="NULL" inconstructor="no">
	  <type name="NodeList">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="UsedNodes" default="NULL" inconstructor="no">
	  <type name="NodeList">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="RefCount" default="1" inconstructor="no">
	  <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="ExecMode" default="MUTH_ANY" inconstructor="no">
	  <type name="MTExecMode">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="DFGThen" default="NULL" inconstructor="no">
	  <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Block" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
	<attribute name="DFGElse" default="NULL" inconstructor="no">
	  <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Block" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
	<attribute name="RefLeft" inconstructor="no">
	  <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="AssignmentsRearrange" />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="IsUsed" />
      </flags>
    </node>
<!--

  N_dataflowgraph :

-->
    <node name="Dataflowgraph">
      <sons></sons>
      <attributes>
        <attribute name="Members" default="NULL">
	  <type name="NodeList">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
	<attribute name="Source" default="NULL" inconstructor="no">
	  <type name="Node">
            <targets>
              <target>
                <node name="Dataflownode"/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
        </attribute>
	<attribute name="Sink" default="NULL" inconstructor="no">
	  <type name="Node">
            <targets>
              <target mandatory="yes">
                <node name="Dataflownode"/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
	<attribute name="MyHomeDFN" default="NULL" inconstructor="no">
	  <type name="Node">
            <targets>
              <target mandatory="no">
                <node name="Dataflownode"/>
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
	  </type>
	</attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_import :

-->
    <node name="Import">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <set name="Interface" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Symbol">
          <targets>
            <target mandatory="no">
              <node name="Symbol" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Mod" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_export :

-->
    <node name="Export">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <set name="Interface" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Symbol">
          <targets>
            <target mandatory="no">
              <node name="Symbol" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_use :

-->
    <node name="Use">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <set name="Interface" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Symbol">
          <targets>
            <target mandatory="no">
              <node name="Symbol" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Mod" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_provide :

-->
    <node name="Provide">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <set name="Interface" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
	<son name="Symbol">
          <targets>
            <target mandatory="no">
              <node name="Symbol" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
      </attributes>
      <flags>
        <flag name="All" />
      </flags>
    </node>
<!--

  N_symbol :

-->
    <node name="Symbol">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Symbol" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Id" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="Used" default="FALSE">
	  <description>Used to flag those symbols that are in fact used, that is, those that do exist in the module.</description>
	</flag>
      </flags>
    </node>
<!--

  N_set :

-->
    <node name="Set">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Set" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Member" inconstructor="yes">
          <type name="ExtLink" >
            <targets>
              <target mandatory="yes" >
                <node name="Objdef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_constraint :

-->
    <node name="Constraint">
      <sons>
        <son name="Expr">
          <targets>
            <target mandatory="yes">
              <node name="Prf" />
              <node name="Ap" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Constraint" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="PredAvis" inconstructor="yes">
          <type name="Link" >
            <targets>
              <target mandatory="yes" >
                <node name="Avis" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_ret :

-->
    <node name="Ret">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Ret" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Type" inconstructor="yes">
	  <type name="NewType">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
        <attribute name="CorrespondingArg" default="NULL" inconstructor="no">
	  <type name="Link">
            <targets>
              <target mandatory="no">
                <node name="Arg" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Linksign" inconstructor="no">
          <type name="Integer">
            <targets>
              <target mandatory="no" >
                <any />
                <phases>
                  <range from="pre_rpr" to="final" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="IsAliasing" default="TRUE" />
        <flag name="IsArtificial" >
	  <description> Set to true if the given return value was introduced when resolving reference arguments and thus will be removed again later on. Set to false for all other return values.
	  </description>
	</flag>
        <flag name="IsRefcounted" default="TRUE" />
        <flag name="HasLinksignInfo" />
        <flag name="IsCReturn" />
        <flag name="WasRemoved" default="FALSE" />
        <flag name="IsUnique" default="FALSE" />
      </flags>
    </node>
<!--

  N_ids :

-->
    <node name="Ids">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Ids" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Avis" inconstructor="yes">
          <type name="Link">
            <targets>
              <target mandatory="yes">
                <node name="Avis" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_nums :

-->
    <node name="Nums">
     <description>  Linked list of Integers, used only in scanner/parser </description>
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Nums" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Val" inconstructor="yes">
	  <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
      </flags>
    </node>
<!--

  N_globobj :

-->
    <node name="Globobj">
      <sons>
      </sons>
      <attributes>
        <attribute name="Objdef" inconstructor="yes">
	  <type name="ExtLink">
            <targets>
              <target mandatory="yes">
              <node name="Objdef" />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
      </flags>
    </node>
<!--

  N_spid :

-->
    <node name="SPId">
      <sons></sons>
      <attributes>
        <attribute name="Ns" inconstructor="yes">
	  <type name="Namespace">
            <targets>
              <target mandatory="no">
                <any />
                <phases>
                  <range from="initial" to="ptc_goi" />
                </phases>
              </target>
              <!--  <target mandatory="yes">
                      <any />
                      <phases>
                        <phase name="ptc_gon"/>
                      </phases>
                    </target> -->
            </targets>
          </type>
	</attribute>
        <attribute name="Name" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_spids :

-->
    <node name="SPIds">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="SPIds" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes">
	  <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags></flags>
    </node>
<!--

  N_spap :

-->
    <node name="SPAp">
      <sons>
        <son name="Id">
          <targets>
            <target mandatory="yes">
              <node name="SPId" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
        <son name="Args">
          <targets>
            <target mandatory="no">
              <node name="Exprs" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes></attributes>
      <flags></flags>
    </node>
<!--

  N_error :

-->
    <node name="Error">
      <sons>
        <son name="Next">
          <targets>
            <target mandatory="no" >
              <node name="Error" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="message" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags></flags>
    </node>
<!--
  
  N_funbundle :

-->
    <node name="FunBundle">
      <sons>
        <son name="Fundef">
          <targets>
            <target mandatory="no" >
              <node name="Fundef" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Next">
          <targets>
            <target mandatory="no" >
              <node name="Fundef" />
              <node name="FunBundle" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="Name" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Ns" inconstructor="yes">
          <type name="Namespace">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="ExtName" inconstructor="yes">
          <type name="String">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Arity" inconstructor="yes">
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
    </node>
<!--

  N_with3 :

-->
    <node name="With3">
      <description>Used to model the 1d with-loop used by the mutc backend.</description>
      <sons>
        <son name="Ranges">
	  <description>Gives the set of ranges (generators) this with-loop is defined for. Needs to be a full partition of the outer-most dimension of the result.</description>
          <targets>
            <target mandatory="yes">
              <node name="Range" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Operations">
	  <description>The operations this with-loop computes.</description>
          <targets>
            <target mandatory="yes">
              <set name="WithOp" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
      </sons>
      <attributes>
        <attribute name="In_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Out_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
        <attribute name="Local_Mask" inconstructor="no" >
          <type name="DFMask">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <phase name="ptc_l2f" />
                  <phase name="cwc_l2f" />
                  <phase name="wlt_l2f" />
		  <phase name="pc_lw3" />
                </phases>
              </target>
            </targets>
          </type>
        </attribute>
      </attributes>
      <flags>
        <flag name="UseConcurrentRanges" default="TRUE">
	  <description>Controls whether the ranges of a with3 will be computed concurrently, or whether the ranges are sequentialised</description>
	</flag>
      </flags>
    </node>
<!--

  N_range :

-->
    <node name="Range">
      <sons>
        <son name="Index">
	  <description>Scalar index of this range.</description>
          <targets>
            <target mandatory="yes">
              <node name="Ids" />
              <phases>
                <range from="wlt_wlsd" to="mem_alloc" />
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Id" />
              <phases>
                <range from="mem_alloc" to="pc_lw3" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="LowerBound">
	  <description>Lower bound of this range.</description>
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="UpperBound">
	  <description>Upper bound of this range.</description>
          <targets>
            <target mandatory="yes">
              <node name="Num" />
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="ChunkSize">
	  <description>Chunk size of this range. If non-NULL, this range is not computed by computing each cell alone, but by computing vectors of ChunkSize many elements per iteration. Note that the total number of elements computed by this range needs to be a multiple of ChunkSize!</description>
          <targets>
            <target mandatory="no">
              <node name="Num" />
              <node name="Id" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Body">
	  <description>Block computed for each iteration.</description>
          <targets>
            <target mandatory="yes">
              <node name="Block" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Results">
	  <description>Values assigned to the result for each iteration.</description>
          <targets>
            <target mandatory="yes">
              <node name="Exprs" />
              <phases>
                <range from="wlt_wlsd" to="pc_lw3" />                
              </phases>
            </target>
            <target mandatory="yes">
              <node name="Ap" />
              <phases>
                <range from="pc_lw3" to="final" />
              </phases>
            </target>
          </targets>
        </son>
        <son name="Idxs">
          <targets>
            <target mandatory="no">
              <node name="Ids" />
              <phases>
                <range from="wlt_wlsd" to="mem_alloc" />
              </phases>
            </target>
          </targets>
	  <description>This is a chain of indices into the ravels of the results of genarray and modarray withloops. Once they are explicitly used in mem_alloc, this special reference is freed.</description>
	</son>
        <son name="Next">
          <targets>
            <target mandatory="no">
              <node name="Range" />
              <phases>
                <all />
              </phases>
            </target>
          </targets>
	</son>
      </sons>
      <attributes>
        <attribute name="BlockSize" default="0">
	  <description>Used for resource allocation. Corresponds to the blocksize argument of the create instruction in mutc.</description>
          <type name="Integer">
            <targets>
              <target mandatory="yes">
                <any />
                <phases>
                  <all />
                </phases>
              </target>
            </targets>
          </type>
	</attribute>
      </attributes>
      <flags>
        <flag name="IsGlobal" default="FALSE">
	  <description>True iff this range should be distributed globally over multiple cores</description>
	</flag>
      </flags>
    </node>
  </syntaxtree>
</definition>

