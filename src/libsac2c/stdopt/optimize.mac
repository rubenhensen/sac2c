#ifndef OPTIMIZEstr
#define OPTIMIZEstr(str)
#endif

#ifndef OPTIMIZEabbr
#define OPTIMIZEabbr(abbr)
#endif

#ifndef OPTIMIZEdevl
#define OPTIMIZEdevl(devl)
#endif

#ifndef OPTIMIZEprod
#define OPTIMIZEprod(prod)
#endif

#ifndef OPTIMIZEname
#define OPTIMIZEname(name)
#endif

#ifndef OPTCOUNTERid
#define OPTCOUNTERid(id)
#endif

#ifndef OPTCOUNTERtext
#define OPTCOUNTERtext(text)
#endif

#ifndef OPTCOUNTERredo
#define OPTCOUNTERredo(redo)
#endif

#ifndef OPTIMIZE
#define OPTIMIZE(str, abbr, devl, prod, name)                                            \
    OPTIMIZEstr (str) OPTIMIZEabbr (abbr) OPTIMIZEdevl (devl) OPTIMIZEprod (prod)        \
      OPTIMIZEname (name)
#endif

#ifndef OPTCOUNTER
#define OPTCOUNTER(id, redo, text)                                                       \
    OPTCOUNTERid (id) OPTCOUNTERredo (redo) OPTCOUNTERtext (text)
#endif

#ifndef DELAYPHM
#define DELAYPHM 2
#endif

OPTIMIZE ("ls", ls, TRUE, TRUE, "loop scalarization")
OPTIMIZE ("lacsi", lacsi, FALSE, FALSE, "loop & conditional arg scalarization")
OPTIMIZE ("lacso", lacso, FALSE, FALSE, "loop & conditional result scalarization")
OPTIMIZE ("dcr", dcr, TRUE, TRUE, "dead code removal")
OPTIMIZE ("cf", cf, TRUE, TRUE, "constant folding")
OPTIMIZE ("dlir", dlir, TRUE, TRUE, "do-loop invariant removal")
OPTIMIZE ("wlir", wlir, TRUE, TRUE, "with-loop invariant removal")
OPTIMIZE ("ainl", ainl, TRUE, TRUE, "function auto-inlining")
OPTIMIZE ("inl", inl, TRUE, TRUE, "function inlining")
OPTIMIZE ("lur", lur, TRUE, TRUE, "loop unrolling")
OPTIMIZE ("wlur", wlur, TRUE, TRUE, "with-loop unrolling")
OPTIMIZE ("prfunr", prfunr, TRUE, TRUE, "prf unrolling")
OPTIMIZE ("lus", lus, FALSE, FALSE, "loop unswitching")
OPTIMIZE ("cse", cse, TRUE, TRUE, "common subexpression elimination")
OPTIMIZE ("dlfr", dlfr, FALSE, FALSE, "dead local function removal")
OPTIMIZE ("dfr", dfr, TRUE, TRUE, "dead function removal")
OPTIMIZE ("wlt", wlt, FALSE, FALSE, "with-loop transformation")
OPTIMIZE ("wlf", wlf, TRUE, TRUE, "with-loop folding")
OPTIMIZE ("awlf", awlf, FALSE, FALSE, "algebraic with-loop folding")
OPTIMIZE ("cubsl", cubsl, FALSE, FALSE, "hypercube slicing")
OPTIMIZE ("ivecyc", ivecyc, TRUE, TRUE, "index vector elimination in SAACYC")
OPTIMIZE ("ive", ive, TRUE, TRUE, "index vector elimination")
OPTIMIZE ("ivesli", ivesli, TRUE, TRUE, "loop invariant index computation splitting")
OPTIMIZE ("wlflt", wlflt, FALSE, FALSE, "withloop flattening")
OPTIMIZE ("ae", ae, FALSE, FALSE, "array elimination")
OPTIMIZE ("dl", dl, TRUE, TRUE, "distributive law")
OPTIMIZE ("rco", rco, TRUE, TRUE, "reference count optimization")
OPTIMIZE ("uip", uip, TRUE, TRUE, "update-in-place analysis")
OPTIMIZE ("dr", dr, TRUE, TRUE, "data reuse")
OPTIMIZE ("ipc", ipc, TRUE, TRUE, "in-place computation")
OPTIMIZE ("tsi", tsi, FALSE, FALSE, "with-loop tile size inference")
OPTIMIZE ("tsp", tsp, TRUE, TRUE, "with-loop tile size pragmas")
OPTIMIZE ("wlpg", wlpg, TRUE, TRUE, "with-loop partition generation")
OPTIMIZE ("cp", cp, TRUE, TRUE, "constant propagation")
OPTIMIZE ("vp", vp, TRUE, TRUE, "variable propagation")
OPTIMIZE ("rea", rea, FALSE, FALSE, "reorder arguments of equality operator")
OPTIMIZE ("tgtl", tgtl, FALSE, FALSE,
          "Transform gt and ge operator to lt and le operator")
OPTIMIZE ("srf", srf, TRUE, TRUE, "static reuse / static free")
OPTIMIZE ("pr", pr, FALSE, FALSE, "partial reuse")
OPTIMIZE ("phm", phm, DELAYPHM, DELAYPHM, "private heap management")
OPTIMIZE ("aps", aps, DELAYPHM, DELAYPHM, "arena preselection")
OPTIMIZE ("dpa", dpa, DELAYPHM, DELAYPHM, "descriptor preallocation")
OPTIMIZE ("msca", msca, DELAYPHM, DELAYPHM, "memory size cache adjustment")
OPTIMIZE ("ap", ap, FALSE, FALSE, "array padding")
OPTIMIZE ("apl", apl, FALSE, FALSE, "array placement")
OPTIMIZE ("wls", wls, TRUE, TRUE, "with-loop scalarization")
OPTIMIZE ("as", as, TRUE, TRUE, "arithmetic simplification")
OPTIMIZE ("al", al, TRUE, TRUE, "associative law")
OPTIMIZE ("edfa", edfa, TRUE, TRUE, "eliminate duplicate fundef args")
OPTIMIZE ("petl", petl, TRUE, TRUE, "propagate extrema in/out of lacfuns")
OPTIMIZE ("etc", etc, TRUE, TRUE, "typeconv elimination")
OPTIMIZE ("sp", sp, FALSE, FALSE, "selection propagation")
OPTIMIZE ("wlsimp", wlsimp, TRUE, TRUE, "with-loop simplification")
OPTIMIZE ("cwle", cwle, TRUE, TRUE, "copy with-loop elimination")
OPTIMIZE ("wlfs", wlfs, FALSE, FALSE, "with-loop fusion")
OPTIMIZE ("lro", lro, TRUE, TRUE, "loop reuse optimization")
OPTIMIZE ("lao", lao, FALSE, FALSE, "loop allocation optimization")
OPTIMIZE ("pra", pra, FALSE, FALSE, "polyhedra data reuse optimization")
OPTIMIZE ("rnb", rnb, FALSE, FALSE, "remove noop conditional branch in with-loops")
OPTIMIZE ("rwo", rwo, TRUE, TRUE, "memory reuse with offset")
OPTIMIZE ("rip", rip, TRUE, TRUE, "memory reuse with in place selection")
OPTIMIZE ("tup", tup, TRUE, TRUE, "type upgrade")
OPTIMIZE ("sisi", sisi, FALSE, FALSE, "signature simplification")
#if ENABLE_DISTMEM
OPTIMIZE ("dmmls", dmmls, TRUE, TRUE, "DISTMEM mark local selects")
OPTIMIZE ("dmgs", dmgs, TRUE, TRUE, "DISTMEM group selects")
#else
OPTIMIZE ("dmmls", dmmls, FALSE, FALSE, "DISTMEM mark local selects")
OPTIMIZE ("dmgs", dmgs, FALSE, FALSE, "DISTMEM group selects")
#endif
OPTIMIZE ("sde", sde, TRUE, TRUE, "subtraction / division elimination")
OPTIMIZE ("wlprop", wlprop, TRUE, TRUE, "with-loop propagation")
OPTIMIZE ("saa", saa, TRUE, TRUE, "use symbolic array attributes")
OPTIMIZE ("cyc", cyc, TRUE, TRUE, "run optimization cycle")
OPTIMIZE ("scyc", scyc, TRUE, TRUE, "run stabilization cycle")
OPTIMIZE ("saacyc", saacyc, TRUE, TRUE, "run saa cycle")
OPTIMIZE ("wllo", wllo, FALSE, FALSE, "run with-loop lock optimization")
OPTIMIZE ("rw3", rw3, FALSE, FALSE, "MUTC remove with3 loops")
OPTIMIZE ("ms", ms, TRUE, TRUE, "MUTC move syncs")
OPTIMIZE ("uw3", uw3, TRUE, TRUE, "MUTC unroll with3 loops")
OPTIMIZE ("pew3", pew3, TRUE, TRUE, "MUTC prune empty with3 loops")
OPTIMIZE ("msa", msa, TRUE, TRUE, "MUTC mark suballoc as unique")
OPTIMIZE ("armp", armp, TRUE, TRUE, "MUTC add rc mode prf")
OPTIMIZE ("wlsd", wlsd, TRUE, TRUE, "withloop split dimension")
/*
OPTIMIZE( "cuskc",  cuskc,   TRUE,  TRUE,  "CUDA sink code")
OPTIMIZE( "cucc",   cucc,    TRUE,  TRUE,  "CUDA create cells")
*/
OPTIMIZE ("expar", expar, FALSE, FALSE, "CUDA expand parallel region")
OPTIMIZE ("scuf", scuf, FALSE, FALSE, "CUDA split cuda fold withloop")
OPTIMIZE ("shr", shr, FALSE, FALSE, "CUDA shared memory reuse")
OPTIMIZE ("coal", coal, FALSE, FALSE, "CUDA device memory coalescing")
OPTIMIZE ("pad", pad, FALSE, FALSE, "CUDA shared memory padding")
OPTIMIZE ("lb", lb, FALSE, FALSE, "CUDA set kernel launch bound")
OPTIMIZE ("pfd", pfd, FALSE, FALSE, "CUDA perform partial folding")
OPTIMIZE ("memopt", memopt, TRUE, TRUE, "CUDA minimize memory tranfers")
OPTIMIZE ("slpt", slpt, FALSE, FALSE, "CUDA split partition")
OPTIMIZE ("ctzg", ctzg, FALSE, FALSE, "comparisons to zero for guards")
OPTIMIZE ("ctz", ctz, TRUE, TRUE, "comparisons to zero")
OPTIMIZE ("uctz", uctz, TRUE, TRUE, "eliminating comparisons to zero")
OPTIMIZE ("ggs", ggs, TRUE, TRUE, "generating guard solvers")
OPTIMIZE ("plur", plur, FALSE, FALSE, "polyhedral loop unrolling")
OPTIMIZE ("pogo", pogo, FALSE, FALSE, "polyhedral guard optimization")
OPTIMIZE ("pwlf", pwlf, FALSE, FALSE, "polyhedral WLF")
OPTIMIZE ("wls_aggressive", wls_aggressive, FALSE, FALSE, "aggressive loop scalarization")
OPTIMIZE ("sse", sse, FALSE, FALSE, "simplify symbiotic expressions")
OPTIMIZE ("safa", safa, TRUE, TRUE, "sort associative fun arguments")

// OPTIMIZE entries after this point are intended for developer use only.
OPTIMIZE ("scs", scs, TRUE, TRUE, "Symbolic Constant Simplification")
OPTIMIZE ("sccf", sccf, TRUE, TRUE, "Structural constant constant folding")
OPTIMIZE ("saacf", saacf, TRUE, TRUE, "SAA constant folding")
OPTIMIZE ("scwlf", scwlf, TRUE, TRUE, "Simple composition AWLF")
OPTIMIZE ("relcf", relcf, TRUE, TRUE, "CF on relationals and guards")
OPTIMIZE ("ewlcf", ewlcf, TRUE, TRUE, "enhancing with-loop CF")
OPTIMIZE ("ssawl", ssawl, FALSE, FALSE, "SSA on with-loops")

// relcf is intended only as a debugging and performance measurement aid.
// It should probably be removed once POGO stablizes.

// End of developer-use-only OPTIMIZE entries

OPTCOUNTER (lacsi_expr, TRUE, "loops & conditional arguments(s) scalarized")
OPTCOUNTER (lacso_expr, TRUE, "loops & conditional result(s) scalarized")
OPTCOUNTER (dead_expr, FALSE, "dead assignment(s) removed")
OPTCOUNTER (dead_var, FALSE, "dead variable declaration(s) removed")
OPTCOUNTER (dead_fun, FALSE, "dead function(s) removed")
OPTCOUNTER (dead_lfun, TRUE, "dead local function(s) removed")
OPTCOUNTER (cf_expr, TRUE, "primitive function application(s) eliminated")
OPTCOUNTER (dlir_expr, TRUE, "do-loop invariant expression(s) moved")
OPTCOUNTER (wlir_expr, TRUE, "with-loop invariant expression(s) moved")
OPTCOUNTER (inl_fun, TRUE, "function(s) inlined")
OPTCOUNTER (elim_arrays, TRUE, "array(s) eliminated")
OPTCOUNTER (plur_expr, TRUE, "loop(s) unrolled polyhedrally")
OPTCOUNTER (lunr_expr, TRUE, "loop(s) unrolled")
OPTCOUNTER (wlunr_expr, TRUE, "with-loop(s) unrolled")
OPTCOUNTER (cse_expr, TRUE, "common subexpression(s) eliminated")
OPTCOUNTER (wlf_expr, TRUE, "with-loop(s) folded")
OPTCOUNTER (awlf_expr, TRUE, "algebraic with-loop(s) folded")
OPTCOUNTER (awlfi_insert, TRUE, "array extrema inserted")
OPTCOUNTER (awlfi_expr, TRUE, "algebraic with-loop folding inference made")
OPTCOUNTER (cubsl_expr, TRUE, "cube-slicer cuts made")
OPTCOUNTER (edfa_expr, TRUE, "duplicate fun argument(s) removed")
OPTCOUNTER (ivexp_expr, TRUE, "array extrema propagated")
OPTCOUNTER (petl_expr, TRUE, "array extrema propagated in/out of lacfun")
OPTCOUNTER (wlt_expr, TRUE, "with-loop(s) transformed")
OPTCOUNTER (wls_expr, TRUE, "with-loop(s) scalarized")
OPTCOUNTER (wlfs_expr, TRUE, "with-loop(s) fused")
OPTCOUNTER (as_expr, TRUE, "arithmetic simplification optimization(s)")
OPTCOUNTER (al_expr, TRUE, "associative law optimization(s)")
OPTCOUNTER (dl_expr, TRUE, "distributive law optimization(s)")
OPTCOUNTER (etc_expr, TRUE, "type conversions eliminated")
OPTCOUNTER (ap_padded, TRUE, "array type(s) padded")
OPTCOUNTER (ap_unsupported, TRUE, "array type(s) unsupported by padding")
OPTCOUNTER (cvp_expr, TRUE, "value(s) and variable(s) propagated")
OPTCOUNTER (cp_expr, TRUE, "constant(s) propagated")
OPTCOUNTER (vp_expr, TRUE, "variable(s) propagated")
OPTCOUNTER (rea_expr, TRUE, "reorder arguments of equality operator(s)")
OPTCOUNTER (tgtl_expr, TRUE, "transform gt and ge operator(s) to lt and le operator(s)")
OPTCOUNTER (tup_upgrades, TRUE, "type(s) upgraded")
OPTCOUNTER (tup_rtu_expr, TRUE, "type(s) upgraded reversely")
OPTCOUNTER (sisi_expr, TRUE, "unused or constant function argument(s) removed")
OPTCOUNTER (wlprop_expr, TRUE, "withloop(s) propagated")
OPTCOUNTER (cwle_wl, TRUE, "copy-with-loop(s) eliminated")
OPTCOUNTER (prfunr_prf, TRUE, "primitive function(s) unrolled")
OPTCOUNTER (wlsimp_wl, TRUE, "with-loop(s) simplified")
OPTCOUNTER (ctz_expr, TRUE, "comparisons to zero")
OPTCOUNTER (ctzg_expr, TRUE, "comparisons to zero for guards")
OPTCOUNTER (esd_expr, TRUE, "eliminated sub/div expression(s)")
OPTCOUNTER (uesd_expr, TRUE, "undo-eliminated sub/div expression(s)")
OPTCOUNTER (safa_expr, TRUE, "associative function argument(s) sorted")
OPTCOUNTER (pogo_expr, FALSE, "guards removed by pogo")
OPTCOUNTER (pwlf_expr, FALSE, "with-loops folded using polyhedra")
OPTCOUNTER (ssawl_expr, FALSE, "with-loops converted to SSA form")

#undef OPTIMIZEstr
#undef OPTIMIZEabbr
#undef OPTIMIZEdevl
#undef OPTIMIZEprod
#undef OPTIMIZEname
#undef OPTIMIZE

#undef OPTCOUNTERid
#undef OPTCOUNTERtext
#undef OPTCOUNTER
#undef DELAYPHM
