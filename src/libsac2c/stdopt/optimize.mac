/*
 * $Id$
 */

#ifndef OPTIMIZEstr
#define OPTIMIZEstr(str)
#endif

#ifndef OPTIMIZEabbr
#define OPTIMIZEabbr(abbr)
#endif

#ifndef OPTIMIZEdevl
#define OPTIMIZEdevl(devl)
#endif

#ifndef OPTIMIZEprod
#define OPTIMIZEprod(prod)
#endif

#ifndef OPTIMIZEname
#define OPTIMIZEname(name)
#endif

#ifndef OPTCOUNTERid
#define OPTCOUNTERid(id)
#endif

#ifndef OPTCOUNTERtext
#define OPTCOUNTERtext(text)
#endif

#ifndef OPTCOUNTERredo
#define OPTCOUNTERredo(redo)
#endif

#ifndef OPTIMIZE
#define OPTIMIZE(str, abbr, devl, prod, name)                                            \
    OPTIMIZEstr (str) OPTIMIZEabbr (abbr) OPTIMIZEdevl (devl) OPTIMIZEprod (prod)        \
      OPTIMIZEname (name)
#endif

#ifndef OPTCOUNTER
#define OPTCOUNTER(id, redo, text)                                                       \
    OPTCOUNTERid (id) OPTCOUNTERredo (redo) OPTCOUNTERtext (text)
#endif

OPTIMIZE ("ls", ls, TRUE, TRUE, "loop scalarization")
OPTIMIZE ("dcr", dcr, TRUE, TRUE, "dead code removal")
OPTIMIZE ("cf", cf, TRUE, TRUE, "constant folding")
OPTIMIZE ("lir", lir, TRUE, TRUE, "loop invariant removal")
OPTIMIZE ("inl", inl, TRUE, TRUE, "function inlining")
OPTIMIZE ("lur", lur, TRUE, TRUE, "loop unrolling")
OPTIMIZE ("wlur", wlur, TRUE, TRUE, "with-loop unrolling")
OPTIMIZE ("prfunr", prfunr, TRUE, TRUE, "prf unrolling")
OPTIMIZE ("lus", lus, FALSE, FALSE, "loop unswitching")
OPTIMIZE ("cse", cse, TRUE, TRUE, "common subexpression elimination")
OPTIMIZE ("dfr", dfr, TRUE, TRUE, "dead function removal")
OPTIMIZE ("wlt", wlt, FALSE, FALSE, "with-loop transformation")
OPTIMIZE ("wlf", wlf, TRUE, TRUE, "with-loop folding")
OPTIMIZE ("awlf", awlf, FALSE, FALSE, "algebraic with-loop folding")
OPTIMIZE ("ive", ive, TRUE, TRUE, "index vector elimination (requires -dosaa)")
OPTIMIZE ("wlflt", wlflt, FALSE, FALSE, "withloop flattening")
OPTIMIZE ("ae", ae, FALSE, FALSE, "array elimination")
OPTIMIZE ("dl", dl, TRUE, TRUE, "distributive law")
OPTIMIZE ("rco", rco, TRUE, TRUE, "reference count optimization")
OPTIMIZE ("uip", uip, TRUE, TRUE, "update-in-place analysis")
OPTIMIZE ("dr", dr, TRUE, TRUE, "data reuse")
OPTIMIZE ("ipc", ipc, TRUE, TRUE, "in-place computation")
OPTIMIZE ("tsi", tsi, FALSE, FALSE, "with-loop tile size inference")
OPTIMIZE ("tsp", tsp, FALSE, FALSE, "with-loop tile size pragmas")
OPTIMIZE ("wlpg", wlpg, TRUE, TRUE, "with-loop partition generation")
OPTIMIZE ("cp", cp, TRUE, TRUE, "constant propagation")
OPTIMIZE ("vp", vp, TRUE, TRUE, "variable propagation")
OPTIMIZE ("srf", srf, TRUE, TRUE, "static reuse / static free")
OPTIMIZE ("pr", pr, FALSE, FALSE, "partial reuse")
#ifdef DISABLE_PHM
OPTIMIZE ("phm", phm, FALSE, FALSE, "private heap management")
OPTIMIZE ("aps", aps, FALSE, FALSE, "arena preselection (requires -dophm)")
OPTIMIZE ("dpa", dpa, FALSE, FALSE, "descriptor preallocation (requires -dophm)")
OPTIMIZE ("msca", msca, FALSE, FALSE, "memory size cache adjustment (requires -dophm)")
#else
OPTIMIZE ("phm", phm, TRUE, TRUE, "private heap management")
OPTIMIZE ("aps", aps, TRUE, TRUE, "arena preselection (requires -dophm)")
OPTIMIZE ("dpa", dpa, TRUE, TRUE, "descriptor preallocation (requires -dophm)")
OPTIMIZE ("msca", msca, TRUE, TRUE, "memory size cache adjustment (requires -dophm)")
#endif
OPTIMIZE ("ap", ap, FALSE, FALSE, "array padding")
OPTIMIZE ("apl", apl, FALSE, FALSE, "array placement")
OPTIMIZE ("wls", wls, TRUE, TRUE, "with-loop scalarization")
OPTIMIZE ("al", al, TRUE, TRUE, "associative law")
OPTIMIZE ("etc", etc, TRUE, TRUE, "typeconv elimination")
OPTIMIZE ("sp", sp, FALSE, FALSE, "selection propagation")
OPTIMIZE ("wlsimp", wlsimp, TRUE, TRUE, "with-loop simplification")
OPTIMIZE ("cwle", cwle, TRUE, TRUE, "copy with-loop elimination")
OPTIMIZE ("wlfs", wlfs, FALSE, FALSE, "with-loop fusion")
OPTIMIZE ("lro", lro, TRUE, TRUE, "loop reuse optimization")
OPTIMIZE ("tup", tup, TRUE, TRUE, "type upgrade")
OPTIMIZE ("sisi", sisi, FALSE, FALSE, "signature simplification")
OPTIMIZE ("sde", sde, TRUE, TRUE, "subtraction / division elimination")
OPTIMIZE ("wlprop", wlprop, TRUE, TRUE, "with-loop propagation")
OPTIMIZE ("saa", saa, TRUE, TRUE, "use symbolic array attributes")
OPTIMIZE ("cyc", cyc, TRUE, TRUE, "run optimization cycle")
OPTIMIZE ("scyc", scyc, TRUE, TRUE, "run stabilization cycle")
OPTIMIZE ("saacyc", saacyc, TRUE, TRUE, "run saa cycle")
OPTIMIZE ("wllo", wllo, FALSE, FALSE, "run with-loop lock optimization")
OPTIMIZE ("rw3", rw3, TRUE, TRUE, "remove with3 loops")
/*
OPTIMIZE( "cuskc",  cuskc,   TRUE,  TRUE,  "CUDA sink code")
OPTIMIZE( "cucc",   cucc,    TRUE,  TRUE,  "CUDA create cells")
*/
OPTIMIZE ("expar", expar, FALSE, FALSE, "CUDA expand parallel region")
OPTIMIZE ("cts", cts, TRUE, TRUE, "converting comparisons into subtractions")
OPTIMIZE ("ucts", ucts, TRUE, TRUE, "eliminating subtractions in comparisons")

OPTCOUNTER (dead_expr, FALSE, "dead assignment(s) removed")
OPTCOUNTER (dead_var, FALSE, "dead variable declaration(s) removed")
OPTCOUNTER (dead_fun, FALSE, "dead function(s) removed")
OPTCOUNTER (cf_expr, TRUE, "primitive function application(s) eliminated")
OPTCOUNTER (lir_expr, TRUE, "loop invariant expression(s) moved")
OPTCOUNTER (wlir_expr, TRUE, "with-loop invariant expression(s) moved")
OPTCOUNTER (inl_fun, TRUE, "function(s) inlined")
OPTCOUNTER (elim_arrays, TRUE, "array(s) eliminated")
OPTCOUNTER (lunr_expr, TRUE, "loop(s) unrolled")
OPTCOUNTER (wlunr_expr, TRUE, "with-loop(s) unrolled")
OPTCOUNTER (cse_expr, TRUE, "common subexpression(s) eliminated")
OPTCOUNTER (wlf_expr, TRUE, "with-loop(s) folded")
OPTCOUNTER (awlf_expr, TRUE, "algebraic with-loop(s) folded")
OPTCOUNTER (awlfi_insert, TRUE, "array extrema inserted")
OPTCOUNTER (ivexp_attach, TRUE, "array extrema propagated")
OPTCOUNTER (wlt_expr, TRUE, "with-loop(s) transformed")
OPTCOUNTER (wls_expr, TRUE, "with-loop(s) scalarized")
OPTCOUNTER (wlfs_expr, TRUE, "with-loop(s) fused")
OPTCOUNTER (al_expr, TRUE, "associative law optimization(s)")
OPTCOUNTER (dl_expr, TRUE, "distributive law optimization(s)")
OPTCOUNTER (etc_expr, TRUE, "type conversions eliminated")
OPTCOUNTER (ap_padded, TRUE, "array type(s) padded")
OPTCOUNTER (ap_unsupported, TRUE, "array type(s) unsupported by padding")
OPTCOUNTER (cvp_expr, TRUE, "value(s) and variable(s) propagated")
OPTCOUNTER (cp_expr, TRUE, "constant(s) propagated")
OPTCOUNTER (vp_expr, TRUE, "variable(s) propagated")
OPTCOUNTER (tup_upgrades, TRUE, "type(s) upgraded")
OPTCOUNTER (tup_rtu_expr, TRUE, "type(s) upgraded reversely")
OPTCOUNTER (sisi_expr, TRUE, "unused or constant function argument(s) removed")
OPTCOUNTER (wlprop_expr, TRUE, "withloop(s) propagated")
OPTCOUNTER (cwle_wl, TRUE, "copy-with-loop(s) eliminated")
OPTCOUNTER (prfunr_prf, TRUE, "primitive function(s) unrolled")
OPTCOUNTER (wlsimp_wl, TRUE, "with-loop(s) simplified")

#undef OPTIMIZEstr
#undef OPTIMIZEabbr
#undef OPTIMIZEdevl
#undef OPTIMIZEprod
#undef OPTIMIZEname
#undef OPTIMIZE

#undef OPTCOUNTERid
#undef OPTCOUNTERtext
#undef OPTCOUNTER
