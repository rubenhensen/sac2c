module sacprelude@BUILD_TYPE_POSTFIX@;

#if 0
/**
 * NB: Be SURE that, for any names you add here, that you also
 * add them to "addspecialfuns.c" in the modules subdirectory.
 * Otherwise they won't get inlined, apparently.
 *
 * We need the functions _selVxADistmemLocal and _selSxADistmemLocal only for
 * the distributed memory backend but unfortunately we cannot easily tell that
 * we are compiling the prelude for the distributed memory backend at the
 * precompilation stage. So we always include these functions.
 * The name starts with an underscore to signalize that they
 * are not intended to be used directly by the programmer.
 */
#endif

provide { SACarg, sel, eq, prod, ++, gridFiller, adjustLacFunParams,
          adjustLacFunParamsReshape, isPartitionIntersectNull, partitionMin,
          partitionMax, isPartitionIntersect1Part, partitionIntersectMax,
          partitionIntersectMin, partitionSlicer, _selVxADistmemLocal,
          _selSxADistmemLocal
#define MUTC 1
#ifndef SAC_BACKEND_MUTC
        , unwrapInt, unwrapBool, unwrapFloat, unwrapDouble, unwrapChar,
          isInt, isBool, isFloat, isDouble, isChar, isUdt, wrap, unwrapByte,
          unwrapShort, unwrapInt, unwrapLong, unwrapLonglong, unwrapUbyte,
          unwrapUshort, unwrapUint, unwrapUlong, unwrapUlonglong, isByte,
          isShort, isInt, isLong, isLonglong, isUbyte, isUshort, isUint,
          isUlong, isUlonglong
#endif /* SAC_BACKEND_MUTC */
#undef MUTC
};

external typedef SACarg;
  #pragma freefun "SACARGfree"
  #pragma copyfun "SACARGcopy"

#define BUILT_IN(fun)                                                          \
fun(int)                                                                       \
fun(float)                                                                     \
fun(double)                                                                    \
fun(bool)                                                                      \
fun(char)                                                                      \
fun(byte)                                                                      \
fun(short)                                                                     \
fun(long)                                                                      \
fun(longlong)                                                                  \
fun(ubyte)                                                                     \
fun(ushort)                                                                    \
fun(uint)                                                                      \
fun(ulong)                                                                     \
fun(ulonglong)

#define SEL_VxA(a)                                                             \
inline                                                                         \
a[d:shp] sel (int[vlen] idx, a[vlen:vshp,d:shp] array)                         \
    | _all_V_ (_le_SxV_ (0, idx)), _all_V_ (_lt_VxV_ (idx, vshp))              \
{                                                                              \
    return { iv -> _sel_VxA_ (_cat_VxV_ (idx, iv), array)                      \
           | iv < shp };                                                       \
}

BUILT_IN (SEL_VxA)


#define SEL_VxA_distmem_local(a)                                               \
inline                                                                         \
a[d:shp] _selVxADistmemLocal (int[vlen] idx, a[vlen:vshp,d:shp] array)         \
    | _all_V_ (_le_SxV_ (0, idx)), _all_V_ (_lt_VxV_ (idx, vshp))              \
{                                                                              \
    return { iv -> _sel_VxA_distmem_local_ (_cat_VxV_ (idx, iv), array)        \
           | iv < shp };                                                       \
}

BUILT_IN (SEL_VxA_distmem_local)


#define SEL_SxA_distmem_local(a)                                               \
inline                                                                         \
a[d:shp] _selSxADistmemLocal (int idx, a[n,d:shp] array)                       \
    | _le_SxS_ (0, idx), _lt_SxS_ (idx, n)                                     \
{                                                                              \
    return _selVxADistmemLocal ([idx], array);                                 \
}

BUILT_IN (SEL_SxA_distmem_local)


#define EQ(a)                                                                  \
inline                                                                         \
bool eq (a[d:shp] A, a[d:shp] B)                                               \
{                                                                              \
    return with {                                                              \
        (_mul_SxV_ (0, shp) <= iv < shp)                                       \
            : _eq_SxS_ (_sel_VxA_ (iv, A), _sel_VxA_ (iv, B));                 \
    } : fold (sacprelude@BUILD_TYPE_POSTFIX@::and, true);                      \
}

BUILT_IN (EQ)


int ++ (int a)
{
    return _add_SxS_ (a, 1);
}

inline
bool and (bool a, bool b)
{
    return _and_SxS_ (a, b);
}

inline
int * (int a, int b)
{
    return _mul_SxS_ (a, b);
}

inline
int prod (int[vlen] v)
{
    return with {
        ([0] <= iv < [vlen]) : _sel_VxA_ (iv, v);
    } : fold (sacprelude@BUILD_TYPE_POSTFIX@::*, 1);
}

int[*] adjustLacFunParamsReshape (bool[pdim:_] p, int[idim:_] i,
                                  int[.] iv, int[.] shp)
{
    return _or_SxS_ (_eq_SxS_ (pdim, 0), _eq_SxS_ (idim, 0))
            ? i : _reshape_VxA_ (shp, i)[iv];
}

int[*] adjustLacFunParams (bool[pdim:_] p, int[idim:_] i,
                           int[.] iv)
{
    return _or_SxS_ (_eq_SxS_ (pdim, 0), _eq_SxS_ (idim, 0))
            ? i : i[iv];
}

inline
int partitionMin (int x, int y)
{
    return _min_SxS_ (x, y);
}

inline
int partitionMax (int x, int y)
{
    return _max_SxS_ (x, y);
}

inline
int[n], int[n], int[n], int[n]
partitionSlicer (int[n] min, int[n] max, int axis, int[n] lb, int[n] ub)
{
    lb_i = _sel_VxA_ ([axis], lb);
    ub_i = _sel_VxA_ ([axis], ub);
    ub_i = partitionMax (lb_i, ub_i);

    max_lower = _modarray_AxVxS_ (max, [axis], lb_i);
    min_upper = _modarray_AxVxS_ (min, [axis], ub_i);
    new_min = _modarray_AxVxS_ (min, [axis], lb_i);
    new_max = _modarray_AxVxS_ (max, [axis], ub_i);

    return (max_lower, min_upper, new_min, new_max);
}

inline
int[n], int[n], int[n]
gridFiller (int[n] lb, int[n] ub, int[n] wdth, int dim, int[n] maxwidth)
{
    lb_i = _sel_VxA_ ([dim], lb);
    ub_i = _sel_VxA_ ([dim], ub);
    wdth_i = _sel_VxA_ ([dim], wdth);
    maxwidth_i = _sel_VxA_ ([dim], maxwidth);

    l_dim = partitionMin (_add_SxS_ (lb_i, wdth_i), ub_i);
    w_dim = partitionMax (_sub_SxS_ (maxwidth_i, wdth_i), 0);

    nlb = _modarray_AxVxS_ (lb, [dim], l_dim);
    nwidth = _modarray_AxVxS_ (maxwidth, [dim], w_dim);
    nmaxwidth = _modarray_AxVxS_ (maxwidth, [dim], wdth_i);

    return (nlb, nwidth, nmaxwidth);
}

/**
 * Predicate to determine if intersection of comsumer-WL index set and
 * producer-WL partition bounds is null. It requires an assist from
 * the compiler to perform the any-reduce on this function's result.
 *
 * All arguments are normalized.
 */
inline
bool[n] isPartitionIntersectNull (int[n] idxmin, int[n] idxmax,
                                  int[n] bound1, int[n] bound2)
{
    return _or_VxV_ (_lt_VxV_ (idxmax, bound1),
                     _ge_VxV_ (idxmin, bound2));
}

/**
 * Predicate to determine if intersection of comsumer-WL index set and
 * producer-WL partition bounds is null. It requires an assist from
 * the compiler to perform the any-reduce on this function's result.
 *
 * idxmax and bound2 are normalized, i.e., they are like GENERATOR_BOUND2
 * in a WL, where their value is 1 greater than the maximum value of
 * the index.
 */
inline
bool[n] isPartitionIntersectNull (int idxmin, int idxmax,
                                  int[n] bound1, int[n] bound2)
{
    return _or_VxV_ (_lt_SxV_ (idxmax, bound1),
                     _ge_SxV_ (idxmin, bound2));
}

/**
 * Predicate to determine if intersection of consumer-WL index scalar and
 * producer-WL partition bounds lays entirely within one producer-WL partition.
 * If so, then AWLF can be performed with no slicing of the consumer-WL.
 * This function requires an assist from the compiler to perform
 * the all-reduce on this function's result.
 *
 * idxmax and bound2 are normalized, i.e., they are like GENERATOR_BOUND2
 * in a WL, where their value is 1 greater than the maximum value of
 * the index.
 */
inline
bool[n] isPartitionIntersect1Part (int[n] idxmin, int[n] idxmax,
                                   int[n] bound1, int[n] bound2)
{
    return _and_VxV_ (_ge_VxV_ (idxmin, bound1),
                      _le_VxV_ (idxmax, bound2));
}

/**
 * Predicate to determine if intersection of consumer-WL index scalar and
 * producer-WL partition bounds lays entirely within one producer-WL partition.
 * If so, then AWLF can be performed with no slicing of the consumer-WL.
 * This function requires an assist from the compiler to perform
 * the all-reduce on this function's result.
 *
 * idxmax and bound2 are normalized, i.e., they are like GENERATOR_BOUND2
 * in a WL, where their value is 1 greater than the maximum value of
 */
inline
bool[n] isPartitionIntersect1Part (int idxmin, int idxmax,
                                   int[n] bound1, int[n] bound2)
{
    return _and_VxV_ (_ge_SxV_ (idxmin, bound1),
                      _le_SxV_ (idxmax, bound2));
}

/**
 * Compute maximum of producerWL partition bound1 scalar and index vector set.
 */
inline
int[n] partitionIntersectMax (int[n] PWLbound1, int ivmin)
{
    return _max_VxS_ (PWLbound1, ivmin);
}

/**
 * Compute maximum of producerWL partition bound1 and index vector set.
 */
inline
int[n] partitionIntersectMax (int[n] PWLbound1, int[n] ivmin)
{
    return _max_VxV_ (PWLbound1, ivmin);
}

/**
 * Compute minimum of producerWL partition bound2 scalar and index vector set.
 */
inline
int[n] partitionIntersectMin (int[n] PWLbound2, int ivmax)
{
    return _min_VxS_ (PWLbound2, ivmax);
}

/**
 * Compute minimum of producerWL partition bound2 and index vector set.
 */
inline
int[n] partitionIntersectMin (int[n] PWLbound2, int[n] ivmax)
{
    return _min_VxV_ (PWLbound2, ivmax);
}


#define MUTC 1
#ifndef SAC_BACKEND_MUTC

external int[*] unwrapInt (SACarg arg);
  #pragma linkname "SACARGunwrapInt"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external float[*] unwrapFloat (SACarg arg);
  #pragma linkname "SACARGunwrapFloat"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external double[*] unwrapDouble (SACarg arg);
  #pragma linkname "SACARGunwrapDouble"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external bool[*] unwrapBool (SACarg arg);
  #pragma linkname "SACARGunwrapBool"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external char[*] unwrapChar (SACarg arg);
  #pragma linkname "SACARGunwrapChar"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (int[*] a);
  #pragma linkname "SACARGwrapInt"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (float[*] a);
  #pragma linkname "SACARGwrapFloat"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (double[*] a);
  #pragma linkname "SACARGwrapDouble"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (bool[*] a);
  #pragma linkname "SACARGwrapBool"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (char[*] a);
  #pragma linkname "SACARGwrapChar"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external bool isInt (SACarg a);
  #pragma linkname "SACARGisInt"
  #pragma linksign [0,1]

external bool isFloat (SACarg a);
  #pragma linkname "SACARGisFloat"
  #pragma linksign [0,1]

external bool isDouble (SACarg a);
  #pragma linkname "SACARGisDouble"
  #pragma linksign [0,1]

external bool isBool (SACarg a);
  #pragma linkname "SACARGisBool"
  #pragma linksign [0,1]

external bool isChar (SACarg a);
  #pragma linkname "SACARGisChar"
  #pragma linksign [0,1]

external bool isUdt (int base, SACarg a);
  #pragma linkname "SACARGisUdt"
  #pragma linksign [0,1,2]

external byte[*] unwrapByte (SACarg arg);
  #pragma linkname "SACARGunwrapByte"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external short[*] unwrapShort (SACarg arg);
  #pragma linkname "SACARGunwrapShort"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external long[*] unwrapLong (SACarg arg);
  #pragma linkname "SACARGunwrapLong"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external longlong[*] unwrapLonglong (SACarg arg);
  #pragma linkname "SACARGunwrapLonglong"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external ubyte[*] unwrapUbyte (SACarg arg);
  #pragma linkname "SACARGunwrapUbyte"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external ushort[*] unwrapUshort (SACarg arg);
  #pragma linkname "SACARGunwrapUshort"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external uint[*] unwrapUint (SACarg arg);
  #pragma linkname "SACARGunwrapUint"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external ulong[*] unwrapUlong (SACarg arg);
  #pragma linkname "SACARGunwrapUlong"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external ulonglong[*] unwrapUlonglong (SACarg arg);
  #pragma linkname "SACARGunwrapUlonglong"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (byte[*] a);
  #pragma linkname "SACARGwrapByte"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (short[*] a);
  #pragma linkname "SACARGwrapShort"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (long[*] a);
  #pragma linkname "SACARGwrapLong"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (longlong[*] a);
  #pragma linkname "SACARGwrapLonglong"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (ubyte[*] a);
  #pragma linkname "SACARGwrapUbyte"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (ushort[*] a);
  #pragma linkname "SACARGwrapUshort"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (uint[*] a);
  #pragma linkname "SACARGwrapUint"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (ulong[*] a);
  #pragma linkname "SACARGwrapUlong"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external SACarg wrap (ulonglong[*] a);
  #pragma linkname "SACARGwrapUlonglong"
  #pragma linksign [1,2]
  #pragma refcounting [0,1]

external bool isByte (SACarg a);
  #pragma linkname "SACARGisByte"
  #pragma linksign [0,1]

external bool isShort (SACarg a);
  #pragma linkname "SACARGisShort"
  #pragma linksign [0,1]

external bool isLong (SACarg a);
  #pragma linkname "SACARGisLong"
  #pragma linksign [0,1]

external bool isLonglong (SACarg a);
  #pragma linkname "SACARGisLonglong"
  #pragma linksign [0,1]

external bool isUbyte (SACarg a);
  #pragma linkname "SACARGisUbyte"
  #pragma linksign [0,1]

external bool isUshort (SACarg a);
  #pragma linkname "SACARGisUshort"
  #pragma linksign [0,1]

external bool isUint (SACarg a);
  #pragma linkname "SACARGisUint"
  #pragma linksign [0,1]

external bool isUlong (SACarg a);
  #pragma linkname "SACARGisUlong"
  #pragma linksign [0,1]

external bool isUlonglong (SACarg a);
  #pragma linkname "SACARGisUlonglong"
  #pragma linksign [0,1]

#endif /* SAC_BACKEND_MUTC */
#undef MUTC
