/*
 * $Id$
 */

#ifndef OPTIMIZEstr
#define OPTIMIZEstr(str)
#endif

#ifndef OPTIMIZEabbr
#define OPTIMIZEabbr(abbr)
#endif

#ifndef OPTIMIZEdevl
#define OPTIMIZEdevl(devl)
#endif

#ifndef OPTIMIZEprod
#define OPTIMIZEprod(prod)
#endif

#ifndef OPTIMIZEname
#define OPTIMIZEname(name)
#endif

#ifndef OPTCOUNTERid
#define OPTCOUNTERid(id)
#endif

#ifndef OPTCOUNTERtext
#define OPTCOUNTERtext(text)
#endif

#ifndef OPTIMIZE
#define OPTIMIZE(str, abbr, devl, prod, name)                                            \
    OPTIMIZEstr (str) OPTIMIZEabbr (abbr) OPTIMIZEdevl (devl) OPTIMIZEprod (prod)        \
      OPTIMIZEname (name)
#endif

#ifndef OPTCOUNTER
#define OPTCOUNTER(id, text) OPTCOUNTERid (id) OPTCOUNTERtext (text)
#endif

OPTIMIZE ("dcr", dcr, TRUE, TRUE, "dead code removal")
OPTIMIZE ("cf", cf, TRUE, FALSE, "constant folding")
OPTIMIZE ("lir", lir, TRUE, FALSE, "loop invariant removal")
OPTIMIZE ("inl", inl, TRUE, TRUE, "function inlining")
OPTIMIZE ("lur", lur, TRUE, FALSE, "loop unrolling")
OPTIMIZE ("wlur", wlur, TRUE, FALSE, "with-loop unrolling")
OPTIMIZE ("lus", lus, FALSE, FALSE, "loop unswitching")
OPTIMIZE ("cse", cse, TRUE, FALSE, "common subexpression elimination")
OPTIMIZE ("dfr", dfr, TRUE, TRUE, "dead function removal")
OPTIMIZE ("wlt", wlt, FALSE, FALSE, "with-loop transformation")
OPTIMIZE ("wlf", wlf, TRUE, FALSE, "with-loop folding")
OPTIMIZE ("ive", ive, TRUE, TRUE, "index vector elimination")
OPTIMIZE ("ae", ae, FALSE, FALSE, "array elimination")
OPTIMIZE ("dl", dl, FALSE, FALSE, "distributive law")
OPTIMIZE ("rco", rco, TRUE, TRUE, "reference count optimization")
OPTIMIZE ("uip", uip, TRUE, TRUE, "update-in-place analysis")
OPTIMIZE ("dr", dr, TRUE, TRUE, "data reuse")
OPTIMIZE ("ipc", ipc, TRUE, TRUE, "Inplace Computation")
OPTIMIZE ("tsi", tsi, FALSE, FALSE, "with-loop tile size inference")
OPTIMIZE ("tsp", tsp, FALSE, FALSE, "with-loop tile size pragmas")
OPTIMIZE ("wlpg", wlpg, TRUE, FALSE, "with-loop partition generation")
OPTIMIZE ("cvp", cvp, TRUE, TRUE, "constant and variable propagation")
OPTIMIZE ("srf", srf, TRUE, TRUE, "static reuse / static free")
OPTIMIZE ("phm", phm, TRUE, TRUE, "private heap management")
OPTIMIZE ("aps", aps, TRUE, TRUE, "arena preselection (for PHM)")
OPTIMIZE ("dao", dao, TRUE, TRUE, "descriptor allocation opt. (for PHM)")
OPTIMIZE ("msca", msca, TRUE, TRUE, "memory size cache adjustment (for PHM)")
OPTIMIZE ("ap", ap, FALSE, FALSE, "array padding")
OPTIMIZE ("apl", apl, FALSE, FALSE, "array placement")
OPTIMIZE ("wls", wls, TRUE, TRUE, "with-loop scalarization")
OPTIMIZE ("al", al, TRUE, TRUE, "associative law")
OPTIMIZE ("etc", etc, TRUE, TRUE, "typeconv elimination")
OPTIMIZE ("sp", sp, FALSE, FALSE, "selection propagation")
OPTIMIZE ("wlsimp", wlsimp, TRUE, FALSE, "with-loop simplification")
OPTIMIZE ("wlfs", wlfs, TRUE, FALSE, "with-loop fusion")
OPTIMIZE ("lro", lro, TRUE, TRUE, "loop reuse optimization")
OPTIMIZE ("tup", tup, TRUE, TRUE, "type upgrade")
OPTIMIZE ("sisi", sisi, FALSE, FALSE, "signature simplification")
OPTIMIZE ("rtup", rtup, FALSE, FALSE, "reverse type upgrade")
OPTIMIZE ("sfd", sfd, FALSE, FALSE, "static function dispatch (tup)")
OPTIMIZE ("fsp", fsp, FALSE, FALSE, "function specilization (tup)")
OPTIMIZE ("esd", esd, FALSE, FALSE, "eliminate substraction and division")

OPTCOUNTER (dead_expr, "dead assignment(s) removed")
OPTCOUNTER (dead_var, "dead variable declaration(s) removed")
OPTCOUNTER (dead_fun, "dead function(s) removed")
OPTCOUNTER (cf_expr, "primitive function application(s) eliminated")
OPTCOUNTER (lir_expr, "loop invariant expression(s) moved")
OPTCOUNTER (wlir_expr, "with-loop invariant expression(s) moved")
OPTCOUNTER (inl_fun, "function(s) inlined")
OPTCOUNTER (elim_arrays, "array(s) eliminated")
OPTCOUNTER (lunr_expr, "loop(s) unrolled")
OPTCOUNTER (wlunr_expr, "with-loop(s) unrolled")
OPTCOUNTER (cse_expr, "common subexpression(s) eliminated")
OPTCOUNTER (wlf_expr, "with-loop(s) folded")
OPTCOUNTER (wlt_expr, "with-loop(s) transformed")
OPTCOUNTER (wls_expr, "with-loop(s) scalarized")
OPTCOUNTER (wlfs_expr, "with-loop(s) fused")
OPTCOUNTER (al_expr, "associative law optimization(s)")
OPTCOUNTER (dl_expr, "distributive law optimization(s)")
OPTCOUNTER (etc_expr, "type conversions eliminated")
OPTCOUNTER (ap_padded, "array type(s) padded")
OPTCOUNTER (ap_unsupported, "array type(s) unsupported by padding")
OPTCOUNTER (cvp_expr, "value(s) and variable(s) propagated")
OPTCOUNTER (tup_tu_expr, "type(s) upgraded")
OPTCOUNTER (tup_wdp_expr, "wrapped function(s) specialized")
OPTCOUNTER (tup_fdp_expr, "user function(s) dispatched")
OPTCOUNTER (tup_rtu_expr, "type(s) upgraded reversely")
OPTCOUNTER (tup_fsp_expr, "user functions(s) dispatched")
OPTCOUNTER (sisi_expr, "constant function argument(s) removed")

#undef OPTIMIZEstr
#undef OPTIMIZEabbr
#undef OPTIMIZEdevl
#undef OPTIMIZEprod
#undef OPTIMIZEname
#undef OPTIMIZE

#undef OPTCOUNTERid
#undef OPTCOUNTERtext
#undef OPTCOUNTER
