/*
 *
 * $Log$
 * Revision 3.36  2002/07/10 16:23:46  dkr
 * ICM_ANY added, ICM_VAR renamed into ICM_VARANY
 *
 * Revision 3.31  2002/05/31 17:25:12  dkr
 * ICMs for TAGGED_ARRAYS added
 *
 * Revision 3.30  2002/05/03 14:00:23  dkr
 * some ICM args renamed
 *
 * Revision 3.29  2002/05/03 12:48:44  dkr
 * ND_KD_SET_SHAPE removed
 *
 * Revision 3.28  2002/03/07 20:07:49  dkr
 * ND_FUN_RET: parameter arg_info removed
 *
 * Revision 3.27  2002/03/07 15:55:20  dkr
 * ND_FUN_DEC: parameter renamed
 *
 * Revision 3.26  2001/12/21 13:31:39  dkr
 * ICMs ..._CHECK_REUSE removed
 *
 * Revision 3.25  2001/06/28 07:46:51  cg
 * Primitive function psi() renamed to sel().
 *
 * Revision 3.24  2001/06/27 14:32:38  ben
 * modified for cooperation with tasksel-pragma
 *
 * Revision 3.23  2001/06/20 12:23:21  ben
 * minor Bug in definition of (MT_SCHEDULER_Self_... rmoved
 *
 * Revision 3.22  2001/06/19 12:30:14  ben
 * ICMs SCHEDULER_Self modified  with parameter first_task
 *
 * Revision 3.21  2001/05/11 14:36:56  cg
 * Added specific initialization ICM for each scheduling technique
 * implemented so far.
 *
 * Revision 3.20  2001/05/09 15:13:00  cg
 * All scheduling ICMs get an additional first parameter,
 * i.e. the segment ID. This is required to identify the appropriate
 * set of scheduler internal variables.
 *
 * Revision 3.19  2001/05/04 11:46:22  ben
 * MT_SCHEDULER_Even_... deleted
 * MT_SCHEDULER_Cyclic_... renamed to _Static_
 * MT_SCHEDULER_Afs_... renamed to Affinity
 *
 * Revision 3.18  2001/04/03 19:40:02  dkr
 * MT_ADJUST_SCHEDULER__OFFSET added.
 * MT_ADJUST_SCHEDULER is a h-icm now.
 *
 * Revision 3.17  2001/03/28 12:49:48  ben
 * For MT_SCHEDULER_Cyclic_..., MT_SCHEDULER_Self_..., MT_SCHEDULER_Afs_...
 * ICM_INT(param) added
 *
 * Revision 3.16  2001/03/27 11:51:17  ben
 * MT_SCHEDULER_Afs_... added
 *
 * Revision 3.15  2001/03/22 17:38:48  ben
 * Scheduler Self added
 *
 * Revision 3.14  2001/03/22 12:42:45  ben
 * Scheduler Cyclic added
 *
 * Revision 3.13  2001/03/21 11:49:26  ben
 * one renaming Bug for  MT_SCHEDULER_Even_... fixed
 *
 * Revision 3.12  2001/03/20 16:10:46  ben
 * Just implemented Static renamed to Even, because of existing Static
 * scheduling
 *
 * Revision 3.11  2001/03/20 12:59:12  ben
 * Static scheduling added
 *
 * Revision 3.10  2001/03/14 16:25:24  dkr
 * signature (parameter types) of icm MT_ADJUST_SCHEDULER modified
 *
 * Revision 3.9  2001/03/14 10:03:37  ben
 * BlockVar Scheduling implemented
 *
 * Revision 3.8  2001/02/06 01:44:03  dkr
 * WL_NOOP_... replaced by WL_ADJUST_OFFSET
 *
 * ... [eliminated] ...
 *
 */


/*
 * ATTENTION!! same variable names within different ICM-argument
 *   specifications should be of the same type even if they are in
 *   different ICM-specifications!!!!
 *   The reason for this restriction lies in the usage of
 *   static variables for them in icm2c.c and BEtest.c
 *   which has to be made in order to spare a second traversal
 *   of icm.data (-> icm2c.c!).
 */

#if defined(ND_FUN_DEC) || defined(ICM_ALL)
ICM_DEF( ND_FUN_DEC, TRACE_NONE)
  ICM_STR( name)
  ICM_STR( rettype)
  ICM_INT( narg)
  ICM_VARANY( (3*narg), arg)
ICM_END( ND_FUN_DEC, (name, rettype, narg, arg))
#endif

#if defined(ND_FUN_AP) || defined(ICM_ALL)
ICM_DEF( ND_FUN_AP, TRACE_FUN)
  ICM_STR( name)
  ICM_STR( retname)
  ICM_INT( narg)
  ICM_VARANY( (2*narg), arg)
ICM_END( ND_FUN_AP, (name, retname, narg, arg))
#endif

#if defined(ND_FUN_RET) || defined(ICM_ALL)
ICM_DEF( ND_FUN_RET, TRACE_FUN)
  ICM_STR( retname)
  ICM_INT( narg)
  ICM_VARANY( (3*narg), arg)
ICM_END( ND_FUN_RET, (retname, narg, arg))
#endif


#ifdef TAGGED_ARRAYS


#if defined(ND_OBJDEF) || defined(ICM_ALL)
ICM_DEF( ND_OBJDEF, TRACE_NONE)
  ICM_STR( basetype)
  ICM_STR( nt)
  ICM_INT( sdim)
  ICM_VARINT( sdim, shp)
ICM_END( ND_OBJDEF, (basetype, nt, sdim, shp))
#endif

#if defined(ND_OBJDEF_EXTERN) || defined(ICM_ALL)
ICM_DEF( ND_OBJDEF_EXTERN, TRACE_NONE)
  ICM_STR( basetype)
  ICM_STR( nt)
  ICM_INT( sdim)
ICM_END( ND_OBJDEF_EXTERN, (basetype, nt, sdim))
#endif

#if defined(ND_DECL) || defined(ICM_ALL)
ICM_DEF( ND_DECL, TRACE_NONE)
  ICM_STR( nt)
  ICM_STR( basetype)
  ICM_INT( sdim)
  ICM_VARINT( sdim, shp)
ICM_END( ND_DECL, (nt, basetype, sdim, shp))
#endif

#if defined(ND_DECL_EXTERN) || defined(ICM_ALL)
ICM_DEF( ND_DECL_EXTERN, TRACE_NONE)
  ICM_STR( basetype)
  ICM_STR( nt)
  ICM_INT( sdim)
ICM_END( ND_DECL_EXTERN, (basetype, nt, sdim))
#endif

/* ND_DECL__DATA( ...) is a H-ICM */

/* ND_DECL__DESC( ...) is a H-ICM */

#if defined(ND_DECL__MIRROR) || defined(ICM_ALL)
ICM_DEF( ND_DECL__MIRROR, TRACE_NONE)
  ICM_STR( nt)
  ICM_INT( sdim)
  ICM_VARINT( sdim, shp)
ICM_END( ND_DECL__MIRROR, (nt, sdim, shp))
#endif

#if defined(ND_DECL__MIRROR_PARAM) || defined(ICM_ALL)
ICM_DEF( ND_DECL__MIRROR_PARAM, TRACE_NONE)
  ICM_STR( nt)
  ICM_INT( sdim)
  ICM_VARINT( sdim, shp)
ICM_END( ND_DECL__MIRROR_PARAM, (nt, sdim, shp))
#endif

#if defined(ND_DECL__MIRROR_EXTERN) || defined(ICM_ALL)
ICM_DEF( ND_DECL__MIRROR_EXTERN, TRACE_NONE)
  ICM_STR( nt)
  ICM_INT( sdim)
ICM_END( ND_DECL__MIRROR_EXTERN, (nt, sdim))
#endif


#if defined(ND_CHECK_REUSE) || defined(ICM_ALL)
ICM_DEF( ND_CHECK_REUSE, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_STR( from_nt)
  ICM_INT( from_sdim)
ICM_END( ND_CHECK_REUSE, (to_nt, to_sdim, from_nt, from_sdim))
#endif

/* ND_ALLOC( ...) is a H-ICM */

/* ND_ALLOC__DATA( ...) is a H-ICM */

/* ND_ALLOC__DESC( ...) is a H-ICM */


/* ND_SET__RC( ...) is a H-ICM */

#if defined(ND_SET__SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_SET__SHAPE, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_INT( dim)
  ICM_VARANY( dim, shp_str)
ICM_END( ND_SET__SHAPE, (to_nt, to_sdim, dim, shp_str))
#endif


#if defined(ND_REFRESH_MIRROR) || defined(ICM_ALL)
ICM_DEF( ND_REFRESH_MIRROR, TRACE_NONE)
  ICM_STR( nt)
  ICM_INT( sdim)
ICM_END( ND_REFRESH_MIRROR, (nt, sdim))
#endif

#if defined(ND_CHECK_MIRROR) || defined(ICM_ALL)
ICM_DEF( ND_CHECK_MIRROR, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_STR( from_nt)
  ICM_INT( from_sdim)
ICM_END( ND_CHECK_MIRROR, (to_nt, to_sdim, from_nt, from_sdim))
#endif


#if defined(ND_ASSIGN) || defined(ICM_ALL)
ICM_DEF( ND_ASSIGN, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_STR( from_nt)
  ICM_INT( from_sdim)
ICM_END( ND_ASSIGN, (to_nt, to_sdim, from_nt, from_sdim))
#endif

/* ASSIGN__DATA( ...) is a H-ICM */

#if defined(ND_ASSIGN__DESC) || defined(ICM_ALL)
ICM_DEF( ND_ASSIGN__DESC, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_STR( from_nt)
ICM_END( ND_ASSIGN__DESC, (to_nt, from_nt))
#endif

#if defined(ND_ASSIGN__SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_ASSIGN__SHAPE, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_STR( from_nt)
  ICM_INT( from_sdim)
ICM_END( ND_ASSIGN__SHAPE, (to_nt, to_sdim, from_nt, from_sdim))
#endif


#if defined(ND_COPY) || defined(ICM_ALL)
ICM_DEF( ND_COPY, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_STR( from_nt)
  ICM_INT( from_sdim)
  ICM_STR( copyfun)
ICM_END( ND_COPY, (to_nt, to_sdim, from_nt, from_sdim, copyfun))
#endif

/* COPY__DATA( ...) is a H-ICM */

#if defined(ND_COPY__SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_COPY__SHAPE, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_STR( from_nt)
  ICM_INT( from_sdim)
ICM_END( ND_COPY__SHAPE, (to_nt, to_sdim, from_nt, from_sdim))
#endif

#if defined(ND_MAKE_UNIQUE) || defined(ICM_ALL)
ICM_DEF( ND_MAKE_UNIQUE, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_STR( from_nt)
  ICM_INT( from_sdim)
  ICM_STR( copyfun)
ICM_END( ND_MAKE_UNIQUE, (to_nt, to_sdim, from_nt, from_sdim, copyfun))
#endif


#if defined(ND_CREATE__VECT__SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_CREATE__VECT__SHAPE, TRACE_NONE)
  ICM_STR( nt)
  ICM_INT( sdim)
  ICM_INT( len)
  ICM_VARANY( len, s)
ICM_END( ND_CREATE__VECT__SHAPE, (nt, sdim, len, s))
#endif

#if defined(ND_CREATE__VECT__DATA) || defined(ICM_ALL)
ICM_DEF( ND_CREATE__VECT__DATA, TRACE_NONE)
  ICM_STR( nt)
  ICM_INT( sdim)
  ICM_INT( len)
  ICM_VARANY( len, s)
ICM_END( ND_CREATE__VECT__DATA, (nt, sdim, len, s))
#endif


#if defined(ND_PRF_SHAPE__DATA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_SHAPE__DATA, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_STR( from_nt)
  ICM_INT( from_sdim)
ICM_END( ND_PRF_SHAPE__DATA, (to_nt, to_sdim, from_nt, from_sdim))
#endif

#if defined(ND_PRF_MODARRAY__DATA_id) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY__DATA_id, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_STR( from_nt)
  ICM_INT( from_sdim)
  ICM_STR( idx)
  ICM_STR( val)
ICM_END( ND_PRF_MODARRAY__DATA_id, (to_nt, to_sdim, from_nt, from_sdim, idx, val))
#endif

#if defined(ND_PRF_MODARRAY__DATA_arr) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY__DATA_arr, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_STR( from_nt)
  ICM_INT( from_sdim)
  ICM_INT( idx_len)
  ICM_VARANY( idx_len, idx_arr)
  ICM_STR( val)
ICM_END( ND_PRF_MODARRAY__DATA_arr, (to_nt, to_sdim, from_nt, from_sdim, idx_len, idx_arr, val))
#endif

#if defined(ND_PRF_IDX_MODARRAY__DATA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_IDX_MODARRAY__DATA, TRACE_NONE)
  ICM_STR( to_nt)
  ICM_INT( to_sdim)
  ICM_STR( from_nt)
  ICM_INT( from_sdim)
  ICM_STR( idx)
  ICM_STR( val)
ICM_END( ND_PRF_IDX_MODARRAY__DATA, (to_nt, to_sdim, from_nt, from_sdim, idx, val))
#endif


#else /* TAGGED_ARRAYS */


#if defined(ND_KS_DECL_GLOBAL_ARRAY) || defined(ICM_ALL)
ICM_DEF( ND_KS_DECL_GLOBAL_ARRAY, TRACE_NONE)
  ICM_STR(basetype)
  ICM_STR(name)
  ICM_INT(dim)
  ICM_VARANY( dim, s)
ICM_END( ND_KS_DECL_GLOBAL_ARRAY, (basetype, name, dim, s))
#endif

#if defined(ND_KD_DECL_EXTERN_ARRAY) || defined(ICM_ALL)
ICM_DEF( ND_KD_DECL_EXTERN_ARRAY, TRACE_NONE)
  ICM_STR(basetype)
  ICM_STR(name)
  ICM_INT(dim)
ICM_END( ND_KD_DECL_EXTERN_ARRAY, (basetype, name, dim))
#endif

#if defined(ND_KS_DECL_ARRAY) || defined(ICM_ALL)
ICM_DEF( ND_KS_DECL_ARRAY, TRACE_NONE)
  ICM_STR(basetype)
  ICM_STR(name)
  ICM_INT(dim)
  ICM_VARANY( dim, s)
ICM_END( ND_KS_DECL_ARRAY, (basetype, name, dim, s))
#endif

#if defined(ND_KS_DECL_ARRAY_ARG) || defined(ICM_ALL)
ICM_DEF( ND_KS_DECL_ARRAY_ARG, TRACE_NONE)
  ICM_STR(name)
  ICM_INT(dim)
  ICM_VARANY( dim, s)
ICM_END( ND_KS_DECL_ARRAY_ARG, (name, dim, s))
#endif


#if defined(ND_CREATE_CONST_ARRAY_S) || defined(ICM_ALL)
ICM_DEF( ND_CREATE_CONST_ARRAY_S, TRACE_NONE)
  ICM_STR(name)
  ICM_INT(len)
  ICM_VARANY(len, s)
ICM_END( ND_CREATE_CONST_ARRAY_S, (name, len, s))
#endif

#if defined(ND_CREATE_CONST_ARRAY_H) || defined(ICM_ALL)
ICM_DEF( ND_CREATE_CONST_ARRAY_H, TRACE_NONE)
  ICM_STR(name)
  ICM_STR(copyfun)
  ICM_INT(len)
  ICM_VARANY(len, A)
ICM_END( ND_CREATE_CONST_ARRAY_H, (name, copyfun, len, A))
#endif

#if defined(ND_CREATE_CONST_ARRAY_A) || defined(ICM_ALL)
ICM_DEF( ND_CREATE_CONST_ARRAY_A, TRACE_NONE)
  ICM_STR(name)
  ICM_INT(len2)
  ICM_INT(len1)
  ICM_VARANY( len1, A)
ICM_END( ND_CREATE_CONST_ARRAY_A, (name, len2, len1, A))
#endif


#if defined(ND_KD_SEL_CxA_S) || defined(ICM_ALL)
ICM_DEF( ND_KD_SEL_CxA_S, TRACE_PRF)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dim)
  ICM_VARANY( dim, vi)
ICM_END( ND_KD_SEL_CxA_S, (a, res, dim, vi))
#endif

#if defined(ND_KD_SEL_VxA_S) || defined(ICM_ALL)
ICM_DEF( ND_KD_SEL_VxA_S, TRACE_PRF)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dim)
  ICM_STR( v)
ICM_END( ND_KD_SEL_VxA_S, (a, res, dim, v))
#endif

#if defined(ND_KD_SEL_CxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_SEL_CxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dimv)
  ICM_VARANY( dimv, vi)
ICM_END( ND_KD_SEL_CxA_A, (dima, a, res, dimv, vi))
#endif

#if defined(ND_KD_SEL_VxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_SEL_VxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dimv)
  ICM_STR( v)
ICM_END( ND_KD_SEL_VxA_A, (dima, a, res, dimv, v))
#endif

#if defined(ND_KD_TAKE_CxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_TAKE_CxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dimv)
  ICM_VARANY( dimv, vi)
ICM_END( ND_KD_TAKE_CxA_A, (dima, a, res, dimv, vi))
#endif

#if defined(ND_KD_DROP_CxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_DROP_CxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dimv)
  ICM_VARANY( dimv, vi)
ICM_END( ND_KD_DROP_CxA_A, (dima, a, res, dimv, vi))
#endif

#if defined(ND_KD_CAT_SxAxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_CAT_SxAxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_VARANY( 2,ar)
  ICM_STR(res)
  ICM_INT(catdim)
ICM_END( ND_KD_CAT_SxAxA_A, (dima, ar, res, catdim))
#endif

#if defined(ND_KD_ROT_CxSxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_ROT_CxSxA_A, TRACE_PRF)
  ICM_INT( rotdim)
  ICM_VARANY( 1, numstr)
  ICM_INT(dima)
  ICM_STR(a)
  ICM_STR(res)
ICM_END( ND_KD_ROT_CxSxA_A, (rotdim, numstr, dima, a, res))
#endif


#if defined(ND_PRF_MODARRAY_AxCxS) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxCxS, TRACE_PRF)
  ICM_STR( res_btype)
  ICM_INT( dimres)
  ICM_STR( res)
  ICM_STR( old)
  ICM_VARANY( 1, value)
  ICM_INT( dimv)
  ICM_VARANY( dimv, vi)
ICM_END( ND_PRF_MODARRAY_AxCxS, (res_btype, dimres, res, old, value, dimv, vi))
#endif

#if defined(ND_PRF_MODARRAY_AxVxS) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxVxS, TRACE_PRF)
  ICM_STR(res_btype)
  ICM_INT(dimres)
  ICM_STR(res)
  ICM_STR(old)
  ICM_VARANY( 1, value)
  ICM_INT(dim)
  ICM_STR(v)
ICM_END( ND_PRF_MODARRAY_AxVxS, (res_btype,dimres,res,old,value,dim,v))
#endif

#if defined(ND_PRF_MODARRAY_AxCxA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxCxA, TRACE_PRF)
  ICM_STR(res_btype)
  ICM_INT(dimres)
  ICM_STR(res)
  ICM_STR(old)
  ICM_STR(val)
  ICM_INT(dimv)
  ICM_VARANY( dimv, vi)
ICM_END( ND_PRF_MODARRAY_AxCxA, (res_btype,dimres,res,old,val,dimv,vi))
#endif

#if defined(ND_PRF_MODARRAY_AxVxA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxVxA, TRACE_PRF)
  ICM_STR(res_btype)
  ICM_INT(dimres)
  ICM_STR(res)
  ICM_STR(old)
  ICM_STR(val)
  ICM_INT(dim)
  ICM_STR( v)
ICM_END( ND_PRF_MODARRAY_AxVxA, (res_btype,dimres,res,old,val,dim,v))
#endif


#endif /* TAGGED_ARRAYS */


#if defined(ND_KS_VECT2OFFSET) || defined(ICM_ALL)
ICM_DEF( ND_KS_VECT2OFFSET, TRACE_PRF)
  ICM_STR( off_name)
  ICM_STR( arr_name)
  ICM_INT( dim)
  ICM_INT( dims)
  ICM_VARANY( dims, s)
ICM_END( ND_KS_VECT2OFFSET, (off_name, arr_name, dim, dims, s))
#endif


/*
 * ICMs for compilation of new with-loop
 */

#if defined(WL_BEGIN__OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_BEGIN__OFFSET, TRACE_NONE)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
ICM_END( WL_BEGIN__OFFSET, (target, idx_vec, dims))
#endif

#if defined(WL_BEGIN) || defined(ICM_ALL)
ICM_DEF( WL_BEGIN, TRACE_NONE)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
ICM_END( WL_BEGIN, (target, idx_vec, dims))
#endif

#if defined(WL_END__OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_END__OFFSET, TRACE_NONE)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
ICM_END( WL_END__OFFSET, (target, idx_vec, dims))
#endif

#if defined(WL_END) || defined(ICM_ALL)
ICM_DEF( WL_END, TRACE_NONE)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
ICM_END( WL_END, (target, idx_vec, dims))
#endif

#if defined(WL_INIT_OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_INIT_OFFSET, TRACE_NONE)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
ICM_END( WL_INIT_OFFSET, (dims_target, target, idx_vec, dims))
#endif

#if defined(WL_ASSIGN) || defined(ICM_ALL)
ICM_DEF( WL_ASSIGN, TRACE_NONE)
  ICM_INT(dims_expr)
  ICM_STR(expr)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VARANY(dims, idx_scalars)
ICM_END( WL_ASSIGN, (dims_expr, expr, dims_target, target, idx_vec, dims, idx_scalars))
#endif

#if defined(WL_ASSIGN__INIT) || defined(ICM_ALL)
ICM_DEF( WL_ASSIGN__INIT, TRACE_NONE)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VARANY(dims, idx_scalars)
ICM_END( WL_ASSIGN__INIT, (dims_target, target, idx_vec, dims, idx_scalars))
#endif

#if defined(WL_ASSIGN__COPY) || defined(ICM_ALL)
ICM_DEF( WL_ASSIGN__COPY, TRACE_NONE)
  ICM_STR(source)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VARANY(dims, idx_scalars)
ICM_END( WL_ASSIGN__COPY, (source, dims_target, target, idx_vec, dims, idx_scalars))
#endif

#if defined(WL_FOLD__OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_FOLD__OFFSET, TRACE_NONE)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VARANY(dims, idx_scalars)
ICM_END( WL_FOLD__OFFSET, (dims_target, target, idx_vec, dims, idx_scalars))
#endif

#if defined(WL_FOLD) || defined(ICM_ALL)
ICM_DEF( WL_FOLD, TRACE_NONE)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VARANY(dims, idx_scalars)
ICM_END( WL_FOLD, (dims_target, target, idx_vec, dims, idx_scalars))
#endif

#if defined(WL_ADJUST_OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_ADJUST_OFFSET, TRACE_NONE)
  ICM_INT(dim)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VARANY(dims, idx_scalars)
ICM_END( WL_ADJUST_OFFSET, (dim, dims_target, target, idx_vec, dims, idx_scalars))
#endif

#if defined(WL_SET_OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_SET_OFFSET, TRACE_NONE)
  ICM_INT(dim)
  ICM_INT(first_block_dim)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VARANY(dims, idx_scalars)
ICM_END( WL_SET_OFFSET, (dim, first_block_dim,
                         dims_target, target, idx_vec, dims, idx_scalars))
#endif



/*
 * ICMs for compilation of multi-threaded applications
 */

#if defined(MT_SPMD_FUN_DEC) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_FUN_DEC, TRACE_NONE)
  ICM_STR(name)
  ICM_STR(from)
  ICM_INT(narg)
  ICM_VARANY((3*narg), vararg)
ICM_END( MT_SPMD_FUN_DEC, (name, from, narg, vararg))
#endif

#if defined(MT_SPMD_FUN_RET) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_FUN_RET, TRACE_NONE)
  ICM_INT(barrier_id)
  ICM_INT(narg)
  ICM_VARANY((2*narg), vararg)
ICM_END( MT_SPMD_FUN_RET, (barrier_id, narg, vararg))
#endif

#if defined(MT_START_SYNCBLOCK) || defined(ICM_ALL)
ICM_DEF( MT_START_SYNCBLOCK, TRACE_NONE)
  ICM_INT(barrier_id)
  ICM_INT(narg)
  ICM_VARANY((3*narg), vararg)
ICM_END( MT_START_SYNCBLOCK, (barrier_id, narg, vararg))
#endif

#if defined(MT_SYNC_NONFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_NONFOLD, TRACE_NONE)
  ICM_INT(barrier_id)
ICM_END( MT_SYNC_NONFOLD, (barrier_id))
#endif

#if defined(MT_SYNC_FOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_FOLD, TRACE_NONE)
  ICM_INT(barrier_id)
  ICM_INT(narg)
  ICM_VARANY((4*narg), vararg)
ICM_END( MT_SYNC_FOLD, (barrier_id, narg, vararg))
#endif

#if defined(MT_SYNC_ONEFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_ONEFOLD, TRACE_NONE)
  ICM_INT(barrier_id)
  ICM_STR(foldtype)
  ICM_STR(accu_var)
  ICM_STR(tmp_var)
  ICM_STR(foldop)
ICM_END( MT_SYNC_ONEFOLD, (barrier_id, foldtype, accu_var, tmp_var, foldop))
#endif

#if defined(MT_SYNC_ONEFOLD_NONFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_ONEFOLD_NONFOLD, TRACE_NONE)
  ICM_STR(foldtype)
  ICM_STR(accu_var)
  ICM_STR(tmp_var)
  ICM_STR(foldop)
ICM_END( MT_SYNC_ONEFOLD_NONFOLD, (foldtype, accu_var, tmp_var, foldop))
#endif

#if defined(MT_SYNC_FOLD_NONFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_FOLD_NONFOLD, TRACE_NONE)
  ICM_INT(narg)
  ICM_VARANY((4*narg), vararg)
ICM_END( MT_SYNC_FOLD_NONFOLD, (narg, vararg))
#endif

#if defined(MT_MASTER_SEND_FOLDRESULTS) || defined(ICM_ALL)
ICM_DEF( MT_MASTER_SEND_FOLDRESULTS, TRACE_NONE)
  ICM_INT(nfoldargs)
  ICM_VARANY((2*nfoldargs), foldargs)
ICM_END( MT_MASTER_SEND_FOLDRESULTS, (nfoldargs, foldargs))
#endif

#if defined(MT_MASTER_RECEIVE_FOLDRESULTS) || defined(ICM_ALL)
ICM_DEF( MT_MASTER_RECEIVE_FOLDRESULTS, TRACE_NONE)
  ICM_INT(nfoldargs)
  ICM_VARANY((2*nfoldargs), foldargs)
ICM_END( MT_MASTER_RECEIVE_FOLDRESULTS, (nfoldargs, foldargs))
#endif

#if defined(MT_MASTER_SEND_SYNCARGS) || defined(ICM_ALL)
ICM_DEF( MT_MASTER_SEND_SYNCARGS, TRACE_NONE)
  ICM_INT(nsyncargs)
  ICM_VARANY(nsyncargs, syncargs)
ICM_END( MT_MASTER_SEND_SYNCARGS, (nsyncargs, syncargs))
#endif

#if defined(MT_MASTER_RECEIVE_SYNCARGS) || defined(ICM_ALL)
ICM_DEF( MT_MASTER_RECEIVE_SYNCARGS, TRACE_NONE)
  ICM_INT(nsyncargs)
  ICM_VARANY(nsyncargs, syncargs)
ICM_END( MT_MASTER_RECEIVE_SYNCARGS, (nsyncargs, syncargs))
#endif

#if defined(MT_CONTINUE) || defined(ICM_ALL)
ICM_DEF( MT_CONTINUE, TRACE_NONE)
  ICM_INT(nfoldargs)
  ICM_VARANY((2*nfoldargs), vararg)
  ICM_INT(nsyncargs)
  ICM_VARANY((nsyncargs), syncargs)
ICM_END( MT_CONTINUE, (nfoldargs, vararg, nsyncargs, syncargs))
#endif

#if defined(MT_SPMD_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_BEGIN, TRACE_NONE)
  ICM_STR(name)
ICM_END( MT_SPMD_BEGIN, (name))
#endif

#if defined(MT_SPMD_ALTSEQ) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_ALTSEQ, TRACE_NONE)
  ICM_STR(name)
ICM_END( MT_SPMD_ALTSEQ, (name))
#endif

#if defined(MT_SPMD_STATIC_MODE_END) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_END, TRACE_NONE)
  ICM_STR(name)
ICM_END( MT_SPMD_END, (name))
#endif


#if defined(MT_SPMD_SETUP) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_SETUP, TRACE_NONE)
  ICM_STR(name)
  ICM_INT(narg)
  ICM_VARANY((3*narg), vararg)
ICM_END( MT_SPMD_SETUP, (name, narg, vararg))
#endif

#if defined(MT_SPMD_PRESET) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_PRESET, TRACE_NONE)
  ICM_STR(name)
  ICM_INT(narg)
  ICM_VARANY((2*narg), vararg)
ICM_END( MT_SPMD_PRESET, (name, narg, vararg))
#endif

#if defined(MT_ADJUST_SCHEDULER__OFFSET) || defined(ICM_ALL)
ICM_DEF( MT_ADJUST_SCHEDULER__OFFSET, TRACE_NONE)
  ICM_STR(array)
  ICM_INT(array_dim)
  ICM_INT(current_dim)
  ICM_STR(lower)
  ICM_STR(upper)
  ICM_STR(unrolling)
ICM_END( MT_ADJUST_SCHEDULER__OFFSET, (array, array_dim, current_dim, lower, upper, unrolling))
#endif


/*
 * ICMs for implementing scheduling strategies
 */

#if defined(MT_SCHEDULER_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_BEGIN, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_INT(dim)
  ICM_VARANY((2*dim), vararg)
ICM_END( MT_SCHEDULER_BEGIN, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_END, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_INT(dim)
  ICM_VARANY((2*dim), vararg)
ICM_END( MT_SCHEDULER_END, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_INIT, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_INT(dim)
  ICM_VARANY((2*dim), vararg)
ICM_END( MT_SCHEDULER_INIT, (sched_id, dim, vararg))
#endif



#if defined(MT_SCHEDULER_Block_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Block_BEGIN, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_INT(dim)
  ICM_VARANY((3*dim), vararg)
ICM_END( MT_SCHEDULER_Block_BEGIN, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Block_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Block_END, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_INT(dim)
  ICM_VARANY((3*dim), vararg)
ICM_END( MT_SCHEDULER_Block_END, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Block_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Block_INIT, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_INT(dim)
  ICM_VARANY((3*dim), vararg)
ICM_END( MT_SCHEDULER_Block_INIT, (sched_id, dim, vararg))
#endif



#if defined(MT_SCHEDULER_BlockVar_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_BlockVar_BEGIN, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_INT(dim)
  ICM_VARANY((3*dim), vararg)
ICM_END( MT_SCHEDULER_BlockVar_BEGIN, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_BlockVar_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_BlockVar_END, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_INT(dim)
  ICM_VARANY((3*dim), vararg)
ICM_END( MT_SCHEDULER_BlockVar_END, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_BlockVar_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_BlockVar_INIT, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_INT(dim)
  ICM_VARANY((3*dim), vararg)
ICM_END( MT_SCHEDULER_BlockVar_INIT, (sched_id, dim, vararg))
#endif



#if defined(MT_SCHEDULER_Static_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Static_BEGIN, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_STR(ts_name)
  ICM_INT(ts_dims)
  ICM_INT(ts_arg_num)
  ICM_VARANY((ts_arg_num), ts_args)
  ICM_INT(dim)
  ICM_VARANY((4*dim), vararg)
ICM_END( MT_SCHEDULER_Static_BEGIN, (sched_id,ts_name, ts_dims,ts_arg_num,ts_args, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Static_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Static_END, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_STR(ts_name)
  ICM_INT(ts_dims)
  ICM_INT(ts_arg_num)
  ICM_VARANY((ts_arg_num), ts_args)
  ICM_INT(dim)
  ICM_VARANY((4*dim), vararg)
ICM_END( MT_SCHEDULER_Static_END, (sched_id,ts_name, ts_dims,ts_arg_num,ts_args, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Static_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Static_INIT, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_STR(ts_name)
  ICM_INT(ts_dims)
  ICM_INT(ts_arg_num)
  ICM_VARANY((ts_arg_num), ts_args)
  ICM_INT(dim)
  ICM_VARANY((4*dim), vararg)
ICM_END( MT_SCHEDULER_Static_INIT, (sched_id,ts_name, ts_dims,ts_arg_num,ts_args, dim, vararg))
#endif



#if defined(MT_SCHEDULER_Self_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Self_BEGIN, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_STR(first_task)
  ICM_STR(ts_name)
  ICM_INT(ts_dims)
  ICM_INT(ts_arg_num)
  ICM_VARANY((ts_arg_num), ts_args)
  ICM_INT(dim)
  ICM_VARANY((4*dim), vararg)
ICM_END( MT_SCHEDULER_Self_BEGIN, (sched_id, first_task,ts_name, ts_dims,ts_arg_num,ts_args,  dim, vararg))
#endif

#if defined(MT_SCHEDULER_Self_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Self_END, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_STR(first_task)
  ICM_STR(ts_name)
  ICM_INT(ts_dims)
  ICM_INT(ts_arg_num)
  ICM_VARANY((ts_arg_num), ts_args)
  ICM_INT(dim)
  ICM_VARANY((4*dim), vararg)
ICM_END( MT_SCHEDULER_Self_END, (sched_id, first_task,ts_name, ts_dims,ts_arg_num,ts_args, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Self_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Self_INIT, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_STR(first_task)
  ICM_STR(ts_name)
  ICM_INT(ts_dims)
  ICM_INT(ts_arg_num)
  ICM_VARANY((ts_arg_num), ts_args)
  ICM_INT(dim)
  ICM_VARANY((4*dim), vararg)
ICM_END( MT_SCHEDULER_Self_INIT, (sched_id, first_task,ts_name, ts_dims,ts_arg_num,ts_args,  dim, vararg))
#endif



#if defined(MT_SCHEDULER_Affinity_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Affinity_BEGIN, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_STR(ts_name)
  ICM_INT(ts_dims)
  ICM_INT(ts_arg_num)
  ICM_VARANY((ts_arg_num), ts_args)
  ICM_INT(dim)
  ICM_VARANY((4*dim), vararg)
ICM_END( MT_SCHEDULER_Affinity_BEGIN, (sched_id,ts_name, ts_dims,ts_arg_num,ts_args, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Affinity_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Affinity_END, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_STR(ts_name)
  ICM_INT(ts_dims)
  ICM_INT(ts_arg_num)
  ICM_VARANY((ts_arg_num), ts_args)
  ICM_INT(dim)
  ICM_VARANY((4*dim), vararg)
ICM_END( MT_SCHEDULER_Affinity_END, (sched_id,ts_name, ts_dims,ts_arg_num,ts_args, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Affinity_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Affinity_INIT, TRACE_NONE)
  ICM_INT(sched_id)
  ICM_STR(ts_name)
  ICM_INT(ts_dims)
  ICM_INT(ts_arg_num)
  ICM_VARANY((ts_arg_num), ts_args)
  ICM_INT(dim)
  ICM_VARANY((4*dim), vararg)
ICM_END( MT_SCHEDULER_Affinity_INIT, (sched_id,ts_name, ts_dims,ts_arg_num,ts_args, dim, vararg))
#endif
