/*
 *
 * $Log$
 * Revision 3.64  2003/09/25 13:43:05  dkr
 * new argument 'copyfun' added to some ICMs
 *
 * Revision 3.63  2003/09/20 14:23:41  dkr
 * several ICMs for prfs added
 *
 * Revision 3.62  2003/09/19 15:33:31  dkr
 * postfix _nt of varnames renamed into _NT
 *
 * Revision 3.61  2003/09/17 14:17:08  dkr
 * some function parameters renamed
 *
 * Revision 3.60  2003/09/17 13:01:22  dkr
 * postfixes _nt, _any renamed into _NT, _ANY
 *
 * Revision 3.59  2003/08/04 16:57:14  dkr
 * argument of MT_SPMD_FUN_DEC, MT_SPMD_FUN_RET renamed
 *
 * Revision 3.58  2003/06/12 17:22:34  dkr
 * support for multi-dimensional constant arrays added:
 * ICMs CREATE__VECT__... renamed into CREATE__ARRAY__...
 *
 * Revision 3.57  2003/03/14 13:22:33  dkr
 * all arguments of WL-ICMs are tagged now
 *
 * Revision 3.56  2002/10/29 19:07:12  dkr
 * signature of some WL-ICMs modified
 *
 * Revision 3.55  2002/10/24 20:52:01  dkr
 * signature of ND_WL_GENARRAY__SHAPE_... modified
 *
 * Revision 3.54  2002/10/24 20:37:22  dkr
 * WL icms redesigned for dynamic shapes
 *
 * Revision 3.53  2002/10/10 23:52:44  dkr
 * signature of TYPE_ERROR modified
 *
 * Revision 3.52  2002/09/09 14:24:37  dkr
 * TYPE_ERROR added
 *
 * Revision 3.51  2002/09/06 09:52:40  dkr
 * fixed a bug in ND_IDXS2OFFSET
 *
 * Revision 3.50  2002/09/06 09:37:04  dkr
 * ND_IDXS2OFFSET added
 *
 * Revision 3.49  2002/08/06 08:58:54  dkr
 * ND_WL_GENARRAY__SHAPE removed if TAGGED_ARRAYS is undefined
 *
 * Revision 3.48  2002/08/05 20:41:44  dkr
 * ND_WL_GENARRAY__SHAPE... added
 *
 * Revision 3.47  2002/08/05 18:22:27  dkr
 * ND_ASSIGN__SHAPE renamed into ND_ASSIGN__DIMSHP
 *
 * Revision 3.46  2002/08/03 03:16:48  dkr
 * ND_PRF_SEL__DIM icms removed
 *
 * Revision 3.45  2002/08/02 20:48:24  dkr
 * PRF_SEL__DIM... icms added
 * CREATE__VECT__DIM icm added
 *
 * Revision 3.44  2002/07/31 16:34:06  dkr
 * parameter 'copyfun' added for several ICMs
 *
 * Revision 3.43  2002/07/24 15:03:54  dkr
 * ND_VECT2OFFSET modified
 *
 * Revision 3.42  2002/07/16 11:59:35  dkr
 * MT_ADJUST_SCHEDULER__OFFSET modified
 *
 * Revision 3.41  2002/07/15 15:25:53  dkr
 * some bugs fixed
 *
 * Revision 3.40  2002/07/12 18:53:25  dkr
 * first complete TAGGED_ARRAYS revision :-)
 *
 * Revision 3.28  2002/03/07 20:07:49  dkr
 * ND_FUN_RET: parameter arg_info removed
 *
 * Revision 3.27  2002/03/07 15:55:20  dkr
 * ND_FUN_DEC: parameter renamed
 *
 * Revision 3.26  2001/12/21 13:31:39  dkr
 * ICMs ..._CHECK_REUSE removed
 *
 * Revision 3.25  2001/06/28 07:46:51  cg
 * Primitive function psi() renamed to sel().
 *
 * Revision 3.24  2001/06/27 14:32:38  ben
 * modified for cooperation with tasksel-pragma
 *
 * Revision 3.23  2001/06/20 12:23:21  ben
 * minor Bug in definition of (MT_SCHEDULER_Self_... rmoved
 *
 * Revision 3.22  2001/06/19 12:30:14  ben
 * ICMs SCHEDULER_Self modified  with parameter first_task
 *
 * Revision 3.21  2001/05/11 14:36:56  cg
 * Added specific initialization ICM for each scheduling technique
 * implemented so far.
 *
 * Revision 3.20  2001/05/09 15:13:00  cg
 * All scheduling ICMs get an additional first parameter,
 * i.e. the segment ID. This is required to identify the appropriate
 * set of scheduler internal variables.
 *
 * Revision 3.19  2001/05/04 11:46:22  ben
 * MT_SCHEDULER_Even_... deleted
 * MT_SCHEDULER_Cyclic_... renamed to _Static_
 * MT_SCHEDULER_Afs_... renamed to Affinity
 *
 * Revision 3.18  2001/04/03 19:40:02  dkr
 * MT_ADJUST_SCHEDULER__OFFSET added.
 * MT_ADJUST_SCHEDULER is a h-icm now.
 *
 * Revision 3.17  2001/03/28 12:49:48  ben
 * For MT_SCHEDULER_Cyclic_..., MT_SCHEDULER_Self_..., MT_SCHEDULER_Afs_...
 * ICM_INT(param) added
 *
 * Revision 3.16  2001/03/27 11:51:17  ben
 * MT_SCHEDULER_Afs_... added
 *
 * Revision 3.15  2001/03/22 17:38:48  ben
 * Scheduler Self added
 *
 * Revision 3.14  2001/03/22 12:42:45  ben
 * Scheduler Cyclic added
 *
 * Revision 3.13  2001/03/21 11:49:26  ben
 * one renaming Bug for  MT_SCHEDULER_Even_... fixed
 *
 * Revision 3.12  2001/03/20 16:10:46  ben
 * Just implemented Static renamed to Even, because of existing Static
 * scheduling
 *
 * Revision 3.11  2001/03/20 12:59:12  ben
 * Static scheduling added
 *
 * Revision 3.10  2001/03/14 16:25:24  dkr
 * signature (parameter types) of icm MT_ADJUST_SCHEDULER modified
 *
 * Revision 3.9  2001/03/14 10:03:37  ben
 * BlockVar Scheduling implemented
 *
 * Revision 3.8  2001/02/06 01:44:03  dkr
 * WL_NOOP_... replaced by WL_ADJUST_OFFSET
 *
 * ... [eliminated] ...
 *
 */


/*
 * ATTENTION!!
 * Same variable names within different ICM-argument specifications should be
 * of the same type even if they are in different ICM-specifications!!!!
 * The reason for this restriction lies in the usage of static variables for
 * them in icm2c.c and BEtest.c which has to be made in order to spare a second
 * traversal of icm.data (-> icm2c.c!).
 */

#if defined(ND_FUN_DEC) || defined(ICM_ALL)
ICM_DEF( ND_FUN_DEC, TRACE_NONE)
  ICM_ID( name)
  ICM_NT( rettype_NT)
  ICM_INT( vararg_cnt)
  ICM_VARANY( (3*vararg_cnt), vararg)
ICM_END( ND_FUN_DEC, (name, rettype_NT, vararg_cnt, vararg))
#endif

#if defined(ND_FUN_AP) || defined(ICM_ALL)
ICM_DEF( ND_FUN_AP, TRACE_FUN)
  ICM_ID( name)
  ICM_ID( retname)
  ICM_INT( vararg_cnt)
  ICM_VARANY( (2*vararg_cnt), vararg)
ICM_END( ND_FUN_AP, (name, retname, vararg_cnt, vararg))
#endif

#if defined(ND_FUN_RET) || defined(ICM_ALL)
ICM_DEF( ND_FUN_RET, TRACE_FUN)
  ICM_ID( retname)
  ICM_INT( vararg_cnt)
  ICM_VARANY( (3*vararg_cnt), vararg)
ICM_END( ND_FUN_RET, (retname, vararg_cnt, vararg))
#endif


#ifdef TAGGED_ARRAYS


#if defined(ND_OBJDEF) || defined(ICM_ALL)
ICM_DEF( ND_OBJDEF, TRACE_NONE)
  ICM_NT( var_NT)
  ICM_ID( basetype)
  ICM_INT( sdim)
  ICM_VARINT( sdim, shp)
ICM_END( ND_OBJDEF, (var_NT, basetype, sdim, shp))
#endif

#if defined(ND_OBJDEF_EXTERN) || defined(ICM_ALL)
ICM_DEF( ND_OBJDEF_EXTERN, TRACE_NONE)
  ICM_NT( var_NT)
  ICM_ID( basetype)
  ICM_INT( sdim)
ICM_END( ND_OBJDEF_EXTERN, (var_NT, basetype, sdim))
#endif

#if defined(ND_DECL) || defined(ICM_ALL)
ICM_DEF( ND_DECL, TRACE_NONE)
  ICM_NT( var_NT)
  ICM_ID( basetype)
  ICM_INT( sdim)
  ICM_VARINT( sdim, shp)
ICM_END( ND_DECL, (var_NT, basetype, sdim, shp))
#endif

#if defined(ND_DECL_EXTERN) || defined(ICM_ALL)
ICM_DEF( ND_DECL_EXTERN, TRACE_NONE)
  ICM_NT( var_NT)
  ICM_ID( basetype)
  ICM_INT( sdim)
ICM_END( ND_DECL_EXTERN, (var_NT, basetype, sdim))
#endif

/* ND_DECL__DATA( ...) is a H-ICM */

/* ND_DECL__DESC( ...) is a H-ICM */

#if defined(ND_DECL__MIRROR) || defined(ICM_ALL)
ICM_DEF( ND_DECL__MIRROR, TRACE_NONE)
  ICM_NT( var_NT)
  ICM_INT( sdim)
  ICM_VARINT( sdim, shp)
ICM_END( ND_DECL__MIRROR, (var_NT, sdim, shp))
#endif

#if defined(ND_DECL__MIRROR_PARAM) || defined(ICM_ALL)
ICM_DEF( ND_DECL__MIRROR_PARAM, TRACE_NONE)
  ICM_NT( var_NT)
  ICM_INT( sdim)
  ICM_VARINT( sdim, shp)
ICM_END( ND_DECL__MIRROR_PARAM, (var_NT, sdim, shp))
#endif

#if defined(ND_DECL__MIRROR_EXTERN) || defined(ICM_ALL)
ICM_DEF( ND_DECL__MIRROR_EXTERN, TRACE_NONE)
  ICM_NT( var_NT)
  ICM_INT( sdim)
ICM_END( ND_DECL__MIRROR_EXTERN, (var_NT, sdim))
#endif


#if defined(ND_CHECK_REUSE) || defined(ICM_ALL)
ICM_DEF( ND_CHECK_REUSE, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_ID( copyfun)
ICM_END( ND_CHECK_REUSE, (to_NT, to_sdim, from_NT, from_sdim, copyfun))
#endif

/* ND_ALLOC( ...) is a H-ICM */

/* ND_ALLOC__DATA( ...) is a H-ICM */

/* ND_ALLOC__DESC( ...) is a H-ICM */


/* ND_SET__RC( ...) is a H-ICM */

#if defined(ND_SET__SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_SET__SHAPE, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( dim)
  ICM_VARANY( dim, shp_ANY)
ICM_END( ND_SET__SHAPE, (to_NT, dim, shp_ANY))
#endif


#if defined(ND_REFRESH__MIRROR) || defined(ICM_ALL)
ICM_DEF( ND_REFRESH__MIRROR, TRACE_NONE)
  ICM_NT( var_NT)
  ICM_INT( sdim)
ICM_END( ND_REFRESH__MIRROR, (var_NT, sdim))
#endif

#if defined(ND_CHECK__MIRROR) || defined(ICM_ALL)
ICM_DEF( ND_CHECK__MIRROR, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
ICM_END( ND_CHECK__MIRROR, (to_NT, to_sdim, from_NT, from_sdim))
#endif


#if defined(ND_ASSIGN) || defined(ICM_ALL)
ICM_DEF( ND_ASSIGN, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_ID( copyfun)
ICM_END( ND_ASSIGN, (to_NT, to_sdim, from_NT, from_sdim, copyfun))
#endif

/* ASSIGN__DATA( ...) is a H-ICM */

#if defined(ND_ASSIGN__DESC) || defined(ICM_ALL)
ICM_DEF( ND_ASSIGN__DESC, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_NT( from_NT)
ICM_END( ND_ASSIGN__DESC, (to_NT, from_NT))
#endif

#if defined(ND_UPDATE__DESC) || defined(ICM_ALL)
ICM_DEF( ND_UPDATE__DESC, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
ICM_END( ND_UPDATE__DESC, (to_NT, to_sdim, from_NT, from_sdim))
#endif

#if defined(ND_UPDATE__MIRROR) || defined(ICM_ALL)
ICM_DEF( ND_UPDATE__MIRROR, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
ICM_END( ND_UPDATE__MIRROR, (to_NT, to_sdim, from_NT, from_sdim))
#endif


#if defined(ND_COPY) || defined(ICM_ALL)
ICM_DEF( ND_COPY, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_ID( copyfun)
ICM_END( ND_COPY, (to_NT, to_sdim, from_NT, from_sdim, copyfun))
#endif

/* COPY__DATA( ...) is a H-ICM */

#if defined(ND_COPY__SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_COPY__SHAPE, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
ICM_END( ND_COPY__SHAPE, (to_NT, to_sdim, from_NT, from_sdim))
#endif

#if defined(ND_MAKE_UNIQUE) || defined(ICM_ALL)
ICM_DEF( ND_MAKE_UNIQUE, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_ID( copyfun)
ICM_END( ND_MAKE_UNIQUE, (to_NT, to_sdim, from_NT, from_sdim, copyfun))
#endif


#if defined(ND_CREATE__ARRAY__DIM) || defined(ICM_ALL)
ICM_DEF( ND_CREATE__ARRAY__DIM, TRACE_NONE)
  ICM_INT( dim)
  ICM_INT( val_size)
  ICM_VARANY( val_size, vals_ANY)
ICM_END( ND_CREATE__ARRAY__DIM, (dim, val_size, vals_ANY))
#endif

#if defined(ND_CREATE__ARRAY__SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_CREATE__ARRAY__SHAPE, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_INT( dim)
  ICM_VARINT( dim, shp)
  ICM_INT( val_size)
  ICM_VARANY( val_size, vals_ANY)
  ICM_INT( val0_sdim)
ICM_END( ND_CREATE__ARRAY__SHAPE, (to_NT, to_sdim, dim, shp,
                                   val_size, vals_ANY, val0_sdim))
#endif

#if defined(ND_CREATE__ARRAY__DATA) || defined(ICM_ALL)
ICM_DEF( ND_CREATE__ARRAY__DATA, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_INT( val_size)
  ICM_VARANY( val_size, vals_ANY)
  ICM_ID( copyfun)
ICM_END( ND_CREATE__ARRAY__DATA, (to_NT, to_sdim, val_size, vals_ANY, copyfun))
#endif


#if defined(ND_PRF_SHAPE__DATA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_SHAPE__DATA, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
ICM_END( ND_PRF_SHAPE__DATA, (to_NT, to_sdim, from_NT, from_sdim))
#endif

#if defined(ND_PRF_RESHAPE__SHAPE_id) || defined(ICM_ALL)
ICM_DEF( ND_PRF_RESHAPE__SHAPE_id, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( shp_NT)
ICM_END( ND_PRF_RESHAPE__SHAPE_id, (to_NT, to_sdim, shp_NT))
#endif

#if defined(ND_PRF_RESHAPE__SHAPE_arr) || defined(ICM_ALL)
ICM_DEF( ND_PRF_RESHAPE__SHAPE_arr, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_INT( shp_size)
  ICM_VARANY( shp_size, shp_ANY)
ICM_END( ND_PRF_RESHAPE__SHAPE_arr, (to_NT, to_sdim, shp_size, shp_ANY))
#endif

#if defined(ND_PRF_SEL__SHAPE_id) || defined(ICM_ALL)
ICM_DEF( ND_PRF_SEL__SHAPE_id, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_NT( idx_NT)
ICM_END( ND_PRF_SEL__SHAPE_id, (to_NT, to_sdim, from_NT, from_sdim, idx_NT))
#endif

#if defined(ND_PRF_SEL__SHAPE_arr) || defined(ICM_ALL)
ICM_DEF( ND_PRF_SEL__SHAPE_arr, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_INT( idx_size)
  ICM_VARANY( idx_size, idxs_ANY)
ICM_END( ND_PRF_SEL__SHAPE_arr, (to_NT, to_sdim, from_NT, from_sdim,
                                 idx_size, idxs_ANY))
#endif

#if defined(ND_PRF_SEL__DATA_id) || defined(ICM_ALL)
ICM_DEF( ND_PRF_SEL__DATA_id, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_NT( idx_NT)
  ICM_INT( idx_size)
  ICM_ID( copyfun)
ICM_END( ND_PRF_SEL__DATA_id, (to_NT, to_sdim, from_NT, from_sdim,
                               idx_NT, idx_size, copyfun))
#endif

#if defined(ND_PRF_SEL__DATA_arr) || defined(ICM_ALL)
ICM_DEF( ND_PRF_SEL__DATA_arr, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_INT( idx_size)
  ICM_VARANY( idx_size, idxs_ANY)
  ICM_ID( copyfun)
ICM_END( ND_PRF_SEL__DATA_arr, (to_NT, to_sdim, from_NT, from_sdim,
                                idx_size, idxs_ANY, copyfun))
#endif

#if defined(ND_PRF_MODARRAY__DATA_id) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY__DATA_id, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_NT( idx_NT)
  ICM_INT( idx_size)
  ICM_ANY( val_ANY)
  ICM_ID( copyfun)
ICM_END( ND_PRF_MODARRAY__DATA_id, (to_NT, to_sdim, from_NT, from_sdim,
                                    idx_NT, idx_size, val_ANY, copyfun))
#endif

#if defined(ND_PRF_MODARRAY__DATA_arr) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY__DATA_arr, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_INT( idx_size)
  ICM_VARANY( idx_size, idxs_ANY)
  ICM_ANY( val_ANY)
  ICM_ID( copyfun)
ICM_END( ND_PRF_MODARRAY__DATA_arr, (to_NT, to_sdim, from_NT, from_sdim,
                                     idx_size, idxs_ANY, val_ANY, copyfun))
#endif

#if defined(ND_PRF_IDX_SEL__SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_PRF_IDX_SEL__SHAPE, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_ANY( idx_ANY)
ICM_END( ND_PRF_IDX_SEL__SHAPE, (to_NT, to_sdim, from_NT, from_sdim, idx_ANY))
#endif

#if defined(ND_PRF_IDX_SEL__DATA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_IDX_SEL__DATA, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_ANY( idx_ANY)
  ICM_ID( copyfun)
ICM_END( ND_PRF_IDX_SEL__DATA, (to_NT, to_sdim, from_NT, from_sdim,
                                idx_ANY, copyfun))
#endif

#if defined(ND_PRF_IDX_MODARRAY__DATA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_IDX_MODARRAY__DATA, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_ANY( idx_ANY)
  ICM_ANY( val_ANY)
  ICM_ID( copyfun)
ICM_END( ND_PRF_IDX_MODARRAY__DATA, (to_NT, to_sdim, from_NT, from_sdim,
                                     idx_ANY, val_ANY, copyfun))
#endif

#if defined(ND_PRF_TAKE__SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_PRF_TAKE__SHAPE, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_ANY( cnt_ANY)
ICM_END( ND_PRF_TAKE__SHAPE, (to_NT, to_sdim, from_NT, from_sdim, cnt_ANY))
#endif

#if defined(ND_PRF_TAKE__DATA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_TAKE__DATA, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_ANY( cnt_ANY)
  ICM_ID( copyfun)
ICM_END( ND_PRF_TAKE__DATA, (to_NT, to_sdim, from_NT, from_sdim, cnt_ANY,
                             copyfun))
#endif

#if defined(ND_PRF_DROP__SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_PRF_DROP__SHAPE, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_ANY( cnt_ANY)
ICM_END( ND_PRF_DROP__SHAPE, (to_NT, to_sdim, from_NT, from_sdim, cnt_ANY))
#endif

#if defined(ND_PRF_DROP__DATA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_DROP__DATA, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from_NT)
  ICM_INT( from_sdim)
  ICM_ANY( cnt_ANY)
  ICM_ID( copyfun)
ICM_END( ND_PRF_DROP__DATA, (to_NT, to_sdim, from_NT, from_sdim, cnt_ANY,
                             copyfun))
#endif

#if defined(ND_PRF_CAT__SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_PRF_CAT__SHAPE, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( from1_NT)
  ICM_INT( from1_sdim)
  ICM_NT( from2_NT)
  ICM_INT( from2_sdim)
ICM_END( ND_PRF_CAT__SHAPE, (to_NT, to_sdim,
                             from1_NT, from1_sdim, from2_NT, from2_sdim))
#endif


#if defined(ND_VECT2OFFSET) || defined(ICM_ALL)
ICM_DEF( ND_VECT2OFFSET, TRACE_PRF)
  ICM_NT( off_NT)
  ICM_INT( from_size)
  ICM_NT( from_NT)
  ICM_INT( shp_size)
  ICM_VARANY( shp_size, shp_ANY)
ICM_END( ND_VECT2OFFSET, (off_NT, from_size, from_NT, shp_size, shp_ANY))
#endif

#if defined(ND_IDXS2OFFSET) || defined(ICM_ALL)
ICM_DEF( ND_IDXS2OFFSET, TRACE_PRF)
  ICM_NT( off_NT)
  ICM_INT( idxs_size)
  ICM_VARNT( idxs_size, idxs_NT)
  ICM_INT( shp_size)
  ICM_VARANY( shp_size, shp_ANY)
ICM_END( ND_IDXS2OFFSET, (off_NT, idxs_size, idxs_NT, shp_size, shp_ANY))
#endif


#else /* TAGGED_ARRAYS */


#if defined(ND_KS_DECL_GLOBAL_ARRAY) || defined(ICM_ALL)
ICM_DEF( ND_KS_DECL_GLOBAL_ARRAY, TRACE_NONE)
  ICM_ID(basetype)
  ICM_ID(name)
  ICM_INT(dim)
  ICM_VARANY( dim, s)
ICM_END( ND_KS_DECL_GLOBAL_ARRAY, (basetype, name, dim, s))
#endif

#if defined(ND_KD_DECL_EXTERN_ARRAY) || defined(ICM_ALL)
ICM_DEF( ND_KD_DECL_EXTERN_ARRAY, TRACE_NONE)
  ICM_ID(basetype)
  ICM_ID(name)
  ICM_INT(dim)
ICM_END( ND_KD_DECL_EXTERN_ARRAY, (basetype, name, dim))
#endif

#if defined(ND_KS_DECL_ARRAY) || defined(ICM_ALL)
ICM_DEF( ND_KS_DECL_ARRAY, TRACE_NONE)
  ICM_ID(basetype)
  ICM_ID(name)
  ICM_INT(dim)
  ICM_VARANY( dim, s)
ICM_END( ND_KS_DECL_ARRAY, (basetype, name, dim, s))
#endif

#if defined(ND_KS_DECL_ARRAY_ARG) || defined(ICM_ALL)
ICM_DEF( ND_KS_DECL_ARRAY_ARG, TRACE_NONE)
  ICM_ID(name)
  ICM_INT(dim)
  ICM_VARANY( dim, s)
ICM_END( ND_KS_DECL_ARRAY_ARG, (name, dim, s))
#endif


#if defined(ND_CREATE_CONST_ARRAY_S) || defined(ICM_ALL)
ICM_DEF( ND_CREATE_CONST_ARRAY_S, TRACE_NONE)
  ICM_ID(name)
  ICM_INT(len)
  ICM_VARANY(len, s)
ICM_END( ND_CREATE_CONST_ARRAY_S, (name, len, s))
#endif

#if defined(ND_CREATE_CONST_ARRAY_H) || defined(ICM_ALL)
ICM_DEF( ND_CREATE_CONST_ARRAY_H, TRACE_NONE)
  ICM_ID(name)
  ICM_ID(copyfun)
  ICM_INT(len)
  ICM_VARANY(len, A)
ICM_END( ND_CREATE_CONST_ARRAY_H, (name, copyfun, len, A))
#endif

#if defined(ND_CREATE_CONST_ARRAY_A) || defined(ICM_ALL)
ICM_DEF( ND_CREATE_CONST_ARRAY_A, TRACE_NONE)
  ICM_ID(name)
  ICM_INT(len2)
  ICM_INT(len1)
  ICM_VARANY( len1, A)
ICM_END( ND_CREATE_CONST_ARRAY_A, (name, len2, len1, A))
#endif


#if defined(ND_KD_SEL_CxA_S) || defined(ICM_ALL)
ICM_DEF( ND_KD_SEL_CxA_S, TRACE_PRF)
  ICM_ID(a)
  ICM_ID(res)
  ICM_INT(dim)
  ICM_VARANY( dim, vi)
ICM_END( ND_KD_SEL_CxA_S, (a, res, dim, vi))
#endif

#if defined(ND_KD_SEL_VxA_S) || defined(ICM_ALL)
ICM_DEF( ND_KD_SEL_VxA_S, TRACE_PRF)
  ICM_ID(a)
  ICM_ID(res)
  ICM_INT(dim)
  ICM_ID( v)
ICM_END( ND_KD_SEL_VxA_S, (a, res, dim, v))
#endif

#if defined(ND_KD_SEL_CxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_SEL_CxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_ID(a)
  ICM_ID(res)
  ICM_INT(dimv)
  ICM_VARANY( dimv, vi)
ICM_END( ND_KD_SEL_CxA_A, (dima, a, res, dimv, vi))
#endif

#if defined(ND_KD_SEL_VxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_SEL_VxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_ID(a)
  ICM_ID(res)
  ICM_INT(dimv)
  ICM_ID( v)
ICM_END( ND_KD_SEL_VxA_A, (dima, a, res, dimv, v))
#endif

#if defined(ND_KD_TAKE_CxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_TAKE_CxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_ID(a)
  ICM_ID(res)
  ICM_INT(dimv)
  ICM_VARANY( dimv, vi)
ICM_END( ND_KD_TAKE_CxA_A, (dima, a, res, dimv, vi))
#endif

#if defined(ND_KD_DROP_CxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_DROP_CxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_ID(a)
  ICM_ID(res)
  ICM_INT(dimv)
  ICM_VARANY( dimv, vi)
ICM_END( ND_KD_DROP_CxA_A, (dima, a, res, dimv, vi))
#endif

#if defined(ND_KD_CAT_SxAxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_CAT_SxAxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_VARANY( 2,ar)
  ICM_ID(res)
  ICM_INT(catdim)
ICM_END( ND_KD_CAT_SxAxA_A, (dima, ar, res, catdim))
#endif

#if defined(ND_KD_ROT_CxSxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_ROT_CxSxA_A, TRACE_PRF)
  ICM_INT( rotdim)
  ICM_VARANY( 1, numstr)
  ICM_INT(dima)
  ICM_ID(a)
  ICM_ID(res)
ICM_END( ND_KD_ROT_CxSxA_A, (rotdim, numstr, dima, a, res))
#endif


#if defined(ND_PRF_MODARRAY_AxCxS) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxCxS, TRACE_PRF)
  ICM_ID( res_btype)
  ICM_INT( dimres)
  ICM_ID( res)
  ICM_ID( old)
  ICM_VARANY( 1, value)
  ICM_INT( dimv)
  ICM_VARANY( dimv, vi)
ICM_END( ND_PRF_MODARRAY_AxCxS, (res_btype, dimres, res, old, value, dimv, vi))
#endif

#if defined(ND_PRF_MODARRAY_AxVxS) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxVxS, TRACE_PRF)
  ICM_ID(res_btype)
  ICM_INT(dimres)
  ICM_ID(res)
  ICM_ID(old)
  ICM_VARANY( 1, value)
  ICM_INT(dim)
  ICM_ID(v)
ICM_END( ND_PRF_MODARRAY_AxVxS, (res_btype, dimres, res, old, value, dim, v))
#endif

#if defined(ND_PRF_MODARRAY_AxCxA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxCxA, TRACE_PRF)
  ICM_ID(res_btype)
  ICM_INT(dimres)
  ICM_ID(res)
  ICM_ID(old)
  ICM_ID(val)
  ICM_INT(dimv)
  ICM_VARANY( dimv, vi)
ICM_END( ND_PRF_MODARRAY_AxCxA, (res_btype, dimres, res, old, val, dimv, vi))
#endif

#if defined(ND_PRF_MODARRAY_AxVxA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxVxA, TRACE_PRF)
  ICM_ID(res_btype)
  ICM_INT(dimres)
  ICM_ID(res)
  ICM_ID(old)
  ICM_ID(val)
  ICM_INT(dim)
  ICM_ID( v)
ICM_END( ND_PRF_MODARRAY_AxVxA, (res_btype, dimres, res, old, val, dim, v))
#endif


#if defined(ND_KS_VECT2OFFSET) || defined(ICM_ALL)
ICM_DEF( ND_KS_VECT2OFFSET, TRACE_PRF)
  ICM_ID( off_name)
  ICM_ID( arr_name)
  ICM_INT( dim)
  ICM_INT( dims)
  ICM_VARANY( dims, shp)
ICM_END( ND_KS_VECT2OFFSET, (off_name, arr_name, dim, dims, shp))
#endif

#if defined(ND_IDXS2OFFSET) || defined(ICM_ALL)
ICM_DEF( ND_IDXS2OFFSET, TRACE_PRF)
  ICM_ID( off)
  ICM_INT( idxs_size)
  ICM_VARID( idxs_size, idxs)
  ICM_INT( shp_size)
  ICM_VARANY( shp_size, shp)
ICM_END( ND_IDXS2OFFSET, (off, idxs_size, idxs, shp_size, shp))
#endif


#endif /* TAGGED_ARRAYS */


/*
 * ICMs for compilation of new with-loop
 */

#ifdef TAGGED_ARRAYS

#if defined(ND_WL_GENARRAY__SHAPE_id) || defined(ICM_ALL)
ICM_DEF( ND_WL_GENARRAY__SHAPE_id, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( shp_NT)
  ICM_NT( val_NT)
  ICM_INT( val_sdim)
ICM_END( ND_WL_GENARRAY__SHAPE_id, (to_NT, to_sdim, shp_NT, val_NT, val_sdim))
#endif

#if defined(ND_WL_GENARRAY__SHAPE_arr) || defined(ICM_ALL)
ICM_DEF( ND_WL_GENARRAY__SHAPE_arr, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_INT( shp_size)
  ICM_VARANY( shp_size, shp_ANY)
  ICM_NT( val_NT)
  ICM_INT( val_sdim)
ICM_END( ND_WL_GENARRAY__SHAPE_arr, (to_NT, to_sdim, shp_size, shp_ANY,
                                     val_NT, val_sdim))
#endif

#endif /* TAGGED_ARRAYS */

#if defined(WL_BEGIN__OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_BEGIN__OFFSET, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
ICM_END( WL_BEGIN__OFFSET, (to_NT, to_sdim, idx_vec_NT, dims))
#endif

#if defined(WL_BEGIN) || defined(ICM_ALL)
ICM_DEF( WL_BEGIN, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
ICM_END( WL_BEGIN, (to_NT, to_sdim, idx_vec_NT, dims))
#endif

#if defined(WL_END__OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_END__OFFSET, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
ICM_END( WL_END__OFFSET, (to_NT, to_sdim, idx_vec_NT, dims))
#endif

#if defined(WL_END) || defined(ICM_ALL)
ICM_DEF( WL_END, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
ICM_END( WL_END, (to_NT, to_sdim, idx_vec_NT, dims))
#endif

#if defined(WL_INIT_OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_INIT_OFFSET, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
ICM_END( WL_INIT_OFFSET, (to_NT, to_sdim, idx_vec_NT, dims))
#endif

#if defined(WL_ASSIGN) || defined(ICM_ALL)
ICM_DEF( WL_ASSIGN, TRACE_NONE)
  ICM_NT( val_NT)
  ICM_INT( val_sdim)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
  ICM_VARNT( dims, idxs_scl_NT)
  ICM_ID( copyfun)
ICM_END( WL_ASSIGN, (val_NT, val_sdim, to_NT, to_sdim,
                     idx_vec_NT, dims, idxs_scl_NT, copyfun))
#endif

#if defined(WL_ASSIGN__INIT) || defined(ICM_ALL)
ICM_DEF( WL_ASSIGN__INIT, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
  ICM_VARNT( dims, idxs_scl_NT)
ICM_END( WL_ASSIGN__INIT, (to_NT, to_sdim, idx_vec_NT, dims, idxs_scl_NT))
#endif

#if defined(WL_ASSIGN__COPY) || defined(ICM_ALL)
ICM_DEF( WL_ASSIGN__COPY, TRACE_NONE)
  ICM_NT( from_NT)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
  ICM_VARNT( dims, idxs_scl_NT)
  ICM_ID( copyfun)
ICM_END( WL_ASSIGN__COPY, (from_NT, to_NT, to_sdim, idx_vec_NT, dims, idxs_scl_NT,
                           copyfun))
#endif

#if defined(WL_FOLD__OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_FOLD__OFFSET, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
  ICM_VARNT( dims, idxs_scl_NT)
ICM_END( WL_FOLD__OFFSET, (to_NT, to_sdim, idx_vec_NT, dims, idxs_scl_NT))
#endif

#if defined(WL_FOLD) || defined(ICM_ALL)
ICM_DEF( WL_FOLD, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
  ICM_VARNT( dims, idxs_scl_NT)
ICM_END( WL_FOLD, (to_NT, to_sdim, idx_vec_NT, dims, idxs_scl_NT))
#endif

#if defined(WL_ADJUST_OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_ADJUST_OFFSET, TRACE_NONE)
  ICM_INT( dim)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
  ICM_VARNT( dims, idxs_scl_NT)
ICM_END( WL_ADJUST_OFFSET, (dim, to_NT, to_sdim, idx_vec_NT, dims, idxs_scl_NT))
#endif

#if defined(WL_SET_OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_SET_OFFSET, TRACE_NONE)
  ICM_INT( dim)
  ICM_INT( first_block_dim)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_NT( idx_vec_NT)
  ICM_INT( dims)
  ICM_VARNT( dims, idxs_scl_NT)
ICM_END( WL_SET_OFFSET, (dim, first_block_dim, to_NT, to_sdim,
                         idx_vec_NT, dims, idxs_scl_NT))
#endif



/*
 * ICMs for compilation of multi-threaded applications
 */

#if defined(MT_SPMD_FUN_DEC) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_FUN_DEC, TRACE_NONE)
  ICM_ID( name)
  ICM_ID( from)
  ICM_INT( vararg_cnt)
  ICM_VARANY( (3*vararg_cnt), vararg)
ICM_END( MT_SPMD_FUN_DEC, (name, from, vararg_cnt, vararg))
#endif

#if defined(MT_SPMD_FUN_RET) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_FUN_RET, TRACE_NONE)
  ICM_INT( barrier_id)
  ICM_INT( vararg_cnt)
  ICM_VARANY( (2*vararg_cnt), vararg)
ICM_END( MT_SPMD_FUN_RET, (barrier_id, vararg_cnt, vararg))
#endif

#if defined(MT_START_SYNCBLOCK) || defined(ICM_ALL)
ICM_DEF( MT_START_SYNCBLOCK, TRACE_NONE)
  ICM_INT( barrier_id)
  ICM_INT( vararg_cnt)
  ICM_VARANY( (3*vararg_cnt), vararg)
ICM_END( MT_START_SYNCBLOCK, (barrier_id, vararg_cnt, vararg))
#endif

#if defined(MT_SYNC_NONFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_NONFOLD, TRACE_NONE)
  ICM_INT( barrier_id)
ICM_END( MT_SYNC_NONFOLD, (barrier_id))
#endif

#if defined(MT_SYNC_FOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_FOLD, TRACE_NONE)
  ICM_INT( barrier_id)
  ICM_INT( vararg_cnt)
  ICM_VARANY( (4*vararg_cnt), vararg)
ICM_END( MT_SYNC_FOLD, (barrier_id, vararg_cnt, vararg))
#endif

#if defined(MT_SYNC_ONEFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_ONEFOLD, TRACE_NONE)
  ICM_INT( barrier_id)
  ICM_ID( foldtype)
  ICM_ID( accu_var)
  ICM_ID( tmp_var)
  ICM_ID( foldop)
ICM_END( MT_SYNC_ONEFOLD, (barrier_id, foldtype, accu_var, tmp_var, foldop))
#endif

#if defined(MT_SYNC_ONEFOLD_NONFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_ONEFOLD_NONFOLD, TRACE_NONE)
  ICM_ID( foldtype)
  ICM_ID( accu_var)
  ICM_ID( tmp_var)
  ICM_ID( foldop)
ICM_END( MT_SYNC_ONEFOLD_NONFOLD, (foldtype, accu_var, tmp_var, foldop))
#endif

#if defined(MT_SYNC_FOLD_NONFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_FOLD_NONFOLD, TRACE_NONE)
  ICM_INT( vararg_cnt)
  ICM_VARANY( (4*vararg_cnt), vararg)
ICM_END( MT_SYNC_FOLD_NONFOLD, (vararg_cnt, vararg))
#endif

#if defined(MT_MASTER_SEND_FOLDRESULTS) || defined(ICM_ALL)
ICM_DEF( MT_MASTER_SEND_FOLDRESULTS, TRACE_NONE)
  ICM_INT( foldargs_cnt)
  ICM_VARANY( (2*foldargs_cnt), foldargs)
ICM_END( MT_MASTER_SEND_FOLDRESULTS, (foldargs_cnt, foldargs))
#endif

#if defined(MT_MASTER_RECEIVE_FOLDRESULTS) || defined(ICM_ALL)
ICM_DEF( MT_MASTER_RECEIVE_FOLDRESULTS, TRACE_NONE)
  ICM_INT( foldargs_cnt)
  ICM_VARANY( (2*foldargs_cnt), foldargs)
ICM_END( MT_MASTER_RECEIVE_FOLDRESULTS, (foldargs_cnt, foldargs))
#endif

#if defined(MT_MASTER_SEND_SYNCARGS) || defined(ICM_ALL)
ICM_DEF( MT_MASTER_SEND_SYNCARGS, TRACE_NONE)
  ICM_INT( syncargs_cnt)
  ICM_VARANY( syncargs_cnt, syncargs)
ICM_END( MT_MASTER_SEND_SYNCARGS, (syncargs_cnt, syncargs))
#endif

#if defined(MT_MASTER_RECEIVE_SYNCARGS) || defined(ICM_ALL)
ICM_DEF( MT_MASTER_RECEIVE_SYNCARGS, TRACE_NONE)
  ICM_INT( syncargs_cnt)
  ICM_VARANY( syncargs_cnt, syncargs)
ICM_END( MT_MASTER_RECEIVE_SYNCARGS, (syncargs_cnt, syncargs))
#endif

#if defined(MT_SPMD_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_BEGIN, TRACE_NONE)
  ICM_ID( name)
ICM_END( MT_SPMD_BEGIN, (name))
#endif

#if defined(MT_SPMD_ALTSEQ) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_ALTSEQ, TRACE_NONE)
  ICM_ID( name)
ICM_END( MT_SPMD_ALTSEQ, (name))
#endif

#if defined(MT_SPMD_STATIC_MODE_END) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_END, TRACE_NONE)
  ICM_ID( name)
ICM_END( MT_SPMD_END, (name))
#endif


#if defined(MT_SPMD_SETUP) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_SETUP, TRACE_NONE)
  ICM_ID( name)
  ICM_INT( vararg_cnt)
  ICM_VARANY( (3*vararg_cnt), vararg)
ICM_END( MT_SPMD_SETUP, (name, vararg_cnt, vararg))
#endif

#if defined(MT_SPMD_PRESET) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_PRESET, TRACE_NONE)
  ICM_ID( name)
  ICM_INT( vararg_cnt)
  ICM_VARANY( (2*vararg_cnt), vararg)
ICM_END( MT_SPMD_PRESET, (name, vararg_cnt, vararg))
#endif

#if defined(MT_ADJUST_SCHEDULER__OFFSET) || defined(ICM_ALL)
ICM_DEF( MT_ADJUST_SCHEDULER__OFFSET, TRACE_NONE)
  ICM_NT( to_NT)
  ICM_INT( to_sdim)
  ICM_INT( current_dim)
  ICM_ANY( lower)
  ICM_ANY( upper)
  ICM_ANY( unrolling)
ICM_END( MT_ADJUST_SCHEDULER__OFFSET, (to_NT, to_sdim, current_dim,
                                       lower, upper, unrolling))
#endif


/*
 * ICMs for implementing scheduling strategies
 */

#if defined(MT_SCHEDULER_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_BEGIN, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_INT( dim)
  ICM_VARANY( (2*dim), vararg)
ICM_END( MT_SCHEDULER_BEGIN, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_END, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_INT( dim)
  ICM_VARANY( (2*dim), vararg)
ICM_END( MT_SCHEDULER_END, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_INIT, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_INT( dim)
  ICM_VARANY( (2*dim), vararg)
ICM_END( MT_SCHEDULER_INIT, (sched_id, dim, vararg))
#endif



#if defined(MT_SCHEDULER_Block_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Block_BEGIN, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_INT( dim)
  ICM_VARANY( (3*dim), vararg)
ICM_END( MT_SCHEDULER_Block_BEGIN, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Block_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Block_END, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_INT( dim)
  ICM_VARANY( (3*dim), vararg)
ICM_END( MT_SCHEDULER_Block_END, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Block_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Block_INIT, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_INT( dim)
  ICM_VARANY( (3*dim), vararg)
ICM_END( MT_SCHEDULER_Block_INIT, (sched_id, dim, vararg))
#endif



#if defined(MT_SCHEDULER_BlockVar_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_BlockVar_BEGIN, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_INT( dim)
  ICM_VARANY( (3*dim), vararg)
ICM_END( MT_SCHEDULER_BlockVar_BEGIN, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_BlockVar_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_BlockVar_END, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_INT( dim)
  ICM_VARANY( (3*dim), vararg)
ICM_END( MT_SCHEDULER_BlockVar_END, (sched_id, dim, vararg))
#endif

#if defined(MT_SCHEDULER_BlockVar_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_BlockVar_INIT, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_INT( dim)
  ICM_VARANY( (3*dim), vararg)
ICM_END( MT_SCHEDULER_BlockVar_INIT, (sched_id, dim, vararg))
#endif



#if defined(MT_SCHEDULER_Static_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Static_BEGIN, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_ID( ts_name)
  ICM_INT( ts_dims)
  ICM_INT( ts_arg_num)
  ICM_VARANY( (ts_arg_num), ts_args)
  ICM_INT( dim)
  ICM_VARANY( (4*dim), vararg)
ICM_END( MT_SCHEDULER_Static_BEGIN, (sched_id, ts_name,
                                     ts_dims, ts_arg_num, ts_args, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Static_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Static_END, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_ID( ts_name)
  ICM_INT( ts_dims)
  ICM_INT( ts_arg_num)
  ICM_VARANY( (ts_arg_num), ts_args)
  ICM_INT( dim)
  ICM_VARANY( (4*dim), vararg)
ICM_END( MT_SCHEDULER_Static_END, (sched_id, ts_name,
                                   ts_dims, ts_arg_num, ts_args, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Static_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Static_INIT, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_ID( ts_name)
  ICM_INT( ts_dims)
  ICM_INT( ts_arg_num)
  ICM_VARANY( (ts_arg_num), ts_args)
  ICM_INT( dim)
  ICM_VARANY( (4*dim), vararg)
ICM_END( MT_SCHEDULER_Static_INIT, (sched_id, ts_name,
                                    ts_dims, ts_arg_num, ts_args, dim, vararg))
#endif



#if defined(MT_SCHEDULER_Self_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Self_BEGIN, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_ID( first_task)
  ICM_ID( ts_name)
  ICM_INT( ts_dims)
  ICM_INT( ts_arg_num)
  ICM_VARANY( (ts_arg_num), ts_args)
  ICM_INT( dim)
  ICM_VARANY( (4*dim), vararg)
ICM_END( MT_SCHEDULER_Self_BEGIN, (sched_id, first_task, ts_name,
                                   ts_dims, ts_arg_num, ts_args, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Self_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Self_END, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_ID( first_task)
  ICM_ID( ts_name)
  ICM_INT( ts_dims)
  ICM_INT( ts_arg_num)
  ICM_VARANY( (ts_arg_num), ts_args)
  ICM_INT( dim)
  ICM_VARANY( (4*dim), vararg)
ICM_END( MT_SCHEDULER_Self_END, (sched_id, first_task, ts_name,
                                 ts_dims, ts_arg_num, ts_args, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Self_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Self_INIT, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_ID( first_task)
  ICM_ID( ts_name)
  ICM_INT( ts_dims)
  ICM_INT( ts_arg_num)
  ICM_VARANY( (ts_arg_num), ts_args)
  ICM_INT( dim)
  ICM_VARANY( (4*dim), vararg)
ICM_END( MT_SCHEDULER_Self_INIT, (sched_id, first_task, ts_name,
                                  ts_dims, ts_arg_num, ts_args, dim, vararg))
#endif



#if defined(MT_SCHEDULER_Affinity_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Affinity_BEGIN, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_ID( ts_name)
  ICM_INT( ts_dims)
  ICM_INT( ts_arg_num)
  ICM_VARANY( (ts_arg_num), ts_args)
  ICM_INT( dim)
  ICM_VARANY( (4*dim), vararg)
ICM_END( MT_SCHEDULER_Affinity_BEGIN, (sched_id, ts_name, ts_dims,
                                       ts_arg_num, ts_args, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Affinity_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Affinity_END, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_ID( ts_name)
  ICM_INT( ts_dims)
  ICM_INT( ts_arg_num)
  ICM_VARANY( (ts_arg_num), ts_args)
  ICM_INT( dim)
  ICM_VARANY( (4*dim), vararg)
ICM_END( MT_SCHEDULER_Affinity_END, (sched_id, ts_name, ts_dims,
                                     ts_arg_num, ts_args, dim, vararg))
#endif

#if defined(MT_SCHEDULER_Affinity_INIT) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Affinity_INIT, TRACE_NONE)
  ICM_INT( sched_id)
  ICM_ID( ts_name)
  ICM_INT( ts_dims)
  ICM_INT( ts_arg_num)
  ICM_VARANY( (ts_arg_num), ts_args)
  ICM_INT( dim)
  ICM_VARANY( (4*dim), vararg)
ICM_END( MT_SCHEDULER_Affinity_INIT, (sched_id, ts_name, ts_dims,
                                      ts_arg_num, ts_args, dim, vararg))
#endif


#if defined(TYPE_ERROR) || defined(ICM_ALL)
ICM_DEF( TYPE_ERROR, TRACE_NONE)
  ICM_INT( cnt_to)
  ICM_VARANY( (cnt_to), to_ANY)
  ICM_STR( funname)
  ICM_INT( cnt_from)
  ICM_VARANY( (cnt_from), from_ANY)
ICM_END( TYPE_ERROR, (cnt_to, to_ANY, funname, cnt_from, from_ANY))
#endif
