/*
 *
 * $Log$
 * Revision 1.44  1998/06/24 10:36:59  dkr
 * WL_(NON)FOLD_BEGIN/END are now h-icms
 *
 * Revision 1.43  1998/06/23 12:49:48  cg
 * added implementations of scheduling ICMs
 * MT_SCHEDULER_Block_BEGIN and MT_SCHEDULER_Block_END
 *
 * Revision 1.42  1998/06/19 18:29:21  dkr
 * added WL_NONFOLD_END, WL_FOLD_END
 *
 * Revision 1.41  1998/06/09 16:46:19  dkr
 * changed signature of WL_NONFOLD_BEGIN, WL_FOLD_BEGIN
 *
 * Revision 1.40  1998/05/24 00:43:08  dkr
 * changed signature of some WL-ICMs
 *
 * Revision 1.39  1998/05/19 15:43:08  dkr
 * ICMs for fold changed
 *
 * Revision 1.38  1998/05/16 16:38:07  dkr
 * WL_END is now a h-icm
 *
 * Revision 1.37  1998/05/15 23:54:58  dkr
 * changed signature of WL_... macros
 *
 * Revision 1.36  1998/05/15 09:19:29  cg
 * added ICMs MT_SYNC_NONFOLD and MT_SYNC_ONEFOLD_NONFOLD
 *
 * Revision 1.35  1998/05/14 21:36:35  dkr
 * changed some WL-ICMs
 *
 * Revision 1.34  1998/05/13 14:48:03  cg
 * added ICM MT_SYNC_ONEFOLD
 *
 * Revision 1.33  1998/05/13 09:24:04  dkr
 * added new with-loop ICMs
 *
 * Revision 1.32  1998/05/13 07:15:14  cg
 * added ICMs for multi-threaded execution
 *
 * Revision 1.31  1998/05/12 13:27:48  dkr
 * added WL_FOLD... macros
 *
 * Revision 1.30  1998/05/07 16:22:07  dkr
 * changed signature of WL_BEGIN, WL_ASSIGN, WL_END
 *
 * Revision 1.29  1998/05/04 15:35:52  dkr
 * added WL_ASSIGN
 *
 * Revision 1.28  1998/05/03 13:09:02  dkr
 * added ICMs WL_BEGIN, WL_END
 *
 * Revision 1.27  1998/04/25 16:25:20  sbs
 *  new icm2c / BEtest mechanism implemented!
 *
 * Revision 1.26  1998/04/24 18:45:38  sbs
 * ICM_END corrected in ND_PRF_MODARRAY_AxCxA_CHECK_REUSE and ND_PRF_MODARRAY_AxCxA
 *
 * Revision 1.25  1996/08/04 14:40:12  sbs
 * modarray_AxVxA with and without reuse check inserted.
 *
 * Revision 1.24  1996/01/21  14:04:31  cg
 * added icm ND_CREATE_CONST_ARRAY_H
 *
 * Revision 1.23  1995/12/18  16:25:39  cg
 * ICMs ND_FUN_DEC, ND_FUN_AP and ND_FUN_RET modified
 * new ICMs ND_KS_DECL_GLOBAL_ARRAY and ND_KD_DECL_EXTERN_ARRAY for
 * arrays as global objects.
 *
 * Revision 1.22  1995/10/08  11:22:36  sbs
 * some bugs fixed
 *
 * Revision 1.21  1995/08/15  14:41:41  hw
 * added ICMs ND_PRF_MODARRAY_AxCxS_CHECK_REUSE, ND_PRF_MODARRAY_AxCxS,
 * ND_PRF_MODARRAY_AxCxA and  ND_PRF_MODARRAY_AxCxA_CHECK_REUSE
 *
 * Revision 1.20  1995/07/13  16:35:27  hw
 * - changed N_icm ND_BEGIN_FOLDPRF & ND_BEGIN_FOLDFUN
 *
 * Revision 1.19  1995/06/09  15:29:19  hw
 * changed PSI N_icm's (linenumber inserted)
 *
 * Revision 1.18  1995/06/08  18:32:08  hw
 * - changed args-name of ND_BEGIN_FOLDPRF & ND_BEGIN_FOLDFUN
 *
 * Revision 1.17  1995/06/07  13:36:53  hw
 * - exchanges N_icm ND_CREATE_CONST_ARRAY with ND_CREATE_CONST_ARRAY_S
 * - N_icm ND_CREATE_CONST_ARRAY_A (array out of arrays) inserted
 *
 * Revision 1.16  1995/06/02  08:48:13  hw
 * ND_BEGIN_FOLDPRF, ND_BEGIN_FOLDFUN and ND_END_FOLD inserted
 *
 * Revision 1.15  1995/05/24  15:28:01  sbs
 * inclusion of trace.h eliminated
 *
 * Revision 1.14  1995/05/24  13:58:31  sbs
 * ND_KS_DECL_ARRAY_ARG inserted
 *
 * Revision 1.13  1995/05/04  11:42:34  sbs
 * trf inserted in ICM-macros
 *
 * Revision 1.12  1995/04/27  12:57:05  sbs
 * WITH-LOOP ICM s inserted.
 *
 * Revision 1.11  1995/04/18  14:49:08  sbs
 * ND_CREATE_CONST_ARRAY modified; initial basic_type parameter eliminated
 *
 * Revision 1.10  1995/04/18  11:02:40  sbs
 * ND_KD_ROT_SxSxA_A eliminated
 *
 * Revision 1.9  1995/04/13  09:12:59  sbs
 * ND_KD_ROT_SxSxA_A inserted
 *
 * Revision 1.8  1995/04/12  15:15:34  sbs
 * ND_KD_ROT_SxSxA_A commented out
 *
 * Revision 1.7  1995/04/12  15:14:00  sbs
 * cat & rot inserted.
 *
 * Revision 1.6  1995/04/11  16:08:48  sbs
 * some minor bugs fixed
 *
 * Revision 1.5  1995/04/11  15:03:13  sbs
 * ND_FUN_[DEC/AP/RET] inserted
 *
 * Revision 1.4  1995/04/07  09:30:52  sbs
 * dima's inserted in psi*_A, take & drop
 *
 * Revision 1.3  1995/04/03  13:58:57  sbs
 * first "complete" version
 *
 * Revision 1.2  1995/03/31  13:57:34  sbs
 * ND_CREATE_CONST_ARRAY,ND_KS_ARG_ARRAY & ND_KS_RET_ARRAY inserted
 *
 * Revision 1.1  1995/03/10  17:26:51  sbs
 * Initial revision
 *
 *
 */

/*
 *
 * ATTENTION!! same variable names within different ICM-argument
 *   specifications should be of the same type even if they are in
 *   different ICM-specifications!!!!
 *   The reason for this restriction lies in the usage of
 *   static variables for them in icm2c.c and BEtest.c
 *   which has to be made in order to spare a second traversal
 *   of icm.data (-> icm2c.c!).
 * 
 * The following ICM's have extra arguments in the argument list
 * specified as second argument of ICM_END :
 *  - ND_FUN_RET : arg_info !
 */

#if defined(ND_FUN_DEC) || defined(ICM_ALL)
ICM_DEF( ND_FUN_DEC, NO_TRACE)
  ICM_STR(name)
  ICM_STR(rettype)
  ICM_INT(narg)
  ICM_VAR((3*narg), tyarg)
ICM_END( ND_FUN_DEC, (name, rettype, narg, tyarg))
#endif

#if defined(ND_FUN_AP) || defined(ICM_ALL)
ICM_DEF( ND_FUN_AP, TRACE_UDF)
  ICM_STR(name)
  ICM_STR(retname)
  ICM_INT(narg)
  ICM_VAR((2*narg), arg)
ICM_END( ND_FUN_AP, (name, retname, narg, arg))
#endif

#if defined(ND_FUN_RET) || defined(ICM_ALL)
ICM_DEF( ND_FUN_RET, TRACE_UDF)
  ICM_STR(retname)
  ICM_INT(narg)
  ICM_VAR((2*narg), arg)
ICM_END( ND_FUN_RET, (retname, narg, arg, arg_info))
#endif

#if defined(ND_CREATE_CONST_ARRAY_S) || defined(ICM_ALL)
ICM_DEF( ND_CREATE_CONST_ARRAY_S, NO_TRACE)
  ICM_STR(name)
  ICM_INT(dim)
  ICM_VAR(dim, s)
ICM_END( ND_CREATE_CONST_ARRAY_S, (name, dim, s))
#endif

#if defined(ND_CREATE_CONST_ARRAY_H) || defined(ICM_ALL)
ICM_DEF( ND_CREATE_CONST_ARRAY_H, NO_TRACE)
  ICM_STR(name)
  ICM_STR(copyfun)
  ICM_INT(dim)
  ICM_VAR(dim, A)
ICM_END( ND_CREATE_CONST_ARRAY_H, (name, copyfun, dim, A))
#endif

#if defined(ND_CREATE_CONST_ARRAY_A) || defined(ICM_ALL)
ICM_DEF( ND_CREATE_CONST_ARRAY_A, NO_TRACE)
  ICM_STR(name)
  ICM_INT(length)
  ICM_INT(dim)
  ICM_VAR( dim, A)
ICM_END( ND_CREATE_CONST_ARRAY_A, (name, length, dim, A))
#endif

#if defined(ND_KS_DECL_ARRAY) || defined(ICM_ALL)
ICM_DEF( ND_KS_DECL_ARRAY, NO_TRACE)
  ICM_STR(type)
  ICM_STR(name)
  ICM_INT(dim)
  ICM_VAR( dim, s)
ICM_END( ND_KS_DECL_ARRAY, (type, name, dim, s) )
#endif

#if defined(ND_KS_DECL_GLOBAL_ARRAY) || defined(ICM_ALL)
ICM_DEF( ND_KS_DECL_GLOBAL_ARRAY, NO_TRACE)
  ICM_STR(type)
  ICM_STR(name)
  ICM_INT(dim)
  ICM_VAR( dim, s)
ICM_END( ND_KS_DECL_GLOBAL_ARRAY, (type, name, dim, s) )
#endif

#if defined(ND_KD_DECL_EXTERN_ARRAY) || defined(ICM_ALL)
ICM_DEF( ND_KD_DECL_EXTERN_ARRAY, NO_TRACE)
  ICM_STR(type)
  ICM_STR(name)
  ICM_INT(dim)
ICM_END( ND_KD_DECL_EXTERN_ARRAY, (type, name, dim) )
#endif

#if defined(ND_KS_DECL_ARRAY_ARG) || defined(ICM_ALL)
ICM_DEF( ND_KS_DECL_ARRAY_ARG, NO_TRACE)
  ICM_STR(name)
  ICM_INT(dim)
  ICM_VAR( dim, s)
ICM_END( ND_KS_DECL_ARRAY_ARG, (name, dim, s) )
#endif

#if defined(ND_KD_SET_SHAPE) || defined(ICM_ALL)
ICM_DEF( ND_KD_SET_SHAPE, NO_TRACE)
  ICM_STR(name)
  ICM_INT(dim)
  ICM_VAR( dim, s)
ICM_END( ND_KD_SET_SHAPE, (name, dim, s) )
#endif

#if defined(ND_KD_PSI_CxA_S) || defined(ICM_ALL)
ICM_DEF( ND_KD_PSI_CxA_S, TRACE_PRF)
  ICM_INT(line)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dim)
  ICM_VAR( dim, vi)
ICM_END( ND_KD_PSI_CxA_S, (line, a, res, dim, vi) )
#endif

#if defined(ND_KD_PSI_VxA_S) || defined(ICM_ALL)
ICM_DEF( ND_KD_PSI_VxA_S, TRACE_PRF)
  ICM_INT(line)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dim)
  ICM_STR( v)
ICM_END( ND_KD_PSI_VxA_S, (line, a, res, dim, v) )
#endif

#if defined(ND_KD_PSI_CxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_PSI_CxA_A, TRACE_PRF)
  ICM_INT(line)
  ICM_INT(dima)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dimv)
  ICM_VAR( dimv, vi)
ICM_END( ND_KD_PSI_CxA_A, (line, dima, a, res, dimv, vi) )
#endif

#if defined(ND_KD_PSI_VxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_PSI_VxA_A, TRACE_PRF)
  ICM_INT(line)
  ICM_INT(dima)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dimv)
  ICM_STR( v)
ICM_END( ND_KD_PSI_VxA_A, (line, dima, a, res, dimv, v) )
#endif

#if defined(ND_KD_TAKE_CxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_TAKE_CxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dimv)
  ICM_VAR( dimv, vi)
ICM_END( ND_KD_TAKE_CxA_A, (dima, a, res, dimv, vi) )
#endif

#if defined(ND_KD_DROP_CxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_DROP_CxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_STR(a)
  ICM_STR(res)
  ICM_INT(dimv)
  ICM_VAR( dimv, vi)
ICM_END( ND_KD_DROP_CxA_A, (dima, a, res, dimv, vi) )
#endif

#if defined(ND_KD_CAT_SxAxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_CAT_SxAxA_A, TRACE_PRF)
  ICM_INT(dima)
  ICM_VAR( 2,ar)
  ICM_STR(res)
  ICM_INT(catdim)
ICM_END( ND_KD_CAT_SxAxA_A, (dima, ar, res, catdim) )
#endif

#if defined(ND_KD_ROT_CxSxA_A) || defined(ICM_ALL)
ICM_DEF( ND_KD_ROT_CxSxA_A, TRACE_PRF)
  ICM_INT( rotdim)
  ICM_VAR( 1, numstr)
  ICM_INT(dima)
  ICM_STR(a)
  ICM_STR(res)
ICM_END( ND_KD_ROT_CxSxA_A, (rotdim, numstr, dima, a, res) )
#endif

#if defined(ND_PRF_MODARRAY_AxCxS_CHECK_REUSE) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxCxS_CHECK_REUSE, TRACE_PRF)
  ICM_INT(line)
  ICM_STR(res_type)
  ICM_INT(dimres)
  ICM_STR(res)
  ICM_STR(old)
  ICM_VAR( 1, value)
  ICM_INT(dimv)
  ICM_VAR( dimv, vi)
ICM_END( ND_PRF_MODARRAY_AxCxS_CHECK_REUSE, (line, res_type, dimres, res, old, value, dimv, vi) )
#endif

#if defined(ND_PRF_MODARRAY_AxCxS) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxCxS, TRACE_PRF)
  ICM_INT(line)
  ICM_STR(res_type)
  ICM_INT(dimres)
  ICM_STR(res)
  ICM_STR(old)
  ICM_VAR( 1, value)
  ICM_INT(dimv)
  ICM_VAR( dimv, vi)
ICM_END( ND_PRF_MODARRAY_AxCxS, (line, res_type, dimres, res, old, value, dimv, vi) )
#endif

#if defined(ND_PRF_MODARRAY_AxVxS_CHECK_REUSE) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxVxS_CHECK_REUSE, TRACE_PRF)
  ICM_INT(line)
  ICM_STR(res_type)
  ICM_INT(dimres)
  ICM_STR(res)
  ICM_STR(old)
  ICM_VAR( 1, value)
  ICM_INT(dim)
  ICM_STR(v)
ICM_END( ND_PRF_MODARRAY_AxVxS_CHECK_REUSE, (line,res_type,dimres,res,old,value,dim,v) )
#endif

#if defined(ND_PRF_MODARRAY_AxVxS) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxVxS, TRACE_PRF)
  ICM_INT(line)
  ICM_STR(res_type)
  ICM_INT(dimres)
  ICM_STR(res)
  ICM_STR(old)
  ICM_VAR( 1, value)
  ICM_INT(dim)
  ICM_STR(v)
ICM_END( ND_PRF_MODARRAY_AxVxS, (line,res_type,dimres,res,old,value,dim,v) )
#endif

#if defined(ND_PRF_MODARRAY_AxCxA_CHECK_REUSE) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxCxA_CHECK_REUSE, TRACE_PRF)
  ICM_INT(line)
  ICM_STR(res_type)
  ICM_INT(dimres)
  ICM_STR(res)
  ICM_STR(old)
  ICM_STR( val)
  ICM_INT(dimv)
  ICM_VAR( dimv, vi)
ICM_END( ND_PRF_MODARRAY_AxCxA_CHECK_REUSE, (line,res_type,dimres,res,old,val,dimv,vi) )
#endif

#if defined(ND_PRF_MODARRAY_AxCxA) || defined(ICM_ALL)
ICM_DEF( ND_PRF_MODARRAY_AxCxA, TRACE_PRF)
  ICM_INT(line)
  ICM_STR(res_type)
  ICM_INT(dimres)
  ICM_STR(res)
  ICM_STR(old)
  ICM_STR(val)
  ICM_INT(dimv)
  ICM_VAR( dimv, vi)
ICM_END( ND_PRF_MODARRAY_AxCxA, (line,res_type,dimres,res,old,val,dimv,vi) )
#endif

#if defined(ND_BEGIN_GENARRAY) || defined(ICM_ALL)
ICM_DEF( ND_BEGIN_GENARRAY, TRACE_WST)
  ICM_STR( res)
  ICM_INT(dimres)
  ICM_STR( from)
  ICM_STR( to)
  ICM_STR( idx)
  ICM_INT( idxlen)
ICM_END( ND_BEGIN_GENARRAY, (res, dimres, from, to, idx, idxlen) )
#endif

#if defined(ND_END_GENARRAY_S) || defined(ICM_ALL)
ICM_DEF( ND_END_GENARRAY_S, TRACE_WST)
  ICM_STR( res)
  ICM_INT(dimres)
  ICM_VAR( 1, valstr)
ICM_END( ND_END_GENARRAY_S, (res, dimres, valstr) )
#endif

#if defined(ND_END_GENARRAY_A) || defined(ICM_ALL)
ICM_DEF( ND_END_GENARRAY_A, TRACE_WST)
  ICM_STR( res)
  ICM_INT(dimres)
  ICM_STR( reta)
  ICM_INT(idxlen)
ICM_END( ND_END_GENARRAY_A, (res, dimres, reta, idxlen) )
#endif

#if defined(ND_BEGIN_MODARRAY) || defined(ICM_ALL)
ICM_DEF( ND_BEGIN_MODARRAY, TRACE_WST)
  ICM_STR( res)
  ICM_INT(dimres)
  ICM_STR( a)
  ICM_STR( from)
  ICM_STR( to)
  ICM_STR( idx)
  ICM_INT( idxlen)
ICM_END( ND_BEGIN_MODARRAY, (res, dimres, a, from, to, idx, idxlen) )
#endif

#if defined(ND_END_MODARRAY_S) || defined(ICM_ALL)
ICM_DEF( ND_END_MODARRAY_S, TRACE_WST)
  ICM_STR( res)
  ICM_INT(dimres)
  ICM_STR( a)
  ICM_VAR( 1, valstr)
ICM_END( ND_END_MODARRAY_S, (res, dimres, a, valstr) )
#endif

#if defined(ND_END_MODARRAY_A) || defined(ICM_ALL)
ICM_DEF( ND_END_MODARRAY_A, TRACE_WST)
  ICM_STR( res)
  ICM_INT(dimres)
  ICM_STR( a)
  ICM_STR( reta)
  ICM_INT(idxlen)
ICM_END( ND_END_MODARRAY_A, (res, dimres, a, reta, idxlen) )
#endif

#if defined(ND_BEGIN_FOLDPRF) || defined(ICM_ALL)
ICM_DEF( ND_BEGIN_FOLDPRF, TRACE_WST)
  ICM_STR( res)
  ICM_INT(dimres)
  ICM_STR( from)
  ICM_STR( to)
  ICM_STR( idx)
  ICM_INT( idxlen)
  ICM_INT( n_neutral)
  ICM_VAR( n_neutral, neutral)
ICM_END( ND_BEGIN_FOLDPRF, (res, dimres, from, to, idx, idxlen, n_neutral, neutral) )
#endif


#if defined(ND_END_FOLD) || defined(ICM_ALL)
ICM_DEF( ND_END_FOLD, TRACE_WST)
   ICM_INT( idxlen)
ICM_END( ND_END_FOLD, (idxlen))
#endif

#if defined(ND_BEGIN_FOLDFUN) || defined(ICM_ALL)
ICM_DEF( ND_BEGIN_FOLDFUN, TRACE_WST)
  ICM_STR( res)
  ICM_INT(dimres)
  ICM_STR( from)
  ICM_STR( to)
  ICM_STR( idx)
  ICM_INT( idxlen)
  ICM_INT( n_neutral)
  ICM_VAR( n_neutral, neutral)
ICM_END( ND_BEGIN_FOLDFUN, (res, dimres, from, to, idx, idxlen, n_neutral, neutral) )
#endif

#if defined(ND_KS_VECT2OFFSET) || defined(ICM_ALL)
ICM_DEF( ND_KS_VECT2OFFSET, TRACE_PRF)
  ICM_STR( name)
  ICM_INT( dim)
  ICM_INT( dims)
  ICM_VAR( dims, s)
ICM_END( ND_KS_VECT2OFFSET, (name, dim, dims, s))
#endif



/*
 * ICMs for compilation of new with-loop
 */

#if defined(WL_ASSIGN) || defined(ICM_ALL)
ICM_DEF( WL_ASSIGN, TRACE_UDF)
  ICM_INT(dims_expr)
  ICM_STR(expr)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VAR(dims, idx_scalars)
ICM_END( WL_ASSIGN, (dims_expr, expr, dims_target, target, idx_vec, dims, idx_scalars))
#endif

#if defined(WL_ASSIGN_INIT) || defined(ICM_ALL)
ICM_DEF( WL_ASSIGN_INIT, TRACE_UDF)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VAR(dims, idx_scalars)
ICM_END( WL_ASSIGN_INIT, (dims_target, target, idx_vec, dims, idx_scalars))
#endif

#if defined(WL_ASSIGN_COPY) || defined(ICM_ALL)
ICM_DEF( WL_ASSIGN_COPY, TRACE_UDF)
  ICM_STR(source)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VAR(dims, idx_scalars)
ICM_END( WL_ASSIGN_COPY, (source, dims_target, target, idx_vec, dims, idx_scalars))
#endif

#if defined(WL_FOLD_NOOP) || defined(ICM_ALL)
ICM_DEF( WL_FOLD_NOOP, TRACE_UDF)
  ICM_INT(dim)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VAR(dims, idx_scalars)
  ICM_INT(cnt_bounds)
  ICM_VAR(cnt_bounds, bounds)
ICM_END( WL_FOLD_NOOP, (dim, dims_target, target, idx_vec, dims, idx_scalars,
                        cnt_bounds, bounds))
#endif

#if defined(WL_ADJUST_OFFSET) || defined(ICM_ALL)
ICM_DEF( WL_ADJUST_OFFSET, TRACE_UDF)
  ICM_INT(dim)
  ICM_INT(dims_target)
  ICM_STR(target)
  ICM_STR(idx_vec)
  ICM_INT(dims)
  ICM_VAR(dims, idx_scalars)
ICM_END( WL_ADJUST_OFFSET, (dim, dims_target, target, idx_vec, dims, idx_scalars))
#endif



/*
 * ICMs for compilation of multi-threaded applications
 */

#if defined(MT_SPMD_FUN_DEC) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_FUN_DEC, NO_TRACE)
  ICM_STR(name)
  ICM_STR(from)
  ICM_INT(narg)
  ICM_VAR((3*narg), vararg)
ICM_END( MT_SPMD_FUN_DEC, (name, from, narg, vararg))
#endif

#if defined(MT_SPMD_FUN_RET) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_FUN_RET, NO_TRACE)
  ICM_INT(narg)
  ICM_VAR((2*narg), vararg)
ICM_END( MT_SPMD_FUN_RET, (narg, vararg))
#endif

#if defined(MT_START_SYNCBLOCK) || defined(ICM_ALL)
ICM_DEF( MT_START_SYNCBLOCK, NO_TRACE)
  ICM_INT(narg)
  ICM_VAR((3*narg), vararg)
ICM_END( MT_START_SYNCBLOCK, (narg, vararg))
#endif

#if defined(MT_SYNC_NONFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_NONFOLD, NO_TRACE)
ICM_END( MT_SYNC_NONFOLD, ())
#endif

#if defined(MT_SYNC_FOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_FOLD, NO_TRACE)
  ICM_INT(narg)
  ICM_VAR((4*narg), vararg)
ICM_END( MT_SYNC_FOLD, (narg, vararg))
#endif

#if defined(MT_SYNC_ONEFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_ONEFOLD, NO_TRACE)
  ICM_STR(foldtype)
  ICM_STR(accu_var)
  ICM_STR(tmp_var)
  ICM_STR(foldop)
ICM_END( MT_SYNC_ONEFOLD, (foldtype, accu_var, tmp_var, foldop))
#endif

#if defined(MT_SYNC_ONEFOLD_NONFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_ONEFOLD_NONFOLD, NO_TRACE)
  ICM_STR(foldtype)
  ICM_STR(accu_var)
  ICM_STR(tmp_var)
  ICM_STR(foldop)
ICM_END( MT_SYNC_ONEFOLD_NONFOLD, (foldtype, accu_var, tmp_var, foldop))
#endif

#if defined(MT_SYNC_FOLD_NONFOLD) || defined(ICM_ALL)
ICM_DEF( MT_SYNC_FOLD_NONFOLD, NO_TRACE)
  ICM_INT(narg)
  ICM_VAR((4*narg), vararg)
ICM_END( MT_SYNC_FOLD_NONFOLD, (narg, vararg))
#endif

#if defined(MT_CONTINUE) || defined(ICM_ALL)
ICM_DEF( MT_CONTINUE, NO_TRACE)
  ICM_INT(narg)
  ICM_VAR((2*narg), vararg)
ICM_END( MT_CONTINUE, (narg, vararg))
#endif

#if defined(MT_SPMD_BLOCK) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_BLOCK, NO_TRACE)
  ICM_STR(name)
  ICM_INT(narg)
  ICM_VAR((3*narg), vararg)
ICM_END( MT_SPMD_BLOCK, (name, narg, vararg))
#endif

#if defined(MT_SPMD_PRESET) || defined(ICM_ALL)
ICM_DEF( MT_SPMD_PRESET, NO_TRACE)
  ICM_STR(name)
  ICM_INT(narg)
  ICM_VAR((2*narg), vararg)
ICM_END( MT_SPMD_PRESET, (name, narg, vararg))
#endif


/*
 * ICMs for implementing scheduling strategies
 */

#if defined(MT_SCHEDULER_Block_BEGIN) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Block_BEGIN, NO_TRACE)
  ICM_INT(dim)
  ICM_VARINT((4*dim), varint)
ICM_END( MT_SCHEDULER_Block_BEGIN, (dim, varint))
#endif

#if defined(MT_SCHEDULER_Block_END) || defined(ICM_ALL)
ICM_DEF( MT_SCHEDULER_Block_END, NO_TRACE)
  ICM_INT(dim)
  ICM_VARINT((4*dim), varint)
ICM_END( MT_SCHEDULER_Block_END, (dim, varint))
#endif

