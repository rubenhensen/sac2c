#######################################################################################
#
# Comment:
#
# This makefile is never called directly by the user. Instead, it is included at the
# end of other makefiles to provide the necessary rules for a consistent checking
# mechanism.
#
# Currently we check:
#  - whether we need to re-configure first
#  - whether we need to create a new configure script first
#  - whether a revision number file exists; if not, it is created


CONFIGURED   := $(PROJECT_ROOT)/src/makefiles/config.mkf \
                $(PROJECT_ROOT)/src/include/config.h \
                $(PROJECT_ROOT)/src/include/sacdirs.h \
                $(PROJECT_ROOT)/src/tools/saccc \
                $(PROJECT_ROOT)/setup/sac2crc

AUTOHEADERED := $(PROJECT_ROOT)/src/include/config.h.in

AUTOCONFED   := $(PROJECT_ROOT)/configure


#######################################################################################
#
# Dummy rules:
#

.PHONY: checks $(PROJECT_ROOT)/.revision.txt

#######################################################################################
#
# Start rules:
#

checks: $(CONFIGURED) $(PROJECT_ROOT)/.revision.txt


#######################################################################################
#
# Pattern rules for autoconf/autoheader and configure
#
#  Only in this makefile we use 'echo' rather than $(ECHO) because we may need to
#  perform the checks on a pristine working copy. In this case we cannot include
#  config.mkf as it does not yet exist and hence we do not have a definition for
#  $(ECHO).
#

%: %.ac
	@echo ""
	@echo "************************************************************"
	@echo "* Unable to build $(PROJECT_NAME) $(SUBPROJECT) !"
	@echo "* Please, run autoconf and autoheader first !"
	@echo "* You may do so by typing:"
	@echo "*  make -C $(PROJECT_ROOT) config"
	@echo "************************************************************"
	@echo ""

%: %.in
	@echo ""
	@echo "************************************************************"
	@echo "* Unable to build $(PROJECT_NAME) $(SUBPROJECT) !"
	@echo "* Please, run $(PROJECT_ROOT)/configure first !"
	@echo "************************************************************"
	@echo ""
	@ exit 1

$(PROJECT_ROOT)/setup/sac2crc: $(PROJECT_ROOT)/setup/sac2crc.pre $(PROJECT_ROOT)/.revision.txt
	@sed -e 's|@RTPATH_CONF[@]|$(RTPATH_CONF)|g' \
	    -e 's|@MODPATH_CONF[@]|$(MODPATH_CONF)|g' \
	    -e 's|@INCPATH_CONF[@]|$(INCPATH_CONF)|g' \
	    -e 's|@TREEPATH_CONF[@]|$(TREEPATH_CONF)|g' $< >$@.tmp
	@ if ! test -r "$@"; then mv $@.tmp $@; else \
             if ! cmp $@.tmp $@ >/dev/null 2>&1; then mv $@.tmp $@; else rm $@.tmp; fi; fi

#$(PROJECT_ROOT)/.revision.txt:
#	@ if which svn > /dev/null ;  \
#          then svn info | grep Revision: | sed -e 's/Revision: //g' > $@ ; \
#          else if [ ! -f $@ ] ; \
#                 then echo "???" > $@ ; \
#               fi ; \
#          fi

# Use indirect phony and non mod time changing rule ( when version unchanged)
# to prevent needless rebuilds of the compiler.
#$(PROJECT_ROOT)/.revision.txt:
#	@ if [ ! -f $@ ];                        \
#	  then                                   \
#	    echo "?????" >$@;                    \
#	  fi
#	@ if which svnversion > /dev/null; then  \
#            svnversion $(PROJECT_ROOT)           \
#            | sed -e 's/[ \t\n]/_/g'             \
#            | sed -e 's/M/:MODIFIED/g'           \
#            | sed -e 's/S/:SWITCHED/g' > $@.new; \
#            if which diff >/dev/null; then       \
#              if diff $@ $@.new >/dev/null; then \
#                rm $@.new;                       \
#              else                               \
#                mv $@.new $@;                    \
#              fi                                 \
#            else                                 \
#              rm $@.new;                         \
#            fi                                   \
#          fi

# This code merely counts the number of GIT commits, and
# used that to fake a revision number.
# #
$(PROJECT_ROOT)/.revision.txt:
	@ if [ ! -f $@ ];                        \
	  then                                   \
	    echo "?????" >$@;                    \
	  fi
	@ if which git > /dev/null; then                                \
            git rev-list --abbrev-commit HEAD $(PROJECT_ROOT)           \
              | wc -l | sed -e 's/[ ]*//g' > $@.new;                    \
            if git status $(PROJECT_ROOT)                               \
               | fgrep 'modified' >/dev/null; then                      \
              echo ":MODIFIED" >> $@.new;                               \
              tr -d '\n' < $@.new > $@.new2;                            \
              mv $@.new2 $@.new;                                        \
            fi;                                                         \
            if which diff >/dev/null; then                              \
              if diff $@ $@.new >/dev/null; then                        \
                rm $@.new;                                              \
              else                                                      \
                mv $@.new $@;                                           \
              fi                                                        \
            else                                                        \
              rm $@.new;                                                \
            fi                                                          \
          fi

.PHONY: $(PROJECT_ROOT)/src/include/sacdirs.h
$(PROJECT_ROOT)/src/include/sacdirs.h:
	@ echo '#define SAC2CRC_CONF "$(SAC2CRC_CONF)"' >$@.tmp
	@ echo '#define DLL_DIR "$(DLL_DIR)"' >>$@.tmp
	@ echo '#define DLL_BUILD_DIR "$(DLL_BUILD_DIR)"' >>$@.tmp
	@ if ! test -r "$@"; then mv $@.tmp $@; else \
             if ! cmp $@.tmp $@ >/dev/null 2>&1; then mv $@.tmp $@; else rm $@.tmp; fi; fi
