#######################################################################################
#
# Comment:
#
# This makefile is never called directly by the user. Instead, it is included at the
# end of other makefiles to provide the necessary rules for a consistent checking
# mechanism.
#
# Currently we check:
#  - whether we need to re-configure first
#  - whether we need to create a new configure script first
#  - whether a revision number file exists; if not, it is created


CONFIGURED   := $(PROJECT_ROOT)/src/makefiles/config.mkf \
                $(PROJECT_ROOT)/src/include/config.h \
                $(PROJECT_ROOT)/src/include/sacdirs.h \
                $(PROJECT_ROOT)/src/tools/saccc \
                $(PROJECT_ROOT)/setup/sac2crc

AUTOHEADERED := $(PROJECT_ROOT)/src/include/config.h.in

AUTOCONFED   := $(PROJECT_ROOT)/configure


#######################################################################################
#
# Dummy rules:
#

.PHONY: checks $(PROJECT_ROOT)/.revision.txt

#######################################################################################
#
# Start rules:
#

checks: $(CONFIGURED) $(PROJECT_ROOT)/.revision.txt

checks-install:
	@ for t in $(CONFIGURED) $(PROJECT_ROOT)/.revision.txt; do \
          test -r "$$t" || { echo "Error: must run 'make' first." >&2; exit 1; }; \
        done
	@ if grep dirty $(PROJECT_ROOT)/.revision.txt >/dev/null 2>&1; then \
	   echo "Error: can't install a locally modified, non-committed version." >&2; \
	   exit 1; \
	fi
	


#######################################################################################
#
# Pattern rules for autoconf/autoheader and configure
#
#  Only in this makefile we use 'echo' rather than $(ECHO) because we may need to
#  perform the checks on a pristine working copy. In this case we cannot include
#  config.mkf as it does not yet exist and hence we do not have a definition for
#  $(ECHO).
#

%: %.ac
	@echo ""
	@echo "************************************************************"
	@echo "* Unable to build $(PROJECT_NAME) $(SUBPROJECT) !"
	@echo "* Please, run autoconf and autoheader first !"
	@echo "* You may do so by typing:"
	@echo "*  make -C $(PROJECT_ROOT) config"
	@echo "************************************************************"
	@echo ""

%: %.in
	@echo ""
	@echo "************************************************************"
	@echo "* Unable to build $(PROJECT_NAME) $(SUBPROJECT) !"
	@echo "* Please, run $(PROJECT_ROOT)/configure first !"
	@echo "************************************************************"
	@echo ""
	@ exit 1

$(PROJECT_ROOT)/setup/sac2crc: $(PROJECT_ROOT)/setup/sac2crc.pre $(PROJECT_ROOT)/.revision.txt
	@sed -e 's|@RTPATH_CONF[@]|$(RTPATH_CONF)|g' \
	    -e 's|@MODPATH_CONF[@]|$(MODPATH_CONF)|g' \
	    -e 's|@INCPATH_CONF[@]|$(INCPATH_CONF)|g' \
	    -e 's|@TREEPATH_CONF[@]|$(TREEPATH_CONF)|g' $< >$@.tmp
	@ if ! test -r "$@"; then mv $@.tmp $@; else \
             if ! cmp $@.tmp $@ >/dev/null 2>&1; then mv $@.tmp $@; else rm $@.tmp; fi; fi

# This code merely counts the number of GIT commits, and
# used that to fake a revision number.
# Please NOTE, that .revision.txt is a PHONY target ie this is being redone
# on every single make!
# #
.PHONY: $(PROJECT_ROOT)/.revision.txt
$(PROJECT_ROOT)/.revision.txt:
	@ echo $(SAC2C_VERSION) >$@-t
	@ if test -r $@ && cmp $@-t $@ >/dev/null; then \
	   rm $@-t; \
	else \
	   mv -f $@-t $@; \
	fi

.PHONY: $(PROJECT_ROOT)/src/include/sacdirs.h
$(PROJECT_ROOT)/src/include/sacdirs.h:
	@ echo '#define SAC2CRC_CONF "$(SAC2CRC_CONF)"' >$@.tmp
	@ echo '#define SAC2CRC_BUILD_CONF "$(SAC2CRC_BUILD_CONF)"' >>$@.tmp
	@ echo '#define DLL_DIR "$(DLL_DIR)"' >>$@.tmp
	@ echo '#define DLL_BUILD_DIR "$(DLL_BUILD_DIR)"' >>$@.tmp
	@ echo '#define SAC2C_VERSION "$(SAC2C_VERSION)"' >>$@.tmp
	@ if ! test -r "$@"; then mv $@.tmp $@; else \
             if ! cmp $@.tmp $@ >/dev/null 2>&1; then mv $@.tmp $@; else rm $@.tmp; fi; fi
