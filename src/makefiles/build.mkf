#######################################################################################
#
# Comment:
#
# This makefile is never called directly by the user nor is it included by other 
# makefiles. Instead, it is used in recursive calls to make by both the top-level
# makefile and the local src directory makefile.
#
# Hence, we can expect variables to be preset from the outside:
#
# SUBPROJECT      : name of subproject (must be set)
#
# MAKE_DIRS       : name of specific source directory of subproject
#                   set by source.mkf but not by subproject.mkf
#
# STYLE           : must be set to either default, devel or prod
#


#######################################################################################
#
# general setup:
#

PROJECT_ROOT     := ../..

MAKEFILE_DIR     := $(PROJECT_ROOT)/src/makefiles

include $(MAKEFILE_DIR)/config.mkf
include $(MAKEFILE_DIR)/settings.mkf
include $(MAKEFILE_DIR)/targets.mkf


SUBPROJECT_DIRS  := $($(SUBPROJECT)_sourcedirs)

MAKE_DIRS        := $(SUBPROJECT_DIRS)

#
# preset by source.mkf to specific directory 
#

INCDIRS          := -I../../include -I../include \
                    $(patsubst %,-I%,$(SUBPROJECT_DIRS))

TARGETDIR_NAME   := $($(SUBPROJECT)_targetdir)

ifeq ($(TARGETDIR_NAME),)
  TARGETDIR        := $(PROJECT_ROOT)
else
  TARGETDIR        := $(PROJECT_ROOT)/$(TARGETDIR_NAME)
endif

TARGETS          := $(addprefix $(TARGETDIR)/,\
                      $($(SUBPROJECT)_targets))

SUBTARGETS_RAW   := $(foreach srcdir,$(MAKE_DIRS),\
                      $(addprefix $(srcdir)/,\
                        $($(SUBPROJECT)_$(srcdir))))

SUBTARGETS       := $(addsuffix $($(SUBPROJECT)_subtarget_suffix),\
                      $(addsuffix .$($(STYLE)_short),\
                        $(SUBTARGETS_RAW)))

SUBTARGETS_HEADER   := $(PROJECT_ROOT)/src/include/config.h \
                       $(addsuffix .h,\
                         $(foreach srcdir,$(runtime_sourcedirs),\
                           $(addprefix ../runtime/$(srcdir)/,\
                             $(runtime_$(srcdir))))) 
#
# We must treat the header file targets of the runtime subproject differently
# because some of the libsac source files include sac.h, which creates a 
# dependency that we don't desire but which we cannot avoid either. However,
# we must formulate the dependencies of sac.h in a way that works both when
# making the runtime subproject and when doing the libsac subproject.
# In particular, we hardcode the dependencies to '$(runtime)' rather than
# using the generic $(TARGETFILES) and we put an extra '../runtime' in front
# of the path.
#

GENERATED_INCLUDE_FILES := $(patsubst %.xsl,%,\
                             $(foreach dir,$(MAKE_DIRS),\
                               $(wildcard $(dir)/*.h.xsl))) \
                           $(patsubst %.xsl,%,\
                             $(foreach dir,$(MAKE_DIRS),\
                               $(wildcard $(dir)/*.mac.xsl)))

GENERATED_SOURCE_FILES := $(patsubst %.xsl,%,\
                            $(foreach dir,$(MAKE_DIRS),\
                              $(wildcard $(dir)/*.c.xsl)))

GENERATED_FILES  := $(GENERATED_INCLUDE_FILES) $(GENERATED_SOURCE_FILES) \
		    codegen/fancy_icm_vars.c

DEPENDENCY_FILES := $(addsuffix .d,\
                      $(foreach file,$(SUBTARGETS_RAW),\
                        $(dir $(file)).$(notdir $(file))))

FINGERPRINT_FILE := $(PROJECT_ROOT)/src/include/.fingerprint



###############################################################################
#
# Dummy rules
#

.PHONY: all makesubdir

.PRECIOUS: %.c %.h %.o %.p.o %.d.o %.d.mt.o %.p.mt.o .%.d \
           %.d.xt.o %.p.xt.o %.mac \
           %.d.diag.o %.p.diag.o %.d.mt.diag.o %.p.mt.diag.o \
           %.d.xt.diag.o %.p.xt.diag.o



###############################################################################
#
# Start rule
#

all: $(TARGETS)
	@ if [ -f .done ] ; \
          then $(RM) .done ; \
          else $(ECHO) "" ; \
               $(ECHO) "$(PROJECT_NAME) $(SUBPROJECT)" \
                       "($($(STYLE)_long) version) is up to date !"; \
          fi


###############################################################################
#
# Debugging rules
#

tutu:
	@$(ECHO) $(TARGETS) 
	@$(ECHO) $(SUBTARGETS) 
	@$(ECHO) $(DEPENDENCY_FILES)


###############################################################################
#
# Rules for making subdirectories
#

makesubdir: $(SUBTARGETS)
	@$(ECHO) ""


################################################################################
#
# Building make tools
#

$(PROJECT_ROOT)/src/bin/%: $(SUBTARGETS) 
	@$(ECHO) ""
	@$(ECHO) "Linking $(PREFIX_ROOT)src/bin/$* ($($(STYLE)_long) version)"
	$(HIDE) $(LD) $(LD_FLAGS) -o $@ \
                $(filter $*/%,$^) \
                $(LIBDIRS) $(LIBS) $(LIB_MAKETOOLS) \
                $(foreach dir, $(realpath $(subst -L,,$(LIBDIRS))), $(subst %path%,$(dir),$(LD_PATH)))
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  


################################################################################
#
# Building libsac2c
#

$(PROJECT_ROOT)/lib/libsac2c$(SHARED_LIB_EXT): $(PROJECT_ROOT)/lib/libsac2c.$($(STYLE)_short)$(SHARED_LIB_EXT)
	@$(ECHO) ""
	@$(ECHO) "Using $(PREFIX_ROOT)lib/libsac2c.$($(STYLE)_short)$(SHARED_LIB_EXT) ($($(STYLE)_long) version)"
	@if [ $(SHARED_LIB_EXT) == ".dll" ]; \
		then \
			cd $(PROJECT_ROOT)/lib/ ;\
			$(LN) libsac2c.$($(STYLE)_short)$(SHARED_LIB_EXT) libsac2c$(SHARED_LIB_EXT) ;\
		else \
			$(CP) $< $@ ;\
		fi
  
# This rule filters out cygcompat.o because it is not part of libsac2c but still belongs in the sub project.
# cygcompat.o belongs in libcygcompat.a which will only be built under cygwin. See the rule bellow.
$(PROJECT_ROOT)/lib/libsac2c.$($(STYLE)_short)$(SHARED_LIB_EXT): global/build_$(STYLE).$($(STYLE)_short).o
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/libsac2c.$($(STYLE)_short)$(SHARED_LIB_EXT) ($($(STYLE)_long) version)"
	@$(TOUCH) $(FINGERPRINT_FILE)
	$(HIDE) $(subst %libname%,$(notdir $@),$(LD_DYNAMIC)) -o $@ \
                $(filter-out support/cygcompat.$($(STYLE)_short).o, $(SUBTARGETS)) $^ \
                $(LIBDIRS) $(LIB_MAKETOOLS) $(LIBS)


$(PROJECT_ROOT)/lib/libcygcompat.a: support/cygcompat.$($(STYLE)_short).o
	@if [ $(SHARED_LIB_EXT) == ".dll" ]; \
		then \
			$(ECHO) "" ;\
			$(ECHO) "Creating $(PREFIX_ROOT)lib/libcygcompat.a" ;\
			$(CROSS_AR) $@ $^ ;\
		fi

################################################################################
#
# Building HTML documentation of abstract syntax tree
#

$(PROJECT_ROOT)/src/doc/%.html: xml/%2html.xsl xml/%.xml
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)src/doc/$(notdir $@)"
	$(HIDE) $(XSLTENGINE) $^ > $@


################################################################################
#
# Building PNG documentation of abstract syntax tree
#
						
$(PROJECT_ROOT)/src/doc/%.png: xml/%2png.xsl xml/%.xml
	@$(ECHO) ""
	@if [ $(DOT) = "no" ]; \
			then \
				$(ECHO) "Can not visualize syntax tree."; \
			else \
				$(ECHO) "Creating $(PREFIX_ROOT)src/doc/$(notdir $@)"; \
				$(XSLTENGINE) $^ > xml/ast.dot; \
				dot xml/ast.dot -Tpng -o $@ ;\
				$(RM)  xml/ast.dot ; \
			fi		


################################################################################
#
# Building runtime header file
#

$(PROJECT_ROOT)/include/sac.h: $(SUBTARGETS_HEADER) 
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)include/sac.h"
	$(HIDE) $(HEADER_ZIPPER) $^ > $@
	@$(TOUCH) .done
	@$(TOUCH) $(FINGERPRINT_FILE)
	@$(CLOCK_SKEW_ELIMINATION)  


################################################################################
#
# Building libsacprelude
#

$(PROJECT_ROOT)/lib/libsacpreludeMod$(CROSS_VARIANT).a: \
  $(STYLE)/libsacpreludeMod$(CROSS_VARIANT).a
	@$(ECHO) "Creating " $(notdir $@)
	$(HIDE) $(CP) $< $@
	@$(CLOCK_SKEW_ELIMINATION)
	$(HIDE) if [ -e $(basename $<)$(SHARED_LIB_EXT) ]; \
	        then \
	          $(ECHO) "Creating " $(basename $(notdir $@))$(SHARED_LIB_EXT); \
                  $(CP) $(basename $<)$(SHARED_LIB_EXT) $(basename $@)$(SHARED_LIB_EXT); \
	        fi

$(PROJECT_ROOT)/lib/libsacpreludeTree$(CROSS_VARIANT)$(SHARED_LIB_EXT): \
  $(STYLE)/libsacpreludeTree$(CROSS_VARIANT)$(SHARED_LIB_EXT)
	@$(ECHO) "Creating " `basename $@`
	$(HIDE) $(CP) $< $@
	@$(CLOCK_SKEW_ELIMINATION)


$(STYLE)/libsacpreludeMod$(CROSS_VARIANT).a \
$(STYLE)/libsacpreludeMod$(CROSS_VARIANT)$(SHARED_LIB_EXT): \
  $(STYLE)/libsacpreludeTree$(CROSS_VARIANT)$(SHARED_LIB_EXT)


fullpath = $(shell cd "$(1)" &>/dev/null; pwd; cd - &>/dev/null)

$(STYLE)/libsacpreludeTree$(CROSS_VARIANT)$(SHARED_LIB_EXT): \
  sacprelude.sac $(FINGERPRINT_FILE)
	@$(ECHO) "Compiling $< $(CROSS_FOR)"
	$(HIDE) SAC2CRC="$(call fullpath,$(PROJECT_ROOT))/sac2crc" \
                LD_LIBRARY_PATH="$(call fullpath,$(PROJECT_ROOT))/lib:${LD_LIBRARY_PATH}" \
                DYLD_LIBRARY_PATH="$(call fullpath,$(PROJECT_ROOT))/lib:${DYLD_LIBRARY_PATH}" \
                PATH="${PATH}:$(call fullpath,$(PROJECT_ROOT))/bin" \
                $(SAC2C) -ccflag"-I$(call fullpath,$(PROJECT_ROOT))/include" \
                -o $(STYLE) $(CROSS_TARGET) $(SAC2CFLAGS_$($(STYLE)_cap)) -noprelude $<
	@$(CLOCK_SKEW_ELIMINATION)

################################################################################
#
# Building libsac and libsacphm in various variants
#


$(PROJECT_ROOT)/lib/libsacphm$(CROSS_VARIANT)%.a: $(SUBTARGETS:.o=%.o)
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/libsacphm$(CROSS_VARIANT)$*.a " \
                 "($($(STYLE)_long) version) $(CROSS_FOR)"
	$(HIDE) $(CROSS_AR) $@ $^
	$(HIDE) $(CROSS_RANLIB) $@
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  

$(PROJECT_ROOT)/lib/libsacphm$(CROSS_VARIANT)%$(SHARED_LIB_EXT): $(SUBTARGETS:.o=%.o)
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/libsacphm$(CROSS_VARIANT)$*$(SHARED_LIB_EXT) " \
                 "($($(STYLE)_long) version) $(CROSS_FOR)"
	$(HIDE) $(subst %libname%,$(notdir $@),$(CROSS_LD_DYNAMIC)) -o $@ $^
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)

$(PROJECT_ROOT)/lib/libsacphmc$(CROSS_VARIANT)%.a: $(SUBTARGETS:.o=%.o)
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/libsacphmc$(CROSS_VARIANT)$*.a " \
                 "($($(STYLE)_long) version) $(CROSS_FOR)"
	$(HIDE) $(CROSS_AR) $@ $^
	$(HIDE) $(CROSS_RANLIB) $@
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)

$(PROJECT_ROOT)/lib/libsacphmc$(CROSS_VARIANT)%$(SHARED_LIB_EXT): $(SUBTARGETS:.o=%.o)
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/libsacphmc$(CROSS_VARIANT)$*$(SHARED_LIB_EXT) " \
                 "($($(STYLE)_long) version) $(CROSS_FOR)"
	$(HIDE) $(subst %libname%,$(notdir $@),$(CROSS_LD_DYNAMIC)) -o $@ $^
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  

$(PROJECT_ROOT)/lib/libsac$(CROSS_VARIANT)%.a: $(SUBTARGETS:.o=%.o)
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/libsac$(CROSS_VARIANT)$*.a " \
                 "($($(STYLE)_long) version) $(CROSS_FOR)"
	$(HIDE) $(CROSS_AR) $@ $^
	$(HIDE) $(CROSS_RANLIB) $@
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  

$(PROJECT_ROOT)/lib/libsac$(CROSS_VARIANT)%$(SHARED_LIB_EXT): $(SUBTARGETS:.o=%.o)
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/libsac$(CROSS_VARIANT)$*$(SHARED_LIB_EXT) " \
                 "($($(STYLE)_long) version) $(CROSS_FOR)"
	$(HIDE) $(subst %libname%,$(notdir $@),$(CROSS_LD_DYNAMIC)) -o $@ $^
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  


################################################################################
#
# Building tools
#

$(PROJECT_ROOT)/bin/comslc: comslc/comslc
	$(HIDE) $(CP) $(PROJECT_ROOT)/src/tools/comslc/comslc $(PROJECT_ROOT)/bin/

$(PROJECT_ROOT)/bin/%: $(SUBTARGETS)
	@$(ECHO) ""
	@$(ECHO) "Linking $(PREFIX_ROOT)bin/$* ($($(STYLE)_long) version)"
	$(HIDE) $(LD) $(LD_FLAGS) -o $@ \
                      $(filter $*/%,$^) \
                      $(LIBDIRS) $(LIBS) $(LIB_TOOLS) \
                      $(foreach dir, $(realpath $(subst -L,,$(LIBDIRS))), $(subst %path%,$(dir),$(LD_PATH)))
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  


###############################################################################
#
# Creating the revision data file
#
# We make snetc depend on the revision data file and in turn the revision data
# file depend on all target object files. By this dependency chain we achieve
# that only if one of the object files needs to be remade, we also remake the
# revision data file and, thereupon, relink snetc.
#

global/build_$(STYLE).c: $(SUBTARGETS) $(PROJECT_ROOT)/.revision.txt
	$(HIDE) $(FINGERPRINTER_CALL) > .fingerprint
	$(HIDE) if [ -f $(FINGERPRINT_FILE) ] ; \
                then if [ "`cat $(FINGERPRINT_FILE)`" != "`cat .fingerprint`" ] ; \
                     then cp .fingerprint $(FINGERPRINT_FILE) ; \
                     fi ; \
                else cp .fingerprint $(FINGERPRINT_FILE) ; \
                fi
	@$(ECHO) ""
	@$(ECHO) "Creating revision data file:  $@"
	@$(ECHO) "char build_style[] = \"$($(STYLE)_long)\";"                                  >  $@
	@$(ECHO) "char build_date[]  = \"`date`\";"                                            >> $@
	@$(ECHO) "char build_user[]  = \"$(USER)\";"                                           >> $@
	@$(ECHO) "char build_host[]  = \"`hostname`\";"                                        >> $@
	@$(ECHO) "char build_os[]    = \"$(OS)\";"                                             >> $@
	@$(ECHO) "char build_rev[]   = \"`cat $(PROJECT_ROOT)/.revision.txt`\";"               >> $@
	@$(ECHO) "char build_srev[]  = \"`sed -e 's/:.*//g' $(PROJECT_ROOT)/.revision.txt`\";" >> $@
	@$(ECHO) "char build_ast[]   = \"`cat .fingerprint`\";"                                >> $@
	@$(CLOCK_SKEW_ELIMINATION)  

# Create an icm_vars file, which could be used by both C and C++ compilers
codegen/fancy_icm_vars.c: codegen/icm_vars.c codegen/icm.data
	$(CPP) $< -DICM_ALL | $(SORT) | $(UNIQ) > $@

###############################################################################
#
# Pattern rules for compilation
#

%.$($(STYLE)_short).mt.diag.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded diagnostic $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) $(SETTINGS_PTH) $(SETTINGS_DIAG) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short).xt.diag.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling externally multithreaded diagnostic $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_XT) $(SETTINGS_PTH) $(SETTINGS_DIAG) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short).seq.diag.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling diagnostic $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_YY)  $(SETTINGS_DIAG) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short).mt.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) $(SETTINGS_PTH) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short).xt.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling externally multithreaded $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_XT) $(SETTINGS_PTH) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short).seq.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)"; \
         fi
	@$(ECHO) "  Compiling $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_YY) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short).mt.pth.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) $(SETTINGS_PTH)  \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION)

%.$($(STYLE)_short).mt.lpel.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) $(SETTINGS_LPEL)  \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION)

%.$($(STYLE)_short).mt.omp.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) $(SETTINGS_OMP)  \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION)

%.$($(STYLE)_short).o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)"; \
         fi
	@$(ECHO) "  Compiling $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_YY) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 







ifneq ($(CROSS_VARIANT),)

%.$($(STYLE)_short)$(CROSS_VARIANT).mt.diag.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded diagnostic $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CROSS_CC) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) $(SETTINGS_DIAG) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short)$(CROSS_VARIANT).xt.diag.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling externally multithreaded diagnostic $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CROSS_CC) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_XT) $(SETTINGS_DIAG) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short)$(CROSS_VARIANT).seq.diag.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling diagnostic $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CROSS_CC) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_YY)  $(SETTINGS_DIAG) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short)$(CROSS_VARIANT).mt.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CROSS_CC) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short)$(CROSS_VARIANT).xt.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling externally multithreaded $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CROSS_CC) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_XT) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short)$(CROSS_VARIANT).seq.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)"; \
         fi
	@$(ECHO) "  Compiling $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CROSS_CC) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_YY) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short)$(CROSS_VARIANT).mt.pth.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CROSS_CC) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) $(SETTINGS_PTH)  \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION)

%.$($(STYLE)_short)$(CROSS_VARIANT).mt.lpel.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CROSS_CC) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) $(SETTINGS_LPEL)  \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION)

%.$($(STYLE)_short)$(CROSS_VARIANT).mt.omp.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CROSS_CC) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) $(SETTINGS_OMP)  \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION)


%.$($(STYLE)_short)$(CROSS_VARIANT).o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" \
                      " $(CROSS_FOR)" ; \
         fi
	@$(ECHO) "  Compiling $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CROSS_CC) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_YY) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 
endif

###############################################################################
#
# Pattern rules for source code generation with xml and xslt
#

%.h: %.h.xsl $(XML_DIR)/ast.xml $(XML_COMMONS) 
	@if [ "generate header $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "generate header $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating header files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Generating header file from XML specification:  $(notdir $@)"
	$(HIDE)$(XSLTENGINE) $< $(XML_DIR)/ast.xml | $(CODE_BEAUTIFIER) >$@.tmp
	$(HIDE)$(MV) $@.tmp $@
	@$(CLOCK_SKEW_ELIMINATION)

%.c: %.c.xsl $(XML_DIR)/ast.xml $(XML_COMMONS) 
	@if [ "generate source $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "generate source $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating source files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Generating source code from XML specification:  $(notdir $@)"
	$(HIDE)$(XSLTENGINE) $< $(XML_DIR)/ast.xml | $(CODE_BEAUTIFIER) >$@.tmp
	$(HIDE)$(MV) $@.tmp $@
	@$(CLOCK_SKEW_ELIMINATION)

%.mac: %.mac.xsl $(XML_DIR)/ast.xml $(XML_COMMONS) 
	@if [ "generate macro $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "generate macro $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating macro files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Generating macro file from XML specification:  $(notdir $@)"
	$(HIDE)$(XSLTENGINE) $< $(XML_DIR)/ast.xml | $(CODE_BEAUTIFIER) >$@.tmp
	$(HIDE)$(MV) $@.tmp $@
	@$(CLOCK_SKEW_ELIMINATION)


###############################################################################
#
# Pattern rules for header file generation with m4
#

%.h: %.h.m4 $(M4_DIR)/icm.m4
	@if [ "generate header $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "generate header $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating header files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Generating header file from M4 macro specification: $(notdir $@)"
	$(HIDE) $(M4PROC) -I $(M4_DIR) $< > $@	


#######################################################################################
#
# Pattern rules for dependency tracking mechanism:
#

.%.d: %.c $(GENERATED_FILES) 
	@if [ "dependency $(dir $*)" != "`cat .make_track`" ] ; \
        then $(ECHO) "dependency $(dir $*)" > .make_track; \
             $(ECHO) ""; \
             $(ECHO) "Checking dependencies in directory $(PREFIX_LOCAL)$(dir $@)" ; \
        fi
	@$(ECHO) "  Checking dependencies of source file: $(notdir $<)"
	$(HIDE) if $(CC_DEVEL) $(CC_FLAGS_DEPS) $(SETTINGS_DEVEL) $(INCDIRS) $<  > $@d ; \
	 then $(SED) 's/\($(notdir $*)\)\.o[ :]*/$(subst /,\/,$*)\.o $(subst /,\/,$*)\.p.o $(subst /,\/,$*)\.d.o $(subst /,\/,$*)\.p.mt.o $(subst /,\/,$*)\.d.mt.o $(subst /,\/,$*)\.p.diag.o $(subst /,\/,$*)\.d.diag.o  $(subst /,\/,$*)\.p.mt.diag.o $(subst /,\/,$*)\.d.mt.diag.o $(subst /,\/,$@)\: ..\/makefiles\/config.mkf /'  <$@d >$@.tmp; \
              $(MV) $@.tmp $@; \
	      $(RM) $@d ; \
	 else $(RM) $@d ; \
	      exit 1 ;  \
	 fi
	@$(CLOCK_SKEW_ELIMINATION) 


###############################################################################
#
# Includes for dependency tracking mechanism
#

ifeq ($(DEPS),yes)
  ifneq ($(DEPENDENCY_FILES),)
    -include $(DEPENDENCY_FILES)
  endif
endif


