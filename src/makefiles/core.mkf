
#
# $Id$
#

#######################################################################################
#
# Comment:
#
# This makefile is never called directly by the user nor is it included by other 
# makefiles. Instead, it is used in recursive calls to make by both the top-level
# makefile and the local src directory makefile.
#
# Hence, we can expect variables to be preset from the outside:
#
# SUBPROJECT      : name of subproject (must be set)
#
# SUBPROJECT_DIRS : name of specific source directory of subproject
#                   set by source.mkf but not by subrpoject.mkf
#
# STYLE           : must be set to either default, devel or prod
#


#######################################################################################
#
# general setup:
#

PROJECT_ROOT     := ../..

MAKEFILE_DIR     := $(PROJECT_ROOT)/src/makefiles

include $(MAKEFILE_DIR)/config.mkf
include $(MAKEFILE_DIR)/settings.mkf
include $(MAKEFILE_DIR)/targets.mkf

SUBPROJECT_DIRS  := $($(SUBPROJECT)_sourcedirs)

MAKE_DIRS        := $(SUBPROJECT_DIRS)
#
# preset by source.mkf to specific directory 
#

INCDIRS          := -I../../include -I../include \
                    $(patsubst %,-I%,$(SUBPROJECT_DIRS))

TARGETDIR_NAME   := $($(SUBPROJECT)_targetdir)
TARGETDIR        := $(PROJECT_ROOT)/$(TARGETDIR_NAME)

TARGETS          := $(addprefix $(TARGETDIR)/,\
                      $($(SUBPROJECT)_targets))

SUBTARGETS_RAW   := $(foreach srcdir,$(MAKE_DIRS),\
                      $(addprefix $(srcdir)/,\
                        $($(SUBPROJECT)_$(srcdir))))

SUBTARGETS       := $(addsuffix $($(SUBPROJECT)_subtarget_suffix),\
                      $(addsuffix .$($(STYLE)_short),\
                        $(SUBTARGETS_RAW)))

SUBTARGETS_MT    := $(patsubst %.o,%.mt.o,$(SUBTARGETS))
SUBTARGETS_SEQ   := $(patsubst %.o,%.seq.o,$(SUBTARGETS))
SUBTARGETS_DIAG  := $(patsubst %.o,%.diag.o,$(SUBTARGETS))
SUBTARGETS_MT_DIAG := $(patsubst %.o,%.mt.diag.o,$(SUBTARGETS))

SUBTARGETS_HEADER   := $(addsuffix .h,\
                         $(foreach srcdir,$(runtime_sourcedirs),\
                           $(addprefix ../runtime/$(srcdir)/,\
                             $(runtime_$(srcdir)))))
#
# We must treat the header file targets of the runtime subproject differently
# because some of the libsac source files include sac.h, which creates a 
# dependency that we don't desire but which we cannot avoid either. However,
# we must formulate the dependencies of sac.h in a way that works both when
# making the runtime subproject and when doing the libsac subproject.
# In particular, we hardcode the dependencies to '$(runtime)' rather than
# using the generic $(TARGETFILES) and we put an extra '../runtime' in front
# of the path.
#

GENERATED_INCLUDE_FILES := $(patsubst %.xsl,%,\
                             $(foreach dir,$(MAKE_DIRS),\
                               $(wildcard $(dir)/*.h.xsl))) \
                           $(patsubst %.xsl,%,\
                             $(foreach dir,$(MAKE_DIRS),\
                               $(wildcard $(dir)/*.mac.xsl))) \
                           $(patsubst %.y,%.tab.h,\
                             $(foreach dir,$(MAKE_DIRS),\
                               $(wildcard $(dir)/*.y)))

GENERATED_SOURCE_FILES := $(patsubst %.xsl,%,\
                            $(foreach dir,$(MAKE_DIRS),\
                              $(wildcard $(dir)/*.c.xsl))) \
                          $(patsubst %.y,%.tab.c,\
                            $(foreach dir,$(MAKE_DIRS),\
                              $(wildcard $(dir)/*.y))) \
                          $(patsubst %.l,%.lex.c,\
                            $(foreach dir,$(MAKE_DIRS),\
                              $(wildcard $(dir)/*.l))) \

GENERATED_FILES  := $(GENERATED_INCLUDE_FILES) $(GENERATED_SOURCE_FILES)

DEPENDENCY_FILES := $(addsuffix .d,\
                      $(foreach file,$(SUBTARGETS_RAW),\
                        $(dir $(file)).$(notdir $(file))))

  
###############################################################################
#
# Dummy rules
#

.PHONY: all makesubdir

.PRECIOUS: %.c %.h %.o %.p.o %.d.o %.d.mt.o %.p.mt.o .%.d \
           %.lex.c %.tab.c %.tab.h %.mac \
           %.d.diag.o %.p.diag.o %.d.mt.diag.o %.p.mt.diag.o 



###############################################################################
#
# Start rule
#

all: $(TARGETS)
	@ if [ -f .done ] ; \
          then $(RM) .done ; \
          else $(ECHO) "" ; \
               $(ECHO) "$(PROJECT_NAME) $(SUBPROJECT)" \
                       "($($(STYLE)_long) version) is up to date !"; \
          fi


###############################################################################
#
# Debugging rules
#

tutu:
	@$(ECHO) $(TARGETS) 
	@$(ECHO) $(SUBTARGETS) 
	@$(ECHO) $(DEPENDENCY_FILES)


###############################################################################
#
# Rules for making subdirectories
#

makesubdir: $(SUBTARGETS)
	@$(ECHO) ""


################################################################################
#
# Building make tools
#

$(PROJECT_ROOT)/src/bin/%: $(SUBTARGETS) 
	@$(ECHO) ""
	@$(ECHO) "Linking $(PREFIX_ROOT)src/bin/$* ($($(STYLE)_long) version)"
	$(HIDE) $(LD) $(LD_FLAGS) -o $@ \
                $(filter $*/%,$^) \
                $(LIBDIRS) $(LIB_MAKETOOLS) $(LIBS)
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  


################################################################################
#
# Building libsac2c
#

$(PROJECT_ROOT)/bin/sac2c: global/build_$(STYLE).$($(STYLE)_short).o
	@$(ECHO) ""
	@$(ECHO) "Linking $(PREFIX_ROOT)bin/sac2c ($($(STYLE)_long) version)"
	$(HIDE) $(LIBTOOL) $(LD) $(LDFLAGS) $(LD_FLAGS_DYN) -o $@ \
                $(SUBTARGETS) $< \
                $(LIBDIRS) $(LIB_MAKETOOLS) $(LIBS)
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  

$(PROJECT_ROOT)/bin/sac2c.efence: global/build_devel.d.o
	@$(ECHO) ""
	@$(ECHO) "Linking $(PREFIX_ROOT)bin/sac2c.efence (efence version)"
	$(HIDE) $(LIBTOOL) $(LD) $(LDFLAGS) $(LD_FLAGS_DYN) -o $@ \
                $(SUBTARGETS) $< \
                $(LIBDIRS) $(LIB_MAKETOOLS) $(LIBS) $(LIBS_EFENCE)
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  



################################################################################
#
# Building runtime header file
#

$(PROJECT_ROOT)/include/sac.h: $(SUBTARGETS_HEADER) 
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)include/sac.h"
	$(HIDE) $(HEADER_ZIPPER) $^ > $@
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  


################################################################################
#
# Building libsacprelude
#

$(PROJECT_ROOT)/lib/libsacprelude.so: $(SUBTARGETS) 
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/libsacprelude.so"
	$(HIDE) $(SAC2C) -o $(PROJECT_ROOT)/lib sacprelude.sac
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  


################################################################################
#
# Building libsac and libsacphm in various variants
#

$(PROJECT_ROOT)/lib/lib%_mt_diag.a: $(SUBTARGETS_MT_DIAG) 
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/lib$*_mt_diag.a ($($(STYLE)_long) version)"
	$(HIDE) $(AR) $@ $^
	$(HIDE) $(RANLIB) $@
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  

$(PROJECT_ROOT)/lib/lib%_seq_diag.a: $(SUBTARGETS_DIAG) 
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/lib$*_seq_diag.a ($($(STYLE)_long) version)"
	$(HIDE) $(AR) $@ $^
	$(HIDE) $(RANLIB) $@
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  

$(PROJECT_ROOT)/lib/lib%_mt.a: $(SUBTARGETS_MT) 
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/lib$*_mt.a ($($(STYLE)_long) version)"
	$(HIDE) $(AR) $@ $^
	$(HIDE) $(RANLIB) $@
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  

$(PROJECT_ROOT)/lib/lib%_seq.a: $(SUBTARGETS) 
	@$(ECHO) ""
	@$(ECHO) "Creating $(PREFIX_ROOT)lib/lib$*_seq.a ($($(STYLE)_long) version)"
	$(HIDE) $(AR) $@ $^
	$(HIDE) $(RANLIB) $@
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  


################################################################################
#
# Building tools
#

$(PROJECT_ROOT)/bin/%: $(SUBTARGETS)
	@$(ECHO) ""
	@$(ECHO) "Linking $(PREFIX_ROOT)bin/$* ($($(STYLE)_long) version)"
	$(HIDE) $(LD) $(LD_FLAGS) -o $@ \
                      $(filter $*/%,$^) \
                      $(LIBDIRS) $(LIB_TOOLS) $(LIBS)
	@$(TOUCH) .done
	@$(CLOCK_SKEW_ELIMINATION)  


###############################################################################
#
# Creating the revision data file
#
# We make snetc depend on the revision data file and in turn the revision data
# file depend on all target object files. By this dependency chain we achieve
# that only if one of the object files needs to be remade, we also remake the
# revision data file and, thereupon, relink snetc.
#

global/build_$(STYLE).c: $(SUBTARGETS) 
	@$(ECHO) ""
	@$(ECHO) "Creating revision data file:  $@"
	@$(ECHO) "char build_style[] = \"$($(STYLE)_long)\";"        >  $@
	@$(ECHO) "char build_date[]  = \"`date`\";"                  >> $@
	@$(ECHO) "char build_user[]  = \"$(USER)\";"                 >> $@
	@$(ECHO) "char build_host[]  = \"`hostname`\";"              >> $@
	@$(ECHO) "char build_os[]    = \"$(OS)\";"                   >> $@
	@$(ECHO) "char build_rev[]   = \"$(REVISION)\";"             >> $@
	@$(ECHO) "char build_ast[]   = \"`$(FINGERPRINTER_CALL)`\";" >> $@
	@$(CLOCK_SKEW_ELIMINATION)  


###############################################################################
#
# Pattern rules for compilation
#

%.$($(STYLE)_short).mt.diag.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded diagnostic $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) $(SETTINGS_DIAG) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short).diag.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling diagnostic $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_YY)  $(SETTINGS_DIAG) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short).mt.o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling multithreaded $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_MT) $(SETTINGS_MT) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 

%.$($(STYLE)_short).o: %.c 
	@if [ "compile $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "compile $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling $($(STYLE)_long) code:  $(notdir $<)"
	$(HIDE) $(CC_$($(STYLE)_cap)) \
                  $(CC_FLAGS_$($(STYLE)_cap)) $(SETTINGS_$($(STYLE)_cap)) \
                  $(CC_FLAGS_YY) \
                  $(INCDIRS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) 


###############################################################################
#
# Pattern rules for source code generation with xml and xslt
#

%.h: %.h.xsl $(XML_DIR)/ast.xml $(XML_COMMONS) 
	@if [ "generate header $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "generate header $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating header files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Generating header file from XML specification:  $(notdir $@)"
	$(HIDE)$(XSLTENGINE) $< $(XML_DIR)/ast.xml | $(CODE_BEAUTIFIER) >$@
	@$(CLOCK_SKEW_ELIMINATION)  

%.c: %.c.xsl $(XML_DIR)/ast.xml $(XML_COMMONS) 
	@if [ "generate source $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "generate source $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating source files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Generating source code from XML specification:  $(notdir $@)"
	$(HIDE)$(XSLTENGINE) $< $(XML_DIR)/ast.xml | $(CODE_BEAUTIFIER) >$@
	@$(CLOCK_SKEW_ELIMINATION)  

%.mac: %.mac.xsl $(XML_DIR)/ast.xml $(XML_COMMONS) 
	@if [ "generate macro $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "generate macro $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating macro files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Generating macro file from XML specification:  $(notdir $@)"
	$(HIDE)$(XSLTENGINE) $< $(XML_DIR)/ast.xml | $(CODE_BEAUTIFIER) >$@
	@$(CLOCK_SKEW_ELIMINATION)  


###############################################################################
#
# Pattern rules for source code generation with lex and yacc
#

%.lex.c: %.l 
	@if [ "generate source $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "generate source $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating source files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Generating source code from LEX specification:  $(notdir $@)"
	$(HIDE)$(LEX) $<
	$(HIDE)mv lex.yy.c $@
	@$(CLOCK_SKEW_ELIMINATION) 

%.tab.c: %.y 
	@if [ "generate source $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "generate source $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating source files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Generating source code from YACC specification:  $(notdir $@)"
	$(HIDE)$(YACC) $<
	$(HIDE)mv y.tab.c $@
	$(HIDE)$(RM) y.tab.h
	$(HIDE)mv y.output $(dir $@)
	@$(CLOCK_SKEW_ELIMINATION) 

%.tab.h: %.y 
	@if [ "generate header $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "generate header $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating header files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Generating header file from YACC specification:  $(notdir $@)"
	$(HIDE)$(YACC) $<
	$(HIDE)mv y.tab.h $@
	$(HIDE)$(RM) y.tab.c 
	$(HIDE)mv y.output $(dir $@)
	@$(CLOCK_SKEW_ELIMINATION) 


###############################################################################
#
# Pattern rules for header file generation with m4
#

%.h: %.h.m4 $(M4_DIR)/icm.m4
	@if [ "generate header $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "generate header $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating header files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	@$(ECHO) "  Generating header file from M4 macro specification: $(notdir $@)"
	$(HIDE) $(M4PROC) -I $(M4_DIR) $< > $@	


#######################################################################################
#
# Pattern rules for dependency tracking mechanism:
#

.%.d: %.c $(GENERATED_FILES) 
	@if [ "dependency $(dir $*)" != "`cat .make_track`" ] ; \
        then $(ECHO) "dependency $(dir $*)" > .make_track; \
             $(ECHO) ""; \
             $(ECHO) "Checking dependencies in directory $(PREFIX_LOCAL)$(dir $@)" ; \
        fi
	@$(ECHO) "  Checking dependencies of source file: $(notdir $<)"
	$(HIDE) if $(CC_DEVEL) $(CC_FLAGS_DEPS) $(SETTINGS_DEVEL) $(INCDIRS) $<  > $@d ; \
	 then sed 's/\($(notdir $*)\)\.o[ :]*/$(subst /,\/,$*)\.o $(subst /,\/,$*)\.p.o $(subst /,\/,$*)\.d.o $(subst /,\/,$*)\.p.mt.o $(subst /,\/,$*)\.d.mt.o $(subst /,\/,$*)\.p.diag.o $(subst /,\/,$*)\.d.diag.o  $(subst /,\/,$*)\.p.mt.diag.o $(subst /,\/,$*)\.d.mt.diag.o $(subst /,\/,$@)\: ..\/makefiles\/config.mkf /'  <$@d >$@; \
	      $(RM) $@d ; \
	 else $(RM) $@d ; \
	      exit 1 ;  \
	 fi
	@$(CLOCK_SKEW_ELIMINATION) 



###############################################################################
#
# Includes for dependency tracking mechanism
#

ifeq ($(DEPS),yes)
  ifneq ($(DEPENDENCY_FILES),)
    -include $(DEPENDENCY_FILES)
  endif
endif


