#
# $Id$
#

#######################################################################################
#
# Comment:
#
# This makefile is never called directly by the user nor is it included by other 
# makefiles. Instead, it is used in recursive calls to make by both the top-level
# makefile and the local src directory makefile.
#
# Hence, we can expect variables to be preset from the outside:
#
# SUBPROJECT      : name of subproject (must be set)
#
# SUBPROJECT_DIRS : name of specific source directory of subproject
#                   set by source.mkf but not by subrpoject.mkf
#
# STYLE           : must be set to either default, devel or prod
#


#######################################################################################
#
# general setup:
#

PROJECT_ROOT     := ../..

MAKEFILE_DIR     := $(PROJECT_ROOT)/src/makefiles

include $(MAKEFILE_DIR)/config.mkf
include $(MAKEFILE_DIR)/settings.mkf
include $(MAKEFILE_DIR)/targets.mkf

SUBPROJECT_DIRS  := $($(SUBPROJECT)_sourcedirs)

MAKE_DIRS        := $(SUBPROJECT_DIRS)
#
# preset by source.mkf to specific directory 
#

SOURCE_FILES     := $(foreach dir,$(MAKE_DIRS),\
                      $(wildcard $(dir)/*.c) \
                      $(wildcard $(dir)/*.h))

GENERATED_INCLUDE_FILES := $(patsubst %.xsl,%,\
                             $(foreach dir,$(MAKE_DIRS),\
                               $(wildcard $(dir)/*.h.xsl))) \
                           $(patsubst %.xsl,%,\
                             $(foreach dir,$(MAKE_DIRS),\
                               $(wildcard $(dir)/*.mac.xsl))) \
                           $(patsubst %.y,%.tab.h,\
                             $(foreach dir,$(MAKE_DIRS),\
                               $(wildcard $(dir)/*.y)))

GENERATED_SOURCE_FILES := $(patsubst %.xsl,%,\
                            $(foreach dir,$(MAKE_DIRS),\
                              $(wildcard $(dir)/*.c.xsl))) \
                          $(patsubst %.y,%.tab.c,\
                            $(foreach dir,$(MAKE_DIRS),\
                              $(wildcard $(dir)/*.y))) \
                          $(patsubst %.l,%.lex.c,\
                            $(foreach dir,$(MAKE_DIRS),\
                              $(wildcard $(dir)/*.l))) \

GENERATED_FILES  := $(GENERATED_INCLUDE_FILES) $(GENERATED_SOURCE_FILES)

GENERATOR_FILES  := $(foreach dir,$(MAKE_DIRS),\
                      $(wildcard $(dir)/*.xsl $(dir)/*.mac \
                                 $(dir)/*.l $(dir)/*.y))

REFACTOR_FILES   := $(sort $(filter-out $(GENERATED_FILES),\
                             $(SOURCE_FILES)) \
                           $(GENERATOR_FILES))

REFACTOR_TARGETS := $(addsuffix .ref,$(REFACTOR_FILES))

  
###############################################################################
#
# Dummy rules
#

.PHONY: all 

.PRECIOUS: %.ref 


###############################################################################
#
# Start rule
#

all: $(REFACTOR_TARGETS)
	@$(ECHO) ""


###############################################################################
#
# Pattern rules for refactoring
#

%.ref: %
	@if [ "refactor $(dir $*)" != "`cat .make_track`" ] ; \
         then $(ECHO) "refactor $(dir $*)" > .make_track; \
              $(ECHO) ""; \
              $(ECHO) "Refactoring files in directory $(PREFIX_LOCAL)$(dir $@)" ; \
         fi
	$(HIDE) occur=`$(GREP) "$(PATTERN)" $< | $(WC) -l` ; \
                if [ $$occur -eq 0 ] ; \
                then $(ECHO) "  Skipping file: $(notdir $<)" ; \
                else $(ECHO) "  Refactoring file: $(notdir $<)" \
                             "  ($$occur occurrences)" ; \
                     $(SED) 's/$(PATTERN)/$(OUTPUT)/g' < $< > $@ ; \
                     $(MV) $@ $< ; \
                fi
