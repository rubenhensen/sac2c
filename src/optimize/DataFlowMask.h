/*
 *
 * $Log$
 * Revision 1.2  1998/05/05 15:54:00  cg
 * first running revision
 *
 * Revision 1.1  1998/05/04 15:53:12  cg
 * Initial revision
 *
 *
 */

/*****************************************************************************
 *
 * file:   DataFlowMask.h
 *
 * prefix: DFM
 *
 * description:
 *
 *   This is the header file of a module providing sophisticated support
 *   for binary data flow masks. These data flow masks consist of a mask
 *   data base which has to be generated for each function individually
 *   in advance and of single masks which may be assigned to arbitrary
 *   nodes, usually those of type N_assign or N_block respectively.
 *   Therefore, two abstract data types are provided for mask data bases
 *   (DFMmask_base_t) and for single masks (DFMmask_t).
 *
 *   A new mask data base may be generated by applying the function
 *   DFMGenMaskBase() to a function's parameter list and local variable
 *   declarations, thereby storing the required data in an internal format
 *   suitable for further processing. An existing mask data base may be
 *   extended when additional parameters or local variables have been
 *   introduced by applying the function DFMExtendMaskBase() to the perhaps
 *   modified representations of parameters and local variables as well as
 *   the existing mask data base.
 *
 *   An existing mask data base may also be removed by a call to the function
 *   DFMRemoveMaskBase() which always returns the NULL pointer.
 *
 *   There are 5 ways to generate a new data flow mask. This can either be
 *   done from scratch or based on one or two existing masks. In the first
 *   case a mask data base must be provided to a call to one of the functions
 *   DFMGenMaskClear() or DFMGenMaskSet() which generate a new mask from scratch
 *   whose mask entries are either all cleared or all set. In the second
 *   case, an existing mask may either be copied or inverted or two existing
 *   masks are combined into a single new one by a binary operator.
 *
 *   Analogously to the GenMask family of functions the SetMask family of
 *   functions modifies the first or only given mask rather than generating
 *   a new mask.
 *
 *   The function DFMTestMask() checks whether any bit in the given mask is set.
 *   The functions DFMTest2Masks() and DFMTest3Masks() check whether any bit is set
 *   in each given mask.
 *
 *   The function DFMRemoveMask() de-allocates storage for a single data flow
 *   mask. It always returns the NULL pointer.
 *
 *   The function DFMPrintMask() prints a list of all those
 *   identifiers whose bit in the data flow mask is set. An open output
 *   stream must be provided as first argument. The second argument must be
 *   custom format string which contains exactly one conversion specifier '%s'.
 *
 *   The functions DFMSetMaskEntry() and DFMClearMaskEntry() respectively set or
 *   clear the data flow mask bit assigned to a particular identifier whereas
 *   DFMTestMaskEntry() tests whether this bit is set or not.
 *
 *****************************************************************************/

#ifndef DATAFLOWMASK_H

#define DATAFLOWMASK_H

#include <stdio.h>
#include "types.h"

/*
 * abstract data types
 */

typedef void *DFMmask_base_t;
typedef void *DFMmask_t;

/*
 * function declarations
 */

extern DFMmask_base_t DFMGenMaskBase (node *arguments, node *vardecs);
extern DFMmask_base_t DFMExtendMaskBase (DFMmask_base_t mask_base, node *arguments,
                                         node *vardecs);
extern DFMmask_base_t DFMRemoveMaskBase (DFMmask_base_t mask_base);

extern DFMmask_t DFMGenMaskClear (DFMmask_base_t mask_base);
extern DFMmask_t DFMGenMaskSet (DFMmask_base_t mask_base);
extern DFMmask_t DFMGenMaskCopy (DFMmask_t mask);
extern DFMmask_t DFMGenMaskAnd (DFMmask_t mask1, DFMmask_t mask2);
extern DFMmask_t DFMGenMaskOr (DFMmask_t mask1, DFMmask_t mask2);
extern DFMmask_t DFMGenMaskInv (DFMmask_t mask);

extern void DFMSetMaskClear (DFMmask_t mask);
extern void DFMSetMaskSet (DFMmask_t mask);
extern void DFMSetMaskCopy (DFMmask_t mask);
extern void DFMSetMaskAnd (DFMmask_t mask, DFMmask_t mask2);
extern void DFMSetMaskOr (DFMmask_t mask, DFMmask_t mask2);
extern void DFMSetMaskInv (DFMmask_t mask);

extern int DFMTestMask (DFMmask_t mask);
extern int DFMTest2Masks (DFMmask_t mask1, DFMmask_t mask2);
extern int DFMTest3Masks (DFMmask_t mask1, DFMmask_t mask2, DFMmask_t mask3);

extern DFMmask_t DFMRemoveMask (DFMmask_t mask);

extern void DFMPrintMask (FILE *handle, const char *format, DFMmask_t mask);

extern void DFMSetMaskEntryClear (DFMmask_t mask, char *id);
extern void DFMSetMaskEntrySet (DFMmask_t mask, char *id);
extern int DFMTestMaskEntry (DFMmask_t mask, char *id);

#endif /* DATAFLOWMASK_H */
