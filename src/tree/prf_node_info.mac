/*
 *
 * $Log$
 * Revision 3.20  2004/02/02 14:25:55  mwe
 * F_phi added
 *
 * Revision 3.19  2003/09/29 18:17:50  dkr
 * no changes done
 *
 * Revision 3.18  2003/09/25 10:54:42  dkr
 * to_unq() and from_unq() are prfs now
 *
 * Revision 3.17  2003/09/10 09:43:24  sbs
 * NTCPRF_take_SxV added.
 *
 * Revision 3.16  2003/04/09 15:36:34  sbs
 * ntc parameters completed !
 *
 * Revision 3.15  2003/04/04 17:14:46  sbs
 * table extended for cf!
 *
 * Revision 3.14  2003/03/19 10:32:52  sbs
 * NTCPRF_cat_VxV and NTCPRF_drop_SxV used now!
 * Note here, that NTCPRF_drop_SxV can also be used for take
 * until we get the extension to constant types!
 *
 * Revision 3.13  2003/03/18 16:30:34  sah
 * added new prf cat_VxV, take_SxV, drop_SxV
 *
 * Revision 3.12  2002/10/10 12:18:21  sbs
 * prf_arity added (for usage in sac.y)
 *
 * Revision 3.11  2002/09/11 23:20:24  dkr
 * - some PRFs renamed
 * - prf_name_string[] removed
 * - prf_symbol[] added
 * - prf_is_infix[] added
 *
 * Revision 3.10  2002/09/09 20:35:56  dkr
 * mdb_prf corrected
 *
 * Revision 3.9  2002/09/09 19:08:33  dkr
 * prf_name_str modified
 *
 * Revision 3.8  2002/09/09 17:30:59  dkr
 * comment about prf categories removed
 *
 * Revision 3.7  2002/09/09 16:48:31  dkr
 * prf_string-entry for F_mul_SxS corrected!!!
 *
 * Revision 3.6  2002/08/30 10:49:54  dkr
 * F_type_error added
 *
 * Revision 3.5  2002/08/06 15:52:52  sbs
 * F_xxx_SxS added.
 *
 * Revision 3.4  2002/08/05 17:03:45  sbs
 * several extensions required for the alpha version of the new type checker
 *
 * Revision 3.3  2002/07/29 12:13:43  sbs
 * PRF_IF macro extended by z.
 *
 * Revision 3.2  2001/06/28 07:46:51  cg
 * Primitive function psi() renamed to sel().
 *
 * Revision 3.1  2000/11/20 18:03:27  sacbase
 * new release made
 *
 * .....[ eliminated ]
 *
 * Revision 1.3  1994/11/10  15:44:34  sbs
 * RCS-header inserted
 *
 */

/**
 **
 **  Some macro definitions used for the automatic creation
 **  of tables which depend on the correct order of the tags
 **  for the prf Type
 **
 **/

/*
 *      node_name        mdb_prf[]          prf_string[]        prf_symbol[]
 *      prf_is_infix[]   prf_arity          NTCPRF_funtab[]     NTCPRF_cffuntab[]
 */

PRF_IF (F_toi_S, "F_toi_S", "_toi_S_", "toi", FALSE, 1, NTCPRF_toiS, COToi),
  PRF_IF (F_toi_A, "F_toi_A", "_toi_A_", "toi", FALSE, 1, NTCPRF_toiA, COToi),
  PRF_IF (F_tof_S, "F_tof_S", "_tof_S_", "tof", FALSE, 1, NTCPRF_tofS, COTof),
  PRF_IF (F_tof_A, "F_tof_A", "_tof_A_", "tof", FALSE, 1, NTCPRF_tofA, COTof),
  PRF_IF (F_tod_S, "F_tod_S", "_tod_S_", "tod", FALSE, 1, NTCPRF_todS, COTod),
  PRF_IF (F_tod_A, "F_tod_A", "_tod_A_", "tod", FALSE, 1, NTCPRF_todA, COTod),

  PRF_IF (F_neg, "F_neg", "_neg_", "neg", FALSE, 1, NTCPRF_ari_op_A, CONeg),
  PRF_IF (F_abs, "F_abs", "_abs_", "abs", FALSE, 1, NTCPRF_ari_op_A, COAbs),
  PRF_IF (F_not, "F_not", "_not_", "!", TRUE, 1, NTCPRF_log_op_A, CONot),

  PRF_IF (F_and, "F_and", "_and_", "&&", TRUE, 2, NTCPRF_log_op_AxA, COAnd),
  PRF_IF (F_or, "F_or", "_or_", "||", TRUE, 2, NTCPRF_log_op_AxA, COOr),
  PRF_IF (F_eq, "F_eq", "_eq_", "==", TRUE, 2, NTCPRF_rel_op_AxA, COEq),
  PRF_IF (F_neq, "F_neq", "_neq_", "!=", TRUE, 2, NTCPRF_rel_op_AxA, CONeq),
  PRF_IF (F_le, "F_le", "_le_", "<=", TRUE, 2, NTCPRF_rel_op_AxA, COLe),
  PRF_IF (F_lt, "F_lt", "_lt_", "<", TRUE, 2, NTCPRF_rel_op_AxA, COLt),
  PRF_IF (F_ge, "F_ge", "_ge_", ">=", TRUE, 2, NTCPRF_rel_op_AxA, COGe),
  PRF_IF (F_gt, "F_gt", "_gt_", ">", TRUE, 2, NTCPRF_rel_op_AxA, COGt),

  PRF_IF (F_min, "F_min", "_min_", "min", FALSE, 2, NTCPRF_ari_op_SxS, COMin),
  PRF_IF (F_max, "F_max", "_max_", "max", FALSE, 2, NTCPRF_ari_op_SxS, COMax),
  PRF_IF (F_mod, "F_mod", "_mod_", "%", TRUE, 2, NTCPRF_int_op_SxS, COMod),

  PRF_IF (F_add_SxS, "F_add_SxS", "_add_SxS_", "+", TRUE, 2, NTCPRF_ari_op_SxS, COAdd),
  PRF_IF (F_add_SxA, "F_add_SxA", "_add_SxA_", "+", TRUE, 2, NTCPRF_ari_op_SxA, COAdd),
  PRF_IF (F_add_AxS, "F_add_AxS", "_add_AxS_", "+", TRUE, 2, NTCPRF_ari_op_AxS, COAdd),
  PRF_IF (F_add_AxA, "F_add_AxA", "_add_AxA_", "+", TRUE, 2, NTCPRF_ari_op_AxA, COAdd),
  PRF_IF (F_sub_SxS, "F_sub_SxS", "_sub_SxS_", "-", TRUE, 2, NTCPRF_ari_op_SxS, COSub),
  PRF_IF (F_sub_SxA, "F_sub_SxA", "_sub_SxA_", "-", TRUE, 2, NTCPRF_ari_op_SxA, COSub),
  PRF_IF (F_sub_AxS, "F_sub_AxS", "_sub_AxS_", "-", TRUE, 2, NTCPRF_ari_op_AxS, COSub),
  PRF_IF (F_sub_AxA, "F_sub_AxA", "_sub_AxA_", "-", TRUE, 2, NTCPRF_ari_op_AxA, COSub),
  PRF_IF (F_mul_SxS, "F_mul_SxS", "_mul_SxS_", "*", TRUE, 2, NTCPRF_ari_op_SxS, COMul),
  PRF_IF (F_mul_SxA, "F_mul_SxA", "_mul_SxA_", "*", TRUE, 2, NTCPRF_ari_op_SxA, COMul),
  PRF_IF (F_mul_AxS, "F_mul_AxS", "_mul_AxS_", "*", TRUE, 2, NTCPRF_ari_op_AxS, COMul),
  PRF_IF (F_mul_AxA, "F_mul_AxA", "_mul_AxA_", "*", TRUE, 2, NTCPRF_ari_op_AxA, COMul),
  PRF_IF (F_div_SxS, "F_div_SxS", "_div_SxS_", "/", TRUE, 2, NTCPRF_ari_op_SxS, CODiv),
  PRF_IF (F_div_SxA, "F_div_SxA", "_div_SxA_", "/", TRUE, 2, NTCPRF_ari_op_SxA, CODiv),
  PRF_IF (F_div_AxS, "F_div_AxS", "_div_AxS_", "/", TRUE, 2, NTCPRF_ari_op_AxS, CODiv),
  PRF_IF (F_div_AxA, "F_div_AxA", "_div_AxA_", "/", TRUE, 2, NTCPRF_ari_op_AxA, CODiv),

  PRF_IF (F_dim, "F_dim", "_dim_", "dim", FALSE, 1, NTCPRF_dim, CODim),
  PRF_IF (F_shape, "F_shape", "_shape_", "shape", FALSE, 1, NTCPRF_shape, COShape),
  PRF_IF (F_reshape, "F_reshape", "_reshape_", "reshape", FALSE, 2, NTCPRF_reshape,
          COReshape),
  PRF_IF (F_idx_sel, "F_idx_sel", "_idx_sel_", "idx_sel", FALSE, 2, NTCPRF_dummy, NULL),
  PRF_IF (F_idx_modarray, "F_idx_modarray", "_idx_modarray_", "idx_modarray", FALSE, 3,
          NTCPRF_dummy, NULL),
  PRF_IF (F_sel, "F_sel", "_sel_", "sel", FALSE, 2, NTCPRF_selS, COSel),
  PRF_IF (F_modarray, "F_modarray", "_modarray_", "modarray", FALSE, 3, NTCPRF_modarrayS,
          COModarray),
  PRF_IF (F_genarray, "F_genarray", "_genarray_", "genarray", FALSE, 2, NTCPRF_dummy,
          NULL),

  PRF_IF (F_take, "F_take", "_take_", "take", FALSE, 2, NTCPRF_dummy, NULL),
  PRF_IF (F_drop, "F_drop", "_drop_", "drop", FALSE, 2, NTCPRF_dummy, NULL),
  PRF_IF (F_cat, "F_cat", "_cat_", "cat", FALSE, 3, NTCPRF_dummy, NULL),
  PRF_IF (F_rotate, "F_rotate", "_rotate_", "rotate", FALSE, 3, NTCPRF_dummy, NULL),

  PRF_IF (F_cat_VxV, "F_cat_VxV", "_cat_VxV_", "cat", FALSE, 2, NTCPRF_cat_VxV, COCat),
  PRF_IF (F_take_SxV, "F_take_SxV", "_take_SxV_", "take", FALSE, 2, NTCPRF_take_SxV,
          COTake),
  PRF_IF (F_drop_SxV, "F_drop_SxV", "_drop_SxV_", "drop", FALSE, 2, NTCPRF_drop_SxV,
          CODrop),

  PRF_IF (F_to_unq, "F_to_unq", "_to_unq_", "to_unq", FALSE, 1, NTCPRF_dummy, NULL),
  PRF_IF (F_from_unq, "F_from_unq", "_from_unq_", "from_unq", FALSE, 1, NTCPRF_dummy,
          NULL),
  PRF_IF (F_type_error, "F_type_error", "_type_error_", "type_error", FALSE, 1,
          NTCPRF_dummy, NULL),

  PRF_IF (F_phi, "F_phi", "_phi_", "phi", FALSE, 2, NTCPRF_dummy, NULL)
