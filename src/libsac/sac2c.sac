module sac2c;

provide {sel, zero, eq};

#define BUILT_IN( fun)    \
fun( int)                 \
fun( float)               \
fun( double)              \
fun( bool)                \
fun( char)


#define SEL_VxA( a)                                                      \
inline                                                                   \
a[*] sel( int[.] idx, a[*] array)                                        \
{                                                                        \
  new_shape = _drop_SxV_( _sel_( [0], _shape_(idx)), _shape_(array));    \
  res = with( . <= iv <= .) {                                            \
          new_idx = _cat_VxV_( idx, iv);                                 \
        } genarray( new_shape, _sel_(new_idx, array), zero( array));     \
  return( res);                                                          \
}

BUILT_IN( SEL_VxA)




#define ZERO( a, za)  \
inline                \
a zero( a[*] A)       \
{                     \
  return( za);        \
}

ZERO( int, 0)
ZERO( double, 0d)
ZERO( float, 0f)
ZERO( char, ' ')
ZERO( bool, false)

inline
bool and( bool a, bool b)
{
  return( _and_( a, b));
}

#define EQ( a)                                                       \
inline                                                               \
bool eq( a[*] A, a[*] B)                                             \
{                                                                    \
  res = with( _mul_SxA_(0, _shape_(A)) <= iv < _shape_(A))           \
        fold( sac2c::and, true,                                      \
              _eq_(_sel_( iv, A), _sel_( iv, B)));                   \
  return( res);                                                      \
}

BUILT_IN( EQ)

