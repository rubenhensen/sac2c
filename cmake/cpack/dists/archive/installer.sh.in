#!/usr/bin/env bash

# Created by SaC Development Team (C) 2016 - 2017

# This is the installer script for the SaC Compiler and Runtime libraries.
#
# This script takes two *required* parameters, the location of the extracted
# tarball files, and the prefix of where to install/copy them over to.
# 
# It does the following:
#  - check the parameters are sane
#   - checks that the prefix (install) location is present
#   - checks the directories with binary sources and libraries are present
#  - checks that the version number of the binaries and libraries matches
#  - creates a temporary Makefile and calls make to generate the binaries
#  - copies over the binaries and libraries to prefix
#
# It is assumed that the TAR.GZ. has been extracted.

#
# Globals
#

VERSION="1.3"
VERBOSE=0
ARCHIVEDIRS=("share" "include" "lib" "libexec")

# these are meant to be uninitialised
INSTALLDIR=
SOURCEDIR=

# Filled in by build system
ORIGPREFIX="@CMAKE_INSTALL_PREFIX@"
BINPOSTFIX="@BUILD_TYPE_POSTFIX@"
SHAREDLIBEXT="@SHARED_LIB_EXT@"
SAC_VERSION="@SAC2C_VERSION@"

#
# Helper Functions
#

verbose() { if [[ $VERBOSE = 1 ]]; then echo -e "[VERB]: ${@}"; fi }
verbose2() { if [[ $VERBOSE = 1 ]]; then echo -e "[VERB]: - ${@}"; fi }
warning() { echo -e "[WARN]: ${@}" 1>&2; }
error() { echo -e "[ERROR]: ${@}" 1>&2; }
fatal_error() { error "${@}"; exit 10; }
abspath()
{
  if [[ -d "$1" ]]; then
    (cd "$1"; pwd)
  elif [[ -e "$1" ]]; then
    local l=$(dirname "$1")
    local p=$(cd "$l"; pwd)
    echo "$p/$(basename "$1")"
  else
    fatal_error "\`$1' does not exist"
  fi
}
usage() { echo "Usage: $0 [-h] [-v] [-V] [-s SOURCE] [-i INSTALL]" 1>&2; }
help_msg() {
  cat <<EOF >&2

  Options:
    -h            Print this help message and exit
    -v            Display verbose messages
    -V            Print version and exit
    -s SOURCE     Specify source location of SaC compiler files
    -i INSTALL    Specify the installation location
EOF
}

#
# Functions
#

## Argument Parsing
argparse()
{
  while getopts "hvVs:i:" o; do
    case "${o}" in
      v) # activate verbose printing
        VERBOSE=1
        ;;
      V)
        echo "$0 $VERSION (c) SaC Developer Team"
        exit 0
        ;;
      s)
        SOURCEDIR=${OPTARG}
        ;;
      i)
        INSTALLDIR=${OPTARG}
        ;;
      h)
        usage
        help_msg
        exit 0
        ;;
      \?) # if we pass any flag that is unknown
        usage
        exit 1
        ;;
    esac
  done

  # if no options were passed, we just show a message and exit
  if [[ $OPTIND == 1 ]]; then
    echo "No options passed..." 1>&2
    usage
  fi
  shift $((OPTIND-1))

  local sdir=$(abspath "$SOURCEDIR")
  verbose "Absolute path of \`-s' is $sdir"
  local idir=$(abspath "$INSTALLDIR")
  verbose "Absolute path of \`-i' is $idir"

  if [[ "z$sdir" = "z" || "z$idir" = "z" ]]; then
    fatal_error "-----------------------------------\n" \
                "Missing parameters for the source location of\n" \
                "the SaC binaries and/or the install prefix,\n" \
                "these can be set with -s and -i, respectively\n"
  elif [[ "z$sdir" = "z$idir" ]]; then
    fatal_error "You cannot install the files within source location"
  fi

  SOURCEDIR="$sdir"
  INSTALLDIR="$idir"
}

# Check if the install location exists, and is writeable to the user
check_install()
{
  verbose "Checking install location"

  if [[ -d "$INSTALLDIR" ]]; then
    if [[ ! -r "$INSTALLDIR" && ! -w "$INSTALLDIR" ]]; then
      fatal_error "\`$INSTALLDIR' is not writeable for the current user (do you" \
        "need root-access?)."
    fi
  else
    fatal_error "\`$INSTALLDIR' does not seem to exist. Please create it."
  fi
}

# Check the source location exists, and that all files are present
check_source()
{
  verbose "Checking source location"

  if [[ ! -d "$SOURCEDIR" ]]; then
    fatal_error "\`$SOURCEDIR' does not exist, is this where you extracted the tarball?"
  fi
  
  verbose2 "$SOURCEDIR exists"
  
  if [[ ! -d "$SOURCEDIR/src" ]]; then
    fatal_error "No source directory found"
  fi
  
  verbose2 "Found source dir"
  
  local count=$(ls -l "$SOURCEDIR/src" | wc -l)
  if [[ $count == 0 ]]; then
    fatal_error "No source files found in \`$SOURCEDIR/src'"
  fi
  
  verbose2 "Found source files"
  
}

check_source_structure()
{
  if [[ ! -w "$SOURCEDIR/src/sacdirs.h" ]]; then
    fatal_error "Unable to access \`sacdirs.h' file, is it missing?"
  fi
  
  for dir in "${ARCHIVEDIRS[@]}"; do
    local fdir="$SOURCEDIR/$dir"
    # confirm that the dir exists and layout is correct
    if [[ ! -d "$fdir" ]]; then
      fatal_error "Missing \`$dir' in $SOURCEDIR"
    elif [[ ! -d "$fdir/sac2c" ]]; then
      fatal_error "Missing \`sac2c' in $fdir"
    fi
  
    # make sure we have only one dir under $fdir/sac2c
    $(ls -l "$fdir/sac2c" | grep "$SAC_VERSION" >/dev/null)
    if [[ $? > 0 ]]; then
      fatal_error "Wrong version found in $fdir/sac2c. Something is wrong with your tarball extraction..."
    fi
  done
}

#
# Main Procedure
#

argparse ${@}
check_install
check_source
check_source_structure

# we make some backups
if [[ ! -f "$SOURCEDIR/src/sacdirs.h.orig" ]]; then
  cp "$SOURCEDIR/src/sacdirs.h" "$SOURCEDIR/src/sacdirs.h.orig"
fi
if [[ ! -f "$SOURCEDIR/src/sac2crc$BINPOSTFIX.orig" ]]; then
  cp "$SOURCEDIR/share/sac2c/$SAC_VERSION/sac2crc$BINPOSTFIX" "$SOURCEDIR/src/sac2crc$BINPOSTFIX.orig"
fi

# If the prefixes match, then we don't need to change anything.
if [[ "x$INSTALLDIR" != "x$ORIGPREFIX" ]]; then
  # do an in-place replacement
  sed -e "s|$ORIGPREFIX|$INSTALLDIR|" -i "$SOURCEDIR/src/sacdirs.h"

  # and lets not for get to update the sac2crc file
  sed -re "s|$ORIGPREFIX(.*sac2c.*)|$INSTALLDIR\1|" -i "$SOURCEDIR/share/sac2c/$SAC_VERSION/sac2crc$BINPOSTFIX"

  verbose "Updated sacdirs.h and sac2crc files with new prefix: $INSTALLDIR"
fi

# create tmp makefile with targets
tmpfile=$(mktemp)
# ensure we delete the tmpfile when anything happens - including
# exiting the script correctly.
trap "rm -f -- $tmpfile" INT TERM HUP EXIT
stab=$'\t' # hackish way of getting tabs into heredoc

# FIXME: there might be a better way of doing this... 
cat <<-WHATWHAT > "$tmpfile"
CFLAGS+= -I. -DBUILD_TYPE_POSTFIX=\"$BINPOSTFIX\" -DSHARED_LIB_EXT=\"$SHAREDLIBEXT\"
LDFLAGS+= -ldl
all: sac2c$BINPOSTFIX sac4c$BINPOSTFIX sac2tex$BINPOSTFIX
sac2c$BINPOSTFIX: sac2c.c sactools.h sacdirs.h
$stab\$(CC) \$(CFLAGS) \$(LDFLAGS) \$^ -o \$@
sac4c$BINPOSTFIX: sac4c.c sactools.h sacdirs.h
$stab\$(CC) \$(CFLAGS) \$(LDFLAGS) \$^ -o \$@
sac2tex$BINPOSTFIX: sac2tex.c sactools.h sacdirs.h
$stab\$(CC) \$(CFLAGS) \$(LDFLAGS) \$^ -o \$@
WHATWHAT

verbose "Created temp Makefile, now building"

# run make
make -C "$SOURCEDIR/src" -f "$tmpfile"
if [[ $? != 0 ]]; then
  exit $?;
fi
verbose "Completed making binaries"

verbose "Installing binaries and libraries to \`$INSTALLDIR'"

# first we install libraries
for dir in "${ARCHIVEDIRS[@]}"; do
  fdir="$SOURCEDIR/$dir"
  cp -r "$fdir" "$INSTALLDIR"
  if [[ $? != 0 ]]; then
    fatal_error "Copying of \`$fdir' failed"
  fi
done

# then we install binaries
files=($SOURCEDIR/src/*_*)
cp "${files[@]}" "$INSTALLDIR/libexec/sac2c/$SAC_VERSION"
if [[ $? != 0 ]]; then
  fatal_error "Copying of binaries to \`$INSTALLDIR/libexec/sac2c/$SAC_VERSION' failed"
fi

echo "The install is complete"

exit 0
# vim: ts=2 sw=2 et:
