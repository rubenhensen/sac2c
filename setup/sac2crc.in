/*
 *
 * $Id$
 *
 */

/******************************************************************************
 * 
 * file:  sac2crc
 *
 ******************************************************************************
 * 
 * description:
 *
 *  sac2c public configuration file generated from sac2crc.in by configure.
 *
 *  This file allows to customize sac2c for specific target systems.
 *  Here are the definitions of the targets which can be specified 
 *  using the -target option when calling sac2c.
 *  
 *  The special default target presets each configuration entry. The value 
 *  of an entry is always a string. Embracing the string with quotation
 *  marks is only required if it contains whitespaces or special characters.
 *  Once a single entry string becomes lengthy, it may easily be cut into
 *  several substrings and written in consecutive lines.
 *  
 *  Targets other than default implicitly inherit all settings from the
 *  default target. Selected entries may then be updated for the specific
 *  needs of a particular target system. Strings may also be extended rather
 *  than updated by writing "+=" instead of ":=".
 *  
 *  Each target may inherit settings from other targets. This is simply
 *  specified by "::<name>" follwing directly behind the name of the new
 *  target. Multiple inheritence is possible and will be resolved in the
 *  same sequence as the inherited targets appear.
 *
 ******************************************************************************
 *
 * caution:
 *
 *  sac2c will not check for recursively inheriting targets. This may cause
 *  non-terminating compiler runs.
 *
 ******************************************************************************/
 


/******************************************************************************
 * 
 * description of configuration entries:
 *
 ******************************************************************************
 *
 *  CC              CC specifies the C compiler which is called by sac2c in 
 *                  order to generate machine code.
 *                  
 *  CCFLAGS         CCFLAGS specifies the flags CC is always called with.
 *                  
 *  CCDIR           CCDIR specifies the directories where CC has to look for
 *                  non-standard header files, object code files, and libraries.
 *
 *  LDFLAGS         LDFLAGS specifies the linker flags to be used when creating
 *                  executables. These have to be specified in the way the 
 *                  C compiler (specified in CC) expects them to be, e.g., in
 *                  case of gcc :   "-Wl,-multiple_defines,supress"
 *                  instead of      "-multiple_defines supress"        .
 * 
 *  LD_DYNAMIC      Linker call required to build a dynamic library. The 
 *                  compiler replaces all occurences of %libname% with the
 *                  filename of the library. If LD_DYNAMIC is empty, no 
 *                  dynamic library will be built.
 *
 *  LD_PATH         Defines how to set the search path of the linker. All
 *                  occurrences of %path% will be replaced by the path to add.
 *                  The string is repeated for each path.
 *                  
 *  CCLINK          CCLINK specifies the libraries an executable always has to
 *                  be linked with. 
 *                  
 *  CCMTLINK        CCMTLINK specifies the libraries a multi-threaded executable
 *                  has to be linked with, additionally. 
 *
 *  CCDLLINK        CCDLLINK specifies the libraries an executable that makes use
 *                  of runtime specialization has to be linked with, additionally. 
 *
 *  TREE_CC         Specifies the C compiler call required to build a component
 *                  of the syntax tree representation used in modules. This 
 *                  needs to be the same as used when compiling the compiler 
 *                  itself.
 *
 *  TREE_LD         Specifies the linker call required to assemble the syntax
 *                  tree part of a compiled module. This needs to be the same
 *                  as used when compiling the compiler itself.
 *
 *  LD_PATH         Defines how to set the search path of the linker when
 *                  linking the tree representation of a module. All 
 *                  occurrences of %path% will be replaced by the path to add.
 *                  The string is repeated for each path; it needs to be the 
 *                  same as used when compiling the compiler itself.
 *
 *  BACKEND         Defines which backend to use for a target. 
 *
 *  LIB_VARIANT     Gives a tag that will be added to the name of each
 *                  library that result of the compilation of a SAC module
 *                  file. Useful to keep multiple versions of the standard
 *                  library for different targets.
 *   
 *  OPT_O0          OPT_O0 specifies the C compiler option to disable optimizations.
 *                  This is triggered by the sac2c option -O0.
 *                  
 *  OPT_O1          OPT_O1 specifies the C compiler option to enable minor
 *                  optimization. This is triggered by the sac2c option -O1.
 *                  
 *  OPT_O2          OPT_O2 specifies the C compiler option to enable medium
 *                  optimization. This is triggered by the sac2c option -O2.
 *                  
 *  OPT_O3          OPT_O3 specifies the C compiler option to enable full
 *                  optimization. This is triggered by the sac2c option -O3.
 *                  
 *  OPT_g           OPT_g specifies the C compiler option to add debug information
 *                  into the generated machine code for later usage by a debugger.
 *                  This is triggered by the sac2c option -g.
 *                  
 *  OPT_D           OPT_D specifies the C compiler option to define a macro.
 *                  
 *  OPT_I           OPT_I specifies the C compiler option to specify a path for
 *                  include files.
 *                  
 *  CPP_STDIN       CPP_STDIN specifies how to call the C preprocessor if SAC code
 *                  is to be read from stdin. The preprocessed code must be sent
 *                  to stdout.
 *                  Usage: <CPP_STDIN> <options> 
 *                  
 *  CPP_FILE        CPP_FILE specifies how to call the C preprocessor if SAC code
 *                  is to be read from a file.The preprocessed code must be sent
 *                  to stdout.
 *                  Usage: <CPP_FILE> <options> <file>
 *                  
 *  TAR_CREATE      TAR_CREATE specifies how to create a SAC library, usually,
 *                  by the help of tar.
 *                  Usage: <TAR_CREATE> <library> <files to be assembled>
 *                  
 *  TAR_EXTRACT     TAR_EXTRACT specifies how to extract files from a SAC library, 
 *                  usually, by the help of tar.
 *                  Usage: <TAR_EXTRACT> <library> <files to be extracted>
 *                  
 *  AR_CREATE       AR_CREATE specifies how to create an archive.
 *                  Usage: <AR_CREATE> <archive> <object files>
 *                  
 *  RANLIB          RANLIB specifies how to run ranlib in order to add a symbol table
 *                  to an archive.
 *                  Usage: <RANLIB> <archive> 
 *                  If RANLIB is set to the empty string "", any call to ranlib is 
 *                  omitted.
 *                  
 *  MKDIR           MKDIR specifies how to create a directory.
 *                  Usage: <MKDIR> <directory>
 *                  
 *  RMDIR           RMDIR specifies how to remove a directory including its contents.
 *                  Usage: <RMDIR> <directory>
 *                  
 *  CHDIR           CHDIR specifies how to switch to a different directory.
 *                  Usage: <CHDIR> <directory>
 *                  
 *  CAT             CAT specifies how to display the contents of a file.
 *                  Usage: <CAT> <file>
 *                  
 *  MOVE            MOVE specifies how to move a file to a new location.
 *                  Usage: <MOVE> <file> <new location>
 *
 *  RSH             RSH specifies how to invoke a remote shell
 *                  Usage: <RSH> <host> <command> [<argument>]*
 *                  
 *  DUMP_OUTPUT     DUMP_OUTPUT specifies how to redirect all output in order to 
 *                  dump it.
 *
 *  STDLIB_DECPATH  STDLIB_DECPATH specifies the directories where sac2c looks for
 *                  declaration files belonging to the SAC standard library.
 *                 
 *  STDLIB_LIBPATH  STDLIB_LIBPATH specifies the directories where sac2c looks for
 *                  library files belonging to the SAC standard library.
 *                 
 *  SYSTEM_LIBPATH  SYSTEM_LIBPATH specifies the directories where sac2c looks for
 *                  system libraries (C standard libraries).
 *
 *  TMPDIR          TMPDIR specifies a directory where sac2c may create temporary files.
 *                  Please make sure that you have write permission to that directory
 *                  as well as sufficient space.
 *                  
 *  CACHE1_SIZE     CACHE1_SIZE specifies the size of the L1 (data) cache in kb.
 *                  A size of 0 means that the system has no L1 cache or its
 *                  characteristics are unknown.
 *                  
 *  CACHE1_LINE     CACHE1_LINE specifies the length of a L1 cache line in bytes.
 *                  
 *  CACHE1_ASSOC    CACHE1_ASSOC specifies the set associativity of the L1 cache.
 *
 *  CACHE1_WRITEPOL CACHE1_WRITEPOL specifies the write policy of the L1 cache.
 *                  Supported policies are "default", "fetch_on_write",  
 *                  "write_validate", and "write_around".
 *
 *  CACHE1_MSCA     CACHE1_MSCA specifies the memory size cache adjustment factor
 *                  for the L1 cache given in percentage. This entry refers to
 *                  the MSCA optimization technique.
 *
 *  CACHE2_SIZE     CACHE2_SIZE specifies the size of the L2 (data) cache in kb.
 *                  A size of 0 means that the system has no L2 cache or its
 *                  characteristics are unknown.
 *                  
 *  CACHE2_LINE     CACHE2_LINE specifies the length of a L2 cache line in bytes.
 *                  
 *  CACHE2_ASSOC    CACHE2_ASSOC specifies the set associativity of the L2 cache.
 *
 *  CACHE2_WRITEPOL CACHE2_WRITEPOL specifies the write policy of the L2 cache.
 *                  Supported policies are "default", "fetch_on_write",  
 *                  "write_validate", and "write_around".
 *
 *  CACHE2_MSCA     CACHE2_MSCA specifies the memory size cache adjustment factor
 *                  for the L1 cache given in percentage. This entry refers to
 *                  the MSCA optimization technique.
 *
 *  CACHE3_SIZE     CACHE3_SIZE specifies the size of the L3 (data) cache in kb.
 *                  A size of 0 means that the system has no L3 cache or its
 *                  characteristics are unknown.
 *                  
 *  CACHE3_LINE     CACHE3_LINE specifies the length of a L3 cache line in bytes.
 *                  
 *  CACHE3_ASSOC    CACHE3_ASSOC specifies the set associativity of the L3 cache.
 *  
 *  CACHE3_WRITEPOL CACHE3_WRITEPOL specifies the write policy of the L3 cache.
 *                  Supported policies are "default", "fetch_on_write",  
 *                  "write_validate", and "write_around".
 *
 *  CACHE3_MSCA     CACHE3_MSCA specifies the memory size cache adjustment factor
 *                  for the L3 cache given in percentage. This entry refers to
 *                  the MSCA optimization technique.
 *
 * 
 *
 ******************************************************************************/
 


/*******************************************************************************
 *
 * Target default: default settings for all configuration entries
 *
 */

target default:
 
CC               :=  "@CC@"
CCFLAGS          :=  "@RCCCFLAGS@"
CCDIR            :=  "-I$SAC2CBASE/include/ "
                     "-L$SAC2CBASE/lib/"
LDFLAGS          :=  "@RCLDFLAGS@ -ldl -lpthread"
CCLINK           :=  ""    
CCMTLINK         :=  "@CCMTLINK@"
CCDLLINK         :=  "@CCDLLINK@"
CEXT             :=  "c"
TREE_CC          :=  "@CC@ @GENPIC@"
TREE_LD          :=  "@CC@ @LD_DYNAMIC@"
TREE_LD_PATH     :=  "@LD_PATH@"
TREE_CEXT        :=  "c"

BACKEND          :=  "C99"
LIB_VARIANT      :=  ""
 
OPT_O0           :=  "@OPT_O0@"
OPT_O1           :=  "@OPT_O1@"
OPT_O2           :=  "@OPT_O2@"
OPT_O3           :=  "@OPT_O3@"
OPT_g            :=  "@OPT_g@"
 
CPP_STDIN        :=  "@CPPFILE@ -"
CPP_FILE         :=  "@CPPFILE@"
OPT_D            :=  "-D"
OPT_I            :=  "-I"
TAR_CREATE       :=  "tar cf"
TAR_EXTRACT      :=  "tar xf"
AR_CREATE        :=  "ar cr"
LD_DYNAMIC       :=  "@CC@ @LD_DYNAMIC@"
LD_PATH          :=  "@LD_PATH@"
GENPIC           :=  "@GENPIC@"
RANLIB           :=  "@RANLIB@"
MKDIR            :=  "mkdir"
RMDIR            :=  "rm -rf"
CHDIR            :=  "cd"
CAT              :=  "cat"
MOVE             :=  "mv"
RSH              :=  "rsh"
DUMP_OUTPUT      :=  ">/dev/null 2>&1"
 
LIBPATH          :=  "$SAC2CBASE/lib:"
                     "$SACBASE/stdlib/modules/structures/lib:"
                     "$SACBASE/stdlib/modules/numerical/lib:"
                     "$SACBASE/stdlib/modules/numerical/blas/lib:"
                     "$SACBASE/stdlib/modules/unibench/lib:"
                     "$SACBASE/stdlib/modules/auxiliary/lib:"
                     "$SACBASE/stdlib/modules/mutc/lib:"
                     "$SACBASE/stdlib/world/mutc/lib:"
                     "$SACBASE/stdlib/world/system/lib:"
                     "$SACBASE/stdlib/world/stdio/lib:"
                     "$SACBASE/stdlib/world/stdio/dislin/lib:"
                     "$SACBASE/stdlib/classes/random/lib:"
                     "$SACBASE/stdlib/classes/auxiliary/lib:"
                     "$SACBASE/stdlib/utrace/lib:"
IMPPATH          :=  "$SACBASE/stdlib/modules/structures:"
                     "$SACBASE/stdlib/modules/numerical:"
                     "$SACBASE/stdlib/modules/numerical/blas:"
                     "$SACBASE/stdlib/modules/unibench:"
                     "$SACBASE/stdlib/modules/auxiliary:"
                     "$SACBASE/stdlib/modules/mutc:"
                     "$SACBASE/stdlib/world/mutc:"
                     "$SACBASE/stdlib/world/system:"
                     "$SACBASE/stdlib/world/stdio:"
                     "$SACBASE/stdlib/world/dislin/stdio:"
                     "$SACBASE/stdlib/auxiliary/random:"
                     "$SACBASE/stdlib/classes/random:"
                     "$SACBASE/stdlib/utrace:"
EXTLIBPATH       :=  "/usr/local/dislin:/opt/local/lib"
 
TMPDIR           :=  "/tmp"

CACHE1_SIZE      :=  0
CACHE1_LINE      :=  0
CACHE1_ASSOC     :=  0
CACHE1_WRITEPOL  :=  "default"
CACHE1_MSCA      :=  0

CACHE2_SIZE      :=  0
CACHE2_LINE      :=  0
CACHE2_ASSOC     :=  0
CACHE2_WRITEPOL  :=  "default"
CACHE2_MSCA      :=  0

CACHE3_SIZE      :=  0
CACHE3_LINE      :=  0
CACHE3_ASSOC     :=  0
CACHE3_WRITEPOL  :=  "default"
CACHE3_MSCA      :=  0
 

/*****************************************************************************
 * sl targets
 */
target sl:

BACKEND          :=  "MUTC"
CC               :=  "slc -b seqc"
CCFLAGS          :=  "-Wall -Wno-unused"
LDFLAGS          :=  "@RCLDFLAGS@"
CCMTLINK         :=  ""
CCDLLINK         :=  ""
LD_DYNAMIC       :=  ""
LIB_VARIANT      :=  "mutc-seqc"
AR_CREATE        :=  "slar seqc cr"
RANLIB           :=  "slranlib seqc"
OPT_g            :=  ""


target mutc::sl:

/*
 * New ppp makes use of tls
 */      
target sl_mta::sl:

CC               :=  "slc -b mta"
LIB_VARIANT      :=  "mutc-mta"
AR_CREATE        :=  "slar mta cr"
RANLIB           :=  "slranlib mta"

/*
 * New ppp that does not use tls
 */
target sl_mtantls::sl_mta:

CC               :=  "slc -b mta -lmalloc_notls"
LIB_VARIANT      :=  "mutc-mtantls"

/*
 *  Older backends for mutc
 */
target sl_ppp::sl:

CC               :=  "slc -b ppp"
LIB_VARIANT      :=  "mutc-ppp"
AR_CREATE        :=  "slar ppp cr"
RANLIB           :=  "slranlib ppp"

target sl_ptl::sl:

CC               :=  "slc -b ptl"
LIB_VARIANT      :=  "mutc-ptl"
AR_CREATE        :=  "slar ptl cr"
RANLIB           :=  "slranlib ptl"

target sl_seqc::sl:

target sl_utc::sl:

CC               :=  "slc -b utc0"
LIB_VARIANT      :=  "mutc-utc0"
AR_CREATE        :=  "slar utc0 cr"
RANLIB           :=  "slranlib utc0"
 
/*****************************************************************************
 * cuda targets
 */
target cuda:

BACKEND          :=  "Cuda"
CC               :=  "nvcc"
CCLINK           :=  "-lcutil_i386 -lcudart -lcublas"
/*
CC               := "/home/unibench/ctca-cuda.stca.herts.ac.uk/cuda-3.0/cuda/bin/nvcc"
CCLINK           :=  "-lcutil_i386 -lcudart -lcublas"
*/
CCFLAGS          :=  "--maxrregcount 20 -Xcompiler -Wall -Xcompiler -Wno-unused "
                     "-Xcompiler -fno-builtin -Xcompiler -std=c99"
CCDIR            :=  "-I$SAC2CBASE/include/ -L$SAC2CBASE/lib/ "
                     "-I$CUTIL -L$CUTIL_LIB"
LD_PATH          :=  "-Xlinker -L%path% -Xlinker -rpath=%path%"
CEXT		 :=  "cu"
GENPIC           :=  "-Xcompiler -fPIC"

/*******************************************************************************
 *******************************************************************************
 *******************************************************************************
 *** 
 ***  TARGETS  for Alternate Compilers:
 ***
 ***/

/*******************************************************************************
 *
 * Target suncc: use the Sun C compiler instead of gcc
 *
 */

target suncc:

CC             :=  "cc"
CCFLAGS        :=  "-dalign -xsafe=mem"
 
OPT_O0         :=  ""
OPT_O1         :=  "-xO2"
OPT_O2         :=  "-xO4"
OPT_O3         :=  "-fast -xvector=simd"
 
SYSTEM_LIBPATH :=  "/usr/ccs/bin:"
                   "/usr/ccs/lib:"
                   "/lib:"
                   "/usr/lib"


/*******************************************************************************
 *
 * Target intelcc: use the Intel C compiler instead of gcc
 *
 */

target intelcc:

CC             := "icc"
CCFLAGS        := "-shared-intel"

target intelcc_sse2::intelcc:

CCFLAGS        += "-msse2"

target intelcc_fast::intelcc:

CCFLAGS        += "-fast"



/*******************************************************************************
 *
 * Target clang: use the LLVM CLang compiler instead of gcc
 *
 */

target clang:
CC             := "clang"
OPT_O2         :=  "-O4"
OPT_O3         :=  "-O3"




/*******************************************************************************
 *
 * Target opencc: use the Open64 C compiler instead of gcc
 *
 */

target opencc:
CC             := "opencc"
OPT_O3         := "-O3"





/*******************************************************************************
 *******************************************************************************
 *******************************************************************************
 ***
 ***  TARGETS  for Alternate Memory Allocators:
 ***
 ***/

 /*******************************************************************************
 *
 * Target hoard: use the Hoard memory allocator instead of regular malloc
 *
 * NOTE: This requires the proper installation of the Hoard memory allocator!
 */

target hoard:

CCMTLINK        :=  "-lhoard -lpthread -lthread -lrt"


/*******************************************************************************
 *
 * Target ptmalloc: use the ptmalloc implementation instead of regular malloc
 *
 * NOTE: This requires the proper installation of the PTmalloc memory allocator!
 */

target ptmalloc:

CCMTLINK        +=  "-lptmalloc"


/*******************************************************************************
 *
 * Target mtmalloc: use the Sun mtmalloc library instead of regular malloc
 *
 */

target mtmalloc:

CCMTLINK        +=  "-lmtmalloc"


/*******************************************************************************
 *
 * Target gnumalloc: use the GNU glibc library instead of Solaris libc
 *
 * NOTE: This is mostly intended to test the GNU memory allocator!
 */

target gnumalloc:

CCMTLINK        +=  "-lglib"


 
/*******************************************************************************
 *******************************************************************************
 *******************************************************************************
 *** 
 ***  TARGETS  for Individual Architectures / Machines:
 ***
 ***/

@RCSUN@
@RCX86@
@RCALPHA@
@RCMAC@



