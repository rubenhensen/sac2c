
#
# $Id:$
#
#

#######################################################################################
#
# Comment:
#
# This makefile is never called directly by the user nor is it included by other 
# makefiles. Instead, it is used in recursive calls to make by both the top-level
# makefile and the local src directory makefile.
#
# Hence, we can expect variables to be preset from the outside:
#
#  TARGET : The compilation target directory. These are either all src directories
#           when called by the top-level directory or just the one directory itself
#           when called locally.
#
#


#######################################################################################
#
# general setup:
#

PROJECT_ROOT := .

HIDE := @

include $(PROJECT_ROOT)/Makefile.Config
include $(PROJECT_ROOT)/Makefile.Targets

CHECK_DEPS := yes

SOURCE_DIRS     := $(addprefix src/,$(TARGET))
ALL_SOURCE_DIRS := $(addprefix src/,$(src))

TARGETS_DEVEL := $(addprefix src/,$(foreach target,$(TARGET),$(addprefix $(target)/,$($(target)))))
TARGETS_PROD  := $(patsubst %.o,%.prod.o,$(TARGETS_DEVEL))

LIB  := lib/dbug.o lib/main_args.o
INCS := -Iinc $(patsubst %,-I%,$(ALL_SOURCE_DIRS))

REVISION := $(shell svn info | grep Revision: | sed -e 's/Revision: //g')

XML_DIR     = $(PROJECT_ROOT)/src/xml
XML_COMMONS = $(wildcard $(XML_DIR)/common-*.xsl)

GENERATED_INCLUDE_FILES = $(patsubst %.xsl,%,$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.h.xsl))) \
                          $(patsubst %.xsl,%,$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.mac.xsl))) \
                          $(patsubst %.y,%.tab.h,$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.y)))

GENERATED_SOURCE_FILES = $(patsubst %.xsl,%,$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.c.xsl))) \
                         $(patsubst %.y,%.tab.c,$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.y))) \
                         $(patsubst %.l,%.lex.c,$(foreach dir,$(SOURCE_DIRS),$(wildcard $(dir)/*.l))) \

GENERATED_FILES = $(GENERATED_INCLUDE_FILES) $(GENERATED_SOURCE_FILES)

DEPENDENCY_FILES = $(patsubst %.o,%.d,$(TARGETS_DEVEL))

DEPS = $(foreach file,$(DEPENDENCY_FILES),$(dir $(file)).$(notdir $(file)))


  
###############################################################################
#
# Dummy rules
#

.PHONY: build_info

.PRECIOUS: %.c %.h %.o %.prod.o .%.d %.c %.mac %.lex.c %.tab.c %.tab.h



###############################################################################
#
# Start rules
#

sac2c: src/global/build.o
	@$(ECHO) ""
	@$(ECHO) "Linking $@ (developer version)"
	$(HIDE) $(LIBTOOL) $(CC) $(CCLINKFLAGS) -o $@ $(TARGETS_DEVEL) $< \
                $(LIB) $(LIBS) $(LDDYNFLAG)
	@$(RM) make_track

sac2c.prod: src/global/build_prod.o
	@$(ECHO) ""
	@$(ECHO) "Linking $@ (product version)"
	$(HIDE) $(LIBTOOL) $(CC) $(CCLINKFLAGS) -o $@ $(TARGETS_PROD) $< \
                $(LIB) $(LIBS) $(LDDYNFLAG)
	@$(RM) make_track


sac2c.efence: src/global/build.o
	@$(ECHO) ""
	@$(ECHO) "Linking $@ (efence version)"
	$(HIDE) $(LIBTOOL) $(CC) $(CCLINKFLAGS) -o $@ $(TARGETS_DEVEL) $< \
                $(LIB) $(LIBS) $(EFLIBS) $(LDDYNFLAG)
	@$(RM) make_track



###############################################################################
#
# Creating the revision data file
#
# We make sac2c depend on the revision data file and in turn the revision data
# file depend on all target object files. By this dependency chain we achieve
# that only if one of the object files needs to be remade, if also remake the
# revision data file and, thereupon, relink sac2c.
#

src/global/build.c: $(TARGETS_DEVEL) 
	@$(ECHO) ""
	@$(ECHO) "Creating revision data file:  $@"
	@$(ECHO) "char build_date[] = \"`date`\";"  >  $@
	@$(ECHO) "char build_user[] = \"$(USER)\";" >> $@
	@$(ECHO) "char build_host[] = \"`hostname`\";" >> $@
	@$(ECHO) "char build_os[]   = \"$(OS)\";"   >> $@
	@$(ECHO) "char build_rev[]  = \"$(REVISION)\";"  >> $@
	@$(ECHO) "char build_ast[]  = \"`$(XSLTENGINE) src/xml/ast2fingerprint.xsl src/xml/ast.xml | $(FINGERPRINTER)`\";" >> $@
	@$(CLOCK_SKEW_ELIMINATION) $@ 
	@$(ECHO) "$(dir $@)" > make_track

src/global/build_prod.c: $(TARGETS_PROD)
	@$(ECHO) ""
	@$(ECHO) "Creating revision data file:  $@"
	@$(ECHO) "char build_date[] = \"`date`\";"  >  $@
	@$(ECHO) "char build_user[] = \"$(USER)\";" >> $@
	@$(ECHO) "char build_host[] = \"`hostname`\";" >> $@
	@$(ECHO) "char build_os[]   = \"$(OS)\";"   >> $@
	@$(ECHO) "char build_rev[]  = \"$(REVISION)\";"  >> $@
	@$(ECHO) "char build_ast[]  = \"`$(XSLTENGINE) src/xml/ast2fingerprint.xsl src/xml/ast.xml | $(FINGERPRINTER)`\";" >> $@
	@$(CLOCK_SKEW_ELIMINATION) $@ 
	@$(ECHO) "$(dir $@)" > make_track



###############################################################################
#
# Rules for making subdirectories
#

makesubdir.devel: $(TARGETS_DEVEL)
	@$(ECHO) ""

makesubdir.prod: $(TARGETS_PROD)
	@$(ECHO) ""



###############################################################################
#
# Pattern rules for compilation
#

%.prod.o: %.c 
	@if [ ! -f make_track -o "$(dir $*)" != "`cat make_track`" ] ; \
         then $(ECHO) "$(dir $*)" > make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling product code:  $(notdir $<)"
	$(HIDE)$(CCPROD) $(CCPROD_FLAGS) $(CPROD_FLAGS) $(YYFLAGS) $(INCS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) $@


%.o: %.c 
	@if [ ! -f make_track -o "$(dir $*)" != "`cat make_track`" ] ; \
         then $(ECHO) "$(dir $*)" > make_track; \
              $(ECHO) ""; \
              $(ECHO) "Compiling files in directory $(dir $@)" ; \
         fi
	@$(ECHO) "  Compiling developer code:  $(notdir $<)"
	$(HIDE)$(CC) $(CCFLAGS) $(CFLAGS) $(YYFLAGS) $(INCS) -o $@ -c $<
	@$(CLOCK_SKEW_ELIMINATION) $@



###############################################################################
#
# Pattern rules for source code generation
#

%.h: %.h.xsl $(XML_DIR)/ast.xml $(XML_COMMONS) %.track
	@$(ECHO) "  Generating header file from XML specification:  $(notdir $@)"
	$(HIDE)$(XSLTENGINE) $< $(XML_DIR)/ast.xml | $(CODE_BEAUTIFIER) >$@

%.mac: %.mac.xsl $(XML_DIR)/ast.xml $(XML_COMMONS) %.track
	@$(ECHO) "  Generating macro file from XML specification:  $(notdir $@)"
	$(HIDE)$(XSLTENGINE) $< $(XML_DIR)/ast.xml | $(CODE_BEAUTIFIER) >$@

%.c: %.c.xsl $(XML_DIR)/ast.xml $(XML_COMMONS) %.track
	@$(ECHO) "  Generating source code from XML specification:  $(notdir $@)"
	$(HIDE)$(XSLTENGINE) $< $(XML_DIR)/ast.xml | $(CODE_BEAUTIFIER) >$@


%.lex.c: %.l %.track
	@$(ECHO) "  Generating source code from LEX specification:  $(notdir $<)"
	$(HIDE)$(LEX) $<
	$(HIDE)mv lex.yy.c $@
	@$(CLOCK_SKEW_ELIMINATION) $@

%.tab.c: %.y %.track
	@$(ECHO) "  Generating source code from YACC specification:  $(notdir $<)"
	$(HIDE)$(YACC) $<
	$(HIDE)mv y.tab.c $@
	$(HIDE)$(RM) y.tab.h
	$(HIDE)mv y.output $(dir $@)
	@$(CLOCK_SKEW_ELIMINATION) $@

%.tab.h: %.y %.track
	@$(ECHO) "  Generating header file from YACC specification:  $(notdir $<)"
	$(HIDE)$(YACC) $<
	$(HIDE)mv y.tab.h $@
	$(HIDE)$(RM) y.tab.c 
	$(HIDE)mv y.output $(dir $@)
	@$(CLOCK_SKEW_ELIMINATION) $@

%.track: 
	@if [ ! -f make_track -o "$(dir $*)" != "`cat make_track`" ] ; \
         then $(ECHO) "$(dir $*)" > make_track; \
              $(ECHO) ""; \
              $(ECHO) "Generating files in directory $(dir $@)" ; \
         fi



#######################################################################################
#
# Pattern rules for dependency tracking mechanism:
#

.%.d: %.c $(GENERATED_FILES) 
	@if [ ! -f make_track -o "$(dir $*)" != "`cat make_track`" ] ; \
        then $(ECHO) "$(dir $*)" > make_track; \
             $(ECHO) ""; \
             $(ECHO) "Checking dependencies in directory $(dir $@)" ; \
        fi
	@$(ECHO) "  Checking dependencies of source file: $(notdir $<)"
	@if $(CC) $(CCDEPS_FLAGS) $(CFLAGS) $(INCS) $<  > $@d ; \
	 then sed 's/\($(notdir $*)\)\.o[ :]*/$(subst /,\/,$*)\.o $(subst /,\/,$@)\: $(PROJECT_ROOT)\/Makefile.Config /'  <$@d >$@; \
	      $(RM) $@d ; \
	 else $(RM) $@d ; \
	      exit 1 ;  \
	 fi
	@$(CLOCK_SKEW_ELIMINATION) $@





###############################################################################
#
# Includes for dependency tracking mechanism
#

ifeq ($(CHECK_DEPS),yes)
  ifneq ($(DEPS),)
    -include $(sort $(DEPS))
  endif
endif
