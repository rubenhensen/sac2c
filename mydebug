  In a dirty state. Trying to read sac2crc from /home/rubenhensen/sac2c/build_d/sac2crc_d. 
  MT_MODE = 0 in target, forcing -numthreads to 1.
   
**  1: Loading SAC program ...
  **** Locating source code ...
  Reading from file "//home/rubenhensen/sac2c/build_d/runtime_build/src/runtime_libraries-build/sacprelude_d.sac" ...
  **** Running C preprocessor ...
  **** Parsing input file ...
   
**  2: Preprocessing SAC program ...
  **** Assigning type pattern constraints to pre- and post-conditions ...
  **** Analysing type patterns and converting to built-in types ...
  **** Turning type pattern functions into code ...
  **** Hiding struct definitions behind typedefs and accessors ...
  **** Inferring Ranges for Set Expressions ...
  **** Identifying Multi-Return Set Notations ...
  **** Handling dots in Set Notation ...
  **** Translating Set Notation into With-Loops ...
  **** Handling dots in selections ...
  **** Handling zero-generator with-loops ...
  **** Handling multi-generator with-loops ...
  **** Handling multi-operator with-loops ...
  **** Handling dots in with-loop generators ...
  **** Resolving pragma annotations ...
  **** Generating object initializers ...
  **** Checking and simplifying generic definitions ...
   
**  3: Running module system ...
  **** Processing use and import statements ...
  **** Annotating namespaces ...
  **** Gathering dependencies ...
  **** Retrieving imported symbols ...
  **** Retrieving used symbols ...
  **** Loading prelude functions ...
  The prelude library `sacprelude_d' has not been loaded.
   
**  4: Simplifying source code ...
  **** Transforming while-loops into do-loops ...
  **** Eliminating conditional expressions ...
  **** Handling multiple operator expressions ...
  **** Flattening nested expressions ...
  **** Processing user defined types ...
  **** Generating generic type conversion functions ...
   
**  5: Converting to static single assignment form ...
  **** Inserting variable declarations ...
  **** Converting type decls into type conversions ...
  **** Creating wrapper functions ...
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07000 } 
        PROD{  <
           ALPHA{ #0: in [ int[*], int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07000 } 
        PROD{  <
           ALPHA{ #0: in [ int[*], int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07000 } 
        PROD{  <
           ALPHA{ #0: in [ int[*], int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07a00 } 
        PROD{  <
           ALPHA{ #1: in [ float[*], float[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07a00 } 
        PROD{  <
           ALPHA{ #1: in [ float[*], float[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07a00 } 
        PROD{  <
           ALPHA{ #1: in [ float[*], float[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08420 } 
        PROD{  <
           ALPHA{ #2: in [ double[*], double[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08420 } 
        PROD{  <
           ALPHA{ #2: in [ double[*], double[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08420 } 
        PROD{  <
           ALPHA{ #2: in [ double[*], double[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08e40 } 
        PROD{  <
           ALPHA{ #3: in [ bool[*], bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08e40 } 
        PROD{  <
           ALPHA{ #3: in [ bool[*], bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08e40 } 
        PROD{  <
           ALPHA{ #3: in [ bool[*], bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc09860 } 
        PROD{  <
           ALPHA{ #4: in [ char[*], char[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc09860 } 
        PROD{  <
           ALPHA{ #4: in [ char[*], char[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc09860 } 
        PROD{  <
           ALPHA{ #4: in [ char[*], char[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0d1f0 } 
        PROD{  <
           ALPHA{ #10: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0d1f0 } 
        PROD{  <
           ALPHA{ #10: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0d1f0 } 
        PROD{  <
           ALPHA{ #10: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0da60 } 
        PROD{  <
           ALPHA{ #11: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0da60 } 
        PROD{  <
           ALPHA{ #11: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0da60 } 
        PROD{  <
           ALPHA{ #11: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0e2d0 } 
        PROD{  <
           ALPHA{ #12: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0e2d0 } 
        PROD{  <
           ALPHA{ #12: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0e2d0 } 
        PROD{  <
           ALPHA{ #12: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0eb40 } 
        PROD{  <
           ALPHA{ #13: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0eb40 } 
        PROD{  <
           ALPHA{ #13: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0eb40 } 
        PROD{  <
           ALPHA{ #13: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0f3b0 } 
        PROD{  <
           ALPHA{ #14: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0f3b0 } 
        PROD{  <
           ALPHA{ #14: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0f3b0 } 
        PROD{  <
           ALPHA{ #14: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0ffd0 } 
        PROD{  <
           ALPHA{ #15: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0ffd0 } 
        PROD{  <
           ALPHA{ #15: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0ffd0 } 
        PROD{  <
           ALPHA{ #15: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc10960 } 
        PROD{  <
           ALPHA{ #16: in [ byte[*], byte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc10960 } 
        PROD{  <
           ALPHA{ #16: in [ byte[*], byte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc10960 } 
        PROD{  <
           ALPHA{ #16: in [ byte[*], byte[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11380 } 
        PROD{  <
           ALPHA{ #17: in [ short[*], short[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11380 } 
        PROD{  <
           ALPHA{ #17: in [ short[*], short[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11380 } 
        PROD{  <
           ALPHA{ #17: in [ short[*], short[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11da0 } 
        PROD{  <
           ALPHA{ #18: in [ long[*], long[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11da0 } 
        PROD{  <
           ALPHA{ #18: in [ long[*], long[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11da0 } 
        PROD{  <
           ALPHA{ #18: in [ long[*], long[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc127c0 } 
        PROD{  <
           ALPHA{ #19: in [ longlong[*], longlong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc127c0 } 
        PROD{  <
           ALPHA{ #19: in [ longlong[*], longlong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc127c0 } 
        PROD{  <
           ALPHA{ #19: in [ longlong[*], longlong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc131e0 } 
        PROD{  <
           ALPHA{ #20: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc131e0 } 
        PROD{  <
           ALPHA{ #20: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc131e0 } 
        PROD{  <
           ALPHA{ #20: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc13c00 } 
        PROD{  <
           ALPHA{ #21: in [ ushort[*], ushort[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc13c00 } 
        PROD{  <
           ALPHA{ #21: in [ ushort[*], ushort[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc13c00 } 
        PROD{  <
           ALPHA{ #21: in [ ushort[*], ushort[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc14620 } 
        PROD{  <
           ALPHA{ #22: in [ uint[*], uint[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc14620 } 
        PROD{  <
           ALPHA{ #22: in [ uint[*], uint[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc14620 } 
        PROD{  <
           ALPHA{ #22: in [ uint[*], uint[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15040 } 
        PROD{  <
           ALPHA{ #23: in [ ulong[*], ulong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15040 } 
        PROD{  <
           ALPHA{ #23: in [ ulong[*], ulong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15040 } 
        PROD{  <
           ALPHA{ #23: in [ ulong[*], ulong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15a60 } 
        PROD{  <
           ALPHA{ #24: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15a60 } 
        PROD{  <
           ALPHA{ #24: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15a60 } 
        PROD{  <
           ALPHA{ #24: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ba40 } 
        PROD{  <
           ALPHA{ #34: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ba40 } 
        PROD{  <
           ALPHA{ #34: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ba40 } 
        PROD{  <
           ALPHA{ #34: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1c2b0 } 
        PROD{  <
           ALPHA{ #35: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1c2b0 } 
        PROD{  <
           ALPHA{ #35: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1c2b0 } 
        PROD{  <
           ALPHA{ #35: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1cb20 } 
        PROD{  <
           ALPHA{ #36: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1cb20 } 
        PROD{  <
           ALPHA{ #36: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1cb20 } 
        PROD{  <
           ALPHA{ #36: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1d3a0 } 
        PROD{  <
           ALPHA{ #37: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1d3a0 } 
        PROD{  <
           ALPHA{ #37: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1d3a0 } 
        PROD{  <
           ALPHA{ #37: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1dc30 } 
        PROD{  <
           ALPHA{ #38: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1dc30 } 
        PROD{  <
           ALPHA{ #38: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1dc30 } 
        PROD{  <
           ALPHA{ #38: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1e4a0 } 
        PROD{  <
           ALPHA{ #39: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1e4a0 } 
        PROD{  <
           ALPHA{ #39: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1e4a0 } 
        PROD{  <
           ALPHA{ #39: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ed10 } 
        PROD{  <
           ALPHA{ #40: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ed10 } 
        PROD{  <
           ALPHA{ #40: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ed10 } 
        PROD{  <
           ALPHA{ #40: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1f580 } 
        PROD{  <
           ALPHA{ #41: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1f580 } 
        PROD{  <
           ALPHA{ #41: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1f580 } 
        PROD{  <
           ALPHA{ #41: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1fe00 } 
        PROD{  <
           ALPHA{ #42: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1fe00 } 
        PROD{  <
           ALPHA{ #42: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1fe00 } 
        PROD{  <
           ALPHA{ #42: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb7c0 } 
        PROD{  <
           ALPHA{ #43: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb7c0 } 
        PROD{  <
           ALPHA{ #43: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb7c0 } 
        PROD{  <
           ALPHA{ #43: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb140 } 
        PROD{  <
           ALPHA{ #44: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb140 } 
        PROD{  <
           ALPHA{ #44: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb140 } 
        PROD{  <
           ALPHA{ #44: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #54: in [ --, ubyte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #54: in [ --, ubyte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #54: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #55: in [ --, ushort[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #55: in [ --, ushort[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #54: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #55: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #54: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #56: in [ --, uint[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #56: in [ --, uint[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #55: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #54: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #56: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #55: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #54: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #57: in [ --, ulong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #57: in [ --, ulong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #56: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #55: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #54: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #57: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #56: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #55: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #54: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #58: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #58: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #57: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #56: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #55: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #54: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #58: in [ --, ulonglong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #57: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #56: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #55: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #54: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #53: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #52: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #51: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #50: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #49: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #48: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #47: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #46: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #45: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #68: in [ --, ubyte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #68: in [ --, ubyte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #68: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #69: in [ --, ushort[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #69: in [ --, ushort[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #68: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #69: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #68: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #70: in [ --, uint[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #70: in [ --, uint[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #69: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #68: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #70: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #69: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #68: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #71: in [ --, ulong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #71: in [ --, ulong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #70: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #69: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #68: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #71: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #70: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #69: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #68: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #72: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #72: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #71: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #70: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #69: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #68: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #72: in [ --, ulonglong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #71: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #70: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #69: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #68: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #67: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #66: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #65: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #64: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #63: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #62: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #61: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #60: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #59: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #82: in [ --, ubyte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #82: in [ --, ubyte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #82: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #83: in [ --, ushort[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #83: in [ --, ushort[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #82: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #83: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #82: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #84: in [ --, uint[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #84: in [ --, uint[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #83: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #82: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #84: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #83: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #82: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #85: in [ --, ulong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #85: in [ --, ulong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #84: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #83: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #82: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #85: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #84: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #83: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #82: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #86: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #86: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #85: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #84: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #83: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #82: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #86: in [ --, ulonglong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #85: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #84: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #83: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #82: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #81: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #80: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #79: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #78: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #77: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #76: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #75: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #74: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #73: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #96: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #96: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #96: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #97: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #97: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #96: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #97: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #96: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #98: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #98: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #97: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #96: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #98: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #97: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #96: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #99: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #99: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #98: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #97: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #96: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #99: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #98: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #97: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #96: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #100: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #100: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #99: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #98: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #97: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #96: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #100: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #99: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #98: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #97: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #96: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #95: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #94: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #93: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #92: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #91: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #90: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #89: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #88: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #87: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe70e0 } 
        PROD{  <
           ALPHA{ #101: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe70e0 } 
        PROD{  <
           ALPHA{ #101: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe70e0 } 
        PROD{  <
           ALPHA{ #101: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ bool}},
         AKS{ [], Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe7f60 } 
        PROD{  <
           ALPHA{ #102: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ bool}},
         AKS{ [], Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe7f60 } 
        PROD{  <
           ALPHA{ #102: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ bool}},
         AKS{ [], Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe7f60 } 
        PROD{  <
           ALPHA{ #102: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe8d30 } 
        PROD{  <
           ALPHA{ #103: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe8d30 } 
        PROD{  <
           ALPHA{ #103: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe8d30 } 
        PROD{  <
           ALPHA{ #103: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbea410 } 
        PROD{  <
           ALPHA{ #104: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbea410 } 
        PROD{  <
           ALPHA{ #104: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbea410 } 
        PROD{  <
           ALPHA{ #104: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbec750 } 
        PROD{  <
           ALPHA{ #105: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbec750 } 
        PROD{  <
           ALPHA{ #105: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbec750 } 
        PROD{  <
           ALPHA{ #105: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbee4f0 } 
        PROD{  <
           ALPHA{ #106: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbee4f0 } 
        PROD{  <
           ALPHA{ #106: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbee4f0 } 
        PROD{  <
           ALPHA{ #106: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbef350 } 
        PROD{  <
           ALPHA{ #107: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbef350 } 
        PROD{  <
           ALPHA{ #107: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbef350 } 
        PROD{  <
           ALPHA{ #107: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf0190 } 
        PROD{  <
           ALPHA{ #108: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf0190 } 
        PROD{  <
           ALPHA{ #108: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf0190 } 
        PROD{  <
           ALPHA{ #108: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf54d0 } 
        PROD{  <
           ALPHA{ #109: in [ --, int[*]] le <> ge <>},
            ALPHA{ #110: in [ --, int[*]] le <> ge <>},
            ALPHA{ #111: in [ --, int[*]] le <> ge <>},
            ALPHA{ #112: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf54d0 } 
        PROD{  <
           ALPHA{ #109: in [ --, int[*]] le <> ge <>},
            ALPHA{ #110: in [ --, int[*]] le <> ge <>},
            ALPHA{ #111: in [ --, int[*]] le <> ge <>},
            ALPHA{ #112: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf54d0 } 
        PROD{  <
           ALPHA{ #109: in [ --, int[*]] le <> ge <>},
            ALPHA{ #110: in [ --, int[*]] le <> ge <>},
            ALPHA{ #111: in [ --, int[*]] le <> ge <>},
            ALPHA{ #112: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfb400 } 
        PROD{  <
           ALPHA{ #113: in [ --, int[*]] le <> ge <>},
            ALPHA{ #114: in [ --, int[*]] le <> ge <>},
            ALPHA{ #115: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfb400 } 
        PROD{  <
           ALPHA{ #113: in [ --, int[*]] le <> ge <>},
            ALPHA{ #114: in [ --, int[*]] le <> ge <>},
            ALPHA{ #115: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfb400 } 
        PROD{  <
           ALPHA{ #113: in [ --, int[*]] le <> ge <>},
            ALPHA{ #114: in [ --, int[*]] le <> ge <>},
            ALPHA{ #115: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfd280 } 
        PROD{  <
           ALPHA{ #116: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfd280 } 
        PROD{  <
           ALPHA{ #116: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfd280 } 
        PROD{  <
           ALPHA{ #116: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfed30 } 
        PROD{  <
           ALPHA{ #117: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfed30 } 
        PROD{  <
           ALPHA{ #117: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfd280 } 
        PROD{  <
           ALPHA{ #116: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfed30 } 
        PROD{  <
           ALPHA{ #117: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfd280 } 
        PROD{  <
           ALPHA{ #116: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc00970 } 
        PROD{  <
           ALPHA{ #118: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc00970 } 
        PROD{  <
           ALPHA{ #118: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc00970 } 
        PROD{  <
           ALPHA{ #118: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc022a0 } 
        PROD{  <
           ALPHA{ #119: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc022a0 } 
        PROD{  <
           ALPHA{ #119: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc00970 } 
        PROD{  <
           ALPHA{ #118: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc022a0 } 
        PROD{  <
           ALPHA{ #119: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc00970 } 
        PROD{  <
           ALPHA{ #118: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc03300 } 
        PROD{  <
           ALPHA{ #120: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc03300 } 
        PROD{  <
           ALPHA{ #120: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc03300 } 
        PROD{  <
           ALPHA{ #120: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc04430 } 
        PROD{  <
           ALPHA{ #121: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc04430 } 
        PROD{  <
           ALPHA{ #121: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc03300 } 
        PROD{  <
           ALPHA{ #120: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc04430 } 
        PROD{  <
           ALPHA{ #121: in [ --, int[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc03300 } 
        PROD{  <
           ALPHA{ #120: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc05510 } 
        PROD{  <
           ALPHA{ #122: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc05510 } 
        PROD{  <
           ALPHA{ #122: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc05510 } 
        PROD{  <
           ALPHA{ #122: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc065b0 } 
        PROD{  <
           ALPHA{ #123: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc065b0 } 
        PROD{  <
           ALPHA{ #123: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc05510 } 
        PROD{  <
           ALPHA{ #122: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc065b0 } 
        PROD{  <
           ALPHA{ #123: in [ --, int[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc05510 } 
        PROD{  <
           ALPHA{ #122: in [ --, int[*]] le <> ge <>}>}}>}>}
  **** Running global object analysis ...
  **** Generating global object initialiser ...
  **** Resolving global objects ...
  **** Resolving reference parameters ...
  **** Extending dispatch information ...
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07000 } 
        PROD{  <
           ALPHA{ #0: in [ int[*], int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07000 } 
        PROD{  <
           ALPHA{ #0: in [ int[*], int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07000 } 
        PROD{  <
           ALPHA{ #0: in [ int[*], int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc04430 } 
        PROD{  <
           ALPHA{ #124: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc04430 } 
        PROD{  <
           ALPHA{ #124: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc04430 } 
        PROD{  <
           ALPHA{ #124: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc03300 } 
        PROD{  <
           ALPHA{ #125: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc03300 } 
        PROD{  <
           ALPHA{ #125: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc04430 } 
        PROD{  <
           ALPHA{ #124: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc03300 } 
        PROD{  <
           ALPHA{ #125: in [ --, int[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc04430 } 
        PROD{  <
           ALPHA{ #124: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf54d0 } 
        PROD{  <
           ALPHA{ #126: in [ --, int[*]] le <> ge <>},
            ALPHA{ #127: in [ --, int[*]] le <> ge <>},
            ALPHA{ #128: in [ --, int[*]] le <> ge <>},
            ALPHA{ #129: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf54d0 } 
        PROD{  <
           ALPHA{ #126: in [ --, int[*]] le <> ge <>},
            ALPHA{ #127: in [ --, int[*]] le <> ge <>},
            ALPHA{ #128: in [ --, int[*]] le <> ge <>},
            ALPHA{ #129: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf54d0 } 
        PROD{  <
           ALPHA{ #126: in [ --, int[*]] le <> ge <>},
            ALPHA{ #127: in [ --, int[*]] le <> ge <>},
            ALPHA{ #128: in [ --, int[*]] le <> ge <>},
            ALPHA{ #129: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1e4a0 } 
        PROD{  <
           ALPHA{ #39: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1e4a0 } 
        PROD{  <
           ALPHA{ #39: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1e4a0 } 
        PROD{  <
           ALPHA{ #39: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1d3a0 } 
        PROD{  <
           ALPHA{ #37: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1d3a0 } 
        PROD{  <
           ALPHA{ #37: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1d3a0 } 
        PROD{  <
           ALPHA{ #37: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11da0 } 
        PROD{  <
           ALPHA{ #18: in [ long[*], long[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11da0 } 
        PROD{  <
           ALPHA{ #18: in [ long[*], long[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11da0 } 
        PROD{  <
           ALPHA{ #18: in [ long[*], long[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07a00 } 
        PROD{  <
           ALPHA{ #1: in [ float[*], float[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07a00 } 
        PROD{  <
           ALPHA{ #1: in [ float[*], float[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc07a00 } 
        PROD{  <
           ALPHA{ #1: in [ float[*], float[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfed30 } 
        PROD{  <
           ALPHA{ #130: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfed30 } 
        PROD{  <
           ALPHA{ #130: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfed30 } 
        PROD{  <
           ALPHA{ #130: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfd280 } 
        PROD{  <
           ALPHA{ #131: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfd280 } 
        PROD{  <
           ALPHA{ #131: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfed30 } 
        PROD{  <
           ALPHA{ #130: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfd280 } 
        PROD{  <
           ALPHA{ #131: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfed30 } 
        PROD{  <
           ALPHA{ #130: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #141: in [ --, char[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #141: in [ --, char[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #141: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #142: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #142: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #141: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #142: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #141: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #143: in [ --, double[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #143: in [ --, double[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #142: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #141: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #143: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #142: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #141: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #144: in [ --, float[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #144: in [ --, float[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #143: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #142: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #141: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #144: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #143: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #142: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #141: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #145: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #145: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #144: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #143: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #142: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #141: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb7ab0 } 
        PROD{  <
           ALPHA{ #145: in [ --, int[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb94b0 } 
        PROD{  <
           ALPHA{ #144: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbae90 } 
        PROD{  <
           ALPHA{ #143: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbc870 } 
        PROD{  <
           ALPHA{ #142: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbe250 } 
        PROD{  <
           ALPHA{ #141: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbbfc30 } 
        PROD{  <
           ALPHA{ #140: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc1610 } 
        PROD{  <
           ALPHA{ #139: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc2ff0 } 
        PROD{  <
           ALPHA{ #138: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc48f0 } 
        PROD{  <
           ALPHA{ #137: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc62f0 } 
        PROD{  <
           ALPHA{ #136: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc7cd0 } 
        PROD{  <
           ALPHA{ #135: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbc96b0 } 
        PROD{  <
           ALPHA{ #134: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcb090 } 
        PROD{  <
           ALPHA{ #133: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AUDGZ{ 
           Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbcca70 } 
        PROD{  <
           ALPHA{ #132: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc14620 } 
        PROD{  <
           ALPHA{ #22: in [ uint[*], uint[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc14620 } 
        PROD{  <
           ALPHA{ #22: in [ uint[*], uint[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc14620 } 
        PROD{  <
           ALPHA{ #22: in [ uint[*], uint[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc09860 } 
        PROD{  <
           ALPHA{ #4: in [ char[*], char[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc09860 } 
        PROD{  <
           ALPHA{ #4: in [ char[*], char[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc09860 } 
        PROD{  <
           ALPHA{ #4: in [ char[*], char[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08420 } 
        PROD{  <
           ALPHA{ #2: in [ double[*], double[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08420 } 
        PROD{  <
           ALPHA{ #2: in [ double[*], double[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08420 } 
        PROD{  <
           ALPHA{ #2: in [ double[*], double[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc065b0 } 
        PROD{  <
           ALPHA{ #146: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc065b0 } 
        PROD{  <
           ALPHA{ #146: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc065b0 } 
        PROD{  <
           ALPHA{ #146: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc05510 } 
        PROD{  <
           ALPHA{ #147: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc05510 } 
        PROD{  <
           ALPHA{ #147: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc065b0 } 
        PROD{  <
           ALPHA{ #146: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc05510 } 
        PROD{  <
           ALPHA{ #147: in [ --, int[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc065b0 } 
        PROD{  <
           ALPHA{ #146: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbee4f0 } 
        PROD{  <
           ALPHA{ #148: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbee4f0 } 
        PROD{  <
           ALPHA{ #148: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbee4f0 } 
        PROD{  <
           ALPHA{ #148: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1fe00 } 
        PROD{  <
           ALPHA{ #42: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1fe00 } 
        PROD{  <
           ALPHA{ #42: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1fe00 } 
        PROD{  <
           ALPHA{ #42: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15040 } 
        PROD{  <
           ALPHA{ #23: in [ ulong[*], ulong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15040 } 
        PROD{  <
           ALPHA{ #23: in [ ulong[*], ulong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15040 } 
        PROD{  <
           ALPHA{ #23: in [ ulong[*], ulong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbea410 } 
        PROD{  <
           ALPHA{ #149: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbea410 } 
        PROD{  <
           ALPHA{ #149: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbea410 } 
        PROD{  <
           ALPHA{ #149: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ba40 } 
        PROD{  <
           ALPHA{ #34: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ba40 } 
        PROD{  <
           ALPHA{ #34: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ba40 } 
        PROD{  <
           ALPHA{ #34: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbec750 } 
        PROD{  <
           ALPHA{ #150: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbec750 } 
        PROD{  <
           ALPHA{ #150: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbec750 } 
        PROD{  <
           ALPHA{ #150: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0ffd0 } 
        PROD{  <
           ALPHA{ #15: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0ffd0 } 
        PROD{  <
           ALPHA{ #15: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0ffd0 } 
        PROD{  <
           ALPHA{ #15: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08e40 } 
        PROD{  <
           ALPHA{ #3: in [ bool[*], bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08e40 } 
        PROD{  <
           ALPHA{ #3: in [ bool[*], bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc08e40 } 
        PROD{  <
           ALPHA{ #3: in [ bool[*], bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #160: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #160: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #160: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #161: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #161: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #160: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #161: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #160: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #162: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #162: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #161: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #160: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #162: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #161: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #160: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #163: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #163: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #162: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #161: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #160: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #163: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #162: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #161: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #160: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #164: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #164: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #163: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #162: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #161: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #160: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbce790 } 
        PROD{  <
           ALPHA{ #164: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd0440 } 
        PROD{  <
           ALPHA{ #163: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd20d0 } 
        PROD{  <
           ALPHA{ #162: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd3df0 } 
        PROD{  <
           ALPHA{ #161: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd5ba0 } 
        PROD{  <
           ALPHA{ #160: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd7950 } 
        PROD{  <
           ALPHA{ #159: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbd9700 } 
        PROD{  <
           ALPHA{ #158: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdb4b0 } 
        PROD{  <
           ALPHA{ #157: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdd260 } 
        PROD{  <
           ALPHA{ #156: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbdf010 } 
        PROD{  <
           ALPHA{ #155: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe0dc0 } 
        PROD{  <
           ALPHA{ #154: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe2b70 } 
        PROD{  <
           ALPHA{ #153: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe4920 } 
        PROD{  <
           ALPHA{ #152: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe6690 } 
        PROD{  <
           ALPHA{ #151: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1dc30 } 
        PROD{  <
           ALPHA{ #38: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1dc30 } 
        PROD{  <
           ALPHA{ #38: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1dc30 } 
        PROD{  <
           ALPHA{ #38: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0d1f0 } 
        PROD{  <
           ALPHA{ #10: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0d1f0 } 
        PROD{  <
           ALPHA{ #10: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0d1f0 } 
        PROD{  <
           ALPHA{ #10: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc022a0 } 
        PROD{  <
           ALPHA{ #165: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc022a0 } 
        PROD{  <
           ALPHA{ #165: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc022a0 } 
        PROD{  <
           ALPHA{ #165: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc00970 } 
        PROD{  <
           ALPHA{ #166: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc00970 } 
        PROD{  <
           ALPHA{ #166: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc022a0 } 
        PROD{  <
           ALPHA{ #165: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc00970 } 
        PROD{  <
           ALPHA{ #166: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc022a0 } 
        PROD{  <
           ALPHA{ #165: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfb400 } 
        PROD{  <
           ALPHA{ #167: in [ --, int[*]] le <> ge <>},
            ALPHA{ #168: in [ --, int[*]] le <> ge <>},
            ALPHA{ #169: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfb400 } 
        PROD{  <
           ALPHA{ #167: in [ --, int[*]] le <> ge <>},
            ALPHA{ #168: in [ --, int[*]] le <> ge <>},
            ALPHA{ #169: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKD{ [.], Simple{ int}},
         AKS{ [], Simple{ int}},
         AKD{ [.], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbfb400 } 
        PROD{  <
           ALPHA{ #167: in [ --, int[*]] le <> ge <>},
            ALPHA{ #168: in [ --, int[*]] le <> ge <>},
            ALPHA{ #169: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe8d30 } 
        PROD{  <
           ALPHA{ #170: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe8d30 } 
        PROD{  <
           ALPHA{ #170: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe8d30 } 
        PROD{  <
           ALPHA{ #170: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb7c0 } 
        PROD{  <
           ALPHA{ #43: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb7c0 } 
        PROD{  <
           ALPHA{ #43: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb7c0 } 
        PROD{  <
           ALPHA{ #43: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1cb20 } 
        PROD{  <
           ALPHA{ #36: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1cb20 } 
        PROD{  <
           ALPHA{ #36: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1cb20 } 
        PROD{  <
           ALPHA{ #36: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0da60 } 
        PROD{  <
           ALPHA{ #11: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0da60 } 
        PROD{  <
           ALPHA{ #11: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0da60 } 
        PROD{  <
           ALPHA{ #11: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ed10 } 
        PROD{  <
           ALPHA{ #40: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ed10 } 
        PROD{  <
           ALPHA{ #40: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1ed10 } 
        PROD{  <
           ALPHA{ #40: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11380 } 
        PROD{  <
           ALPHA{ #17: in [ short[*], short[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11380 } 
        PROD{  <
           ALPHA{ #17: in [ short[*], short[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc11380 } 
        PROD{  <
           ALPHA{ #17: in [ short[*], short[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0f3b0 } 
        PROD{  <
           ALPHA{ #14: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0f3b0 } 
        PROD{  <
           ALPHA{ #14: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0f3b0 } 
        PROD{  <
           ALPHA{ #14: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0e2d0 } 
        PROD{  <
           ALPHA{ #12: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0e2d0 } 
        PROD{  <
           ALPHA{ #12: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0e2d0 } 
        PROD{  <
           ALPHA{ #12: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1f580 } 
        PROD{  <
           ALPHA{ #41: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1f580 } 
        PROD{  <
           ALPHA{ #41: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1f580 } 
        PROD{  <
           ALPHA{ #41: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf0190 } 
        PROD{  <
           ALPHA{ #171: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf0190 } 
        PROD{  <
           ALPHA{ #171: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbf0190 } 
        PROD{  <
           ALPHA{ #171: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc13c00 } 
        PROD{  <
           ALPHA{ #21: in [ ushort[*], ushort[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc13c00 } 
        PROD{  <
           ALPHA{ #21: in [ ushort[*], ushort[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc13c00 } 
        PROD{  <
           ALPHA{ #21: in [ ushort[*], ushort[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc127c0 } 
        PROD{  <
           ALPHA{ #19: in [ longlong[*], longlong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc127c0 } 
        PROD{  <
           ALPHA{ #19: in [ longlong[*], longlong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc127c0 } 
        PROD{  <
           ALPHA{ #19: in [ longlong[*], longlong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0eb40 } 
        PROD{  <
           ALPHA{ #13: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0eb40 } 
        PROD{  <
           ALPHA{ #13: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0eb40 } 
        PROD{  <
           ALPHA{ #13: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbef350 } 
        PROD{  <
           ALPHA{ #172: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbef350 } 
        PROD{  <
           ALPHA{ #172: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbef350 } 
        PROD{  <
           ALPHA{ #172: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15a60 } 
        PROD{  <
           ALPHA{ #24: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15a60 } 
        PROD{  <
           ALPHA{ #24: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc15a60 } 
        PROD{  <
           ALPHA{ #24: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb140 } 
        PROD{  <
           ALPHA{ #44: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb140 } 
        PROD{  <
           ALPHA{ #44: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}},
         AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bfbb140 } 
        PROD{  <
           ALPHA{ #44: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc10960 } 
        PROD{  <
           ALPHA{ #16: in [ byte[*], byte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc10960 } 
        PROD{  <
           ALPHA{ #16: in [ byte[*], byte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc10960 } 
        PROD{  <
           ALPHA{ #16: in [ byte[*], byte[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ bool}},
         AKS{ [], Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe7f60 } 
        PROD{  <
           ALPHA{ #173: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ bool}},
         AKS{ [], Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe7f60 } 
        PROD{  <
           ALPHA{ #173: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ bool}},
         AKS{ [], Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe7f60 } 
        PROD{  <
           ALPHA{ #173: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe70e0 } 
        PROD{  <
           ALPHA{ #174: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe70e0 } 
        PROD{  <
           ALPHA{ #174: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbe70e0 } 
        PROD{  <
           ALPHA{ #174: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #184: in [ --, char[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #184: in [ --, char[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #184: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #185: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #185: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #184: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #185: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #184: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #186: in [ --, double[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #186: in [ --, double[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #185: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #184: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #186: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #185: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #184: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #187: in [ --, float[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #187: in [ --, float[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #186: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #185: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #184: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #187: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #186: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #185: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #184: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #188: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #188: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #187: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #186: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #185: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #184: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d850 } 
        PROD{  <
           ALPHA{ #188: in [ --, int[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3dc30 } 
        PROD{  <
           ALPHA{ #187: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb3d5c0 } 
        PROD{  <
           ALPHA{ #186: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb27f90 } 
        PROD{  <
           ALPHA{ #185: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb29f40 } 
        PROD{  <
           ALPHA{ #184: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb84f90 } 
        PROD{  <
           ALPHA{ #183: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb86f40 } 
        PROD{  <
           ALPHA{ #182: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb88ef0 } 
        PROD{  <
           ALPHA{ #181: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8aea0 } 
        PROD{  <
           ALPHA{ #180: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb8ce50 } 
        PROD{  <
           ALPHA{ #179: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb94580 } 
        PROD{  <
           ALPHA{ #178: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb96530 } 
        PROD{  <
           ALPHA{ #177: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb984e0 } 
        PROD{  <
           ALPHA{ #176: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9a490 } 
        PROD{  <
           ALPHA{ #175: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ --, char[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ --, char[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ --, bool[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ --, bool[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ --, double[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ --, double[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #201: in [ --, float[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #201: in [ --, float[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #201: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #202: in [ --, int[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #202: in [ --, int[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #201: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #202: in [ --, int[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #201: in [ --, float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ --, double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ --, bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ --, char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ --, byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ --, short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ --, long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ --, longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ --, ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ --, ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ --, uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ --, ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ --, ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1c2b0 } 
        PROD{  <
           ALPHA{ #35: in [ bool, bool] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1c2b0 } 
        PROD{  <
           ALPHA{ #35: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1c2b0 } 
        PROD{  <
           ALPHA{ #35: in [ bool, bool] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc131e0 } 
        PROD{  <
           ALPHA{ #20: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc131e0 } 
        PROD{  <
           ALPHA{ #20: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [], User{ 0}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc131e0 } 
        PROD{  <
           ALPHA{ #20: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               --
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0a2a0 } 
        PROD{  <
           ALPHA{ #5: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0acc0 } 
        PROD{  <
           ALPHA{ #6: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0b650 } 
        PROD{  <
           ALPHA{ #7: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c020 } 
        PROD{  <
           ALPHA{ #8: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc0c9d0 } 
        PROD{  <
           ALPHA{ #9: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc164a0 } 
        PROD{  <
           ALPHA{ #25: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc16e50 } 
        PROD{  <
           ALPHA{ #26: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc17800 } 
        PROD{  <
           ALPHA{ #27: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18190 } 
        PROD{  <
           ALPHA{ #28: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc18b60 } 
        PROD{  <
           ALPHA{ #29: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc194f0 } 
        PROD{  <
           ALPHA{ #30: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc19ec0 } 
        PROD{  <
           ALPHA{ #31: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1a870 } 
        PROD{  <
           ALPHA{ #32: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bc1b200 } 
        PROD{  <
           ALPHA{ #33: in [ sacprelude_d::SACarg, sacprelude_d::SACarg] le <> ge <>}>}}>}>}
  **** Eliminating loops and conditionals ...
  **** Establishing static single assignment form ...
   
**  6: Running type inference system ...
  **** Enforcing Specializations ...
  **** Running type inference system ...
TYdispatchFu: NTY: fun:        FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #202: in [ int[*], int[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #201: in [ float[*], float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ double[*], double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ bool[*], bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ char[*], char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ byte[*], byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ short[*], short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ long[*], long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ longlong[*], longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ ushort[*], ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ uint[*], uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ ulong[*], ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}
TYdispatchFu: NTY: args:               PROD{  <
  AKS{ [1], Simple{ int}},
   AUDGZ{ 
     Simple{ int}}>}
TYdispatchFu: NTY: DFT RES: deriveable : (int[.] int[*] -> #202: in [ int[*], int[*]] le <> ge <> ) 
TYmakeFunTyp: NTY: fun type built: FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [1], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1c1620d0 } 
        PROD{  <
           ALPHA{ #203: in [ --, int[*]] le < 202> ge <>}>}}>}>}

TYmakeOverlo: NTY: functions:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [1], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1c1620d0 } 
        PROD{  <
           ALPHA{ #203: in [ --, int[*]] le < 202> ge <>}>}}>}>}
TYmakeOverlo: NTY: and               FUN{  <
  PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #202: in [ int[*], int[*]] le <> ge < 203>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #201: in [ float[*], float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ double[*], double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ bool[*], bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ char[*], char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ byte[*], byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ short[*], short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ long[*], long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ longlong[*], longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ ushort[*], ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ uint[*], uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ ulong[*], ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}
TYmakeOverlo: NTY: overloaded into : FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [1], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1c1620d0 } 
        PROD{  <
           ALPHA{ #203: in [ --, int[*]] le < 202> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #202: in [ int[*], int[*]] le <> ge < 203>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #201: in [ float[*], float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ double[*], double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ bool[*], bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ char[*], char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ byte[*], byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ short[*], short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ long[*], long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ longlong[*], longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ ushort[*], ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ uint[*], uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ ulong[*], ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}
TYdispatchFu: NTY: fun:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [1], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1c1620d0 } 
        PROD{  <
           ALPHA{ #203: in [ --, int[*]] le < 202> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #202: in [ int[*], int[*]] le <> ge < 203>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #201: in [ float[*], float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ double[*], double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ bool[*], bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ char[*], char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ byte[*], byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ short[*], short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ long[*], long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ longlong[*], longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ ushort[*], ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ uint[*], uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ ulong[*], ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}
TYdispatchFu: NTY: args:               PROD{  <
  AKS{ [1], Simple{ int}},
   AUDGZ{ 
     Simple{ int}}>}
TYdispatchFu: NTY: DFT RES: exact : (int[1] int[+] -> #203: in [ --, int[*]] le < 202> ge <> ) 
TYdispatchFu: NTY: fun:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [1], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1c1620d0 } 
        PROD{  <
           ALPHA{ #203: in [ int[*], int[*]] le < 202 145> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #202: in [ int[*], int[*]] le < 145> ge < 203>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #201: in [ float[*], float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ double[*], double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ bool[*], bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ char[*], char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ byte[*], byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ short[*], short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ long[*], long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ longlong[*], longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ ushort[*], ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ uint[*], uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ ulong[*], ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}
TYdispatchFu: NTY: args:               PROD{  <
  AKS{ [1], Simple{ int}},
   AUDGZ{ 
     Simple{ float}}>}
TYdispatchFu: NTY: DFT RES: no match!
TYdispatchFu: NTY: fun:        FUN{  <
  PROD{  <
     PROD{  <
        AKS{ [1], Simple{ int}},
         AUDGZ{ 
           Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1c1620d0 } 
        PROD{  <
           ALPHA{ #203: in [ int[*], int[*]] le < 202 145> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ int}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9c4c0 } 
        PROD{  <
           ALPHA{ #202: in [ int[*], int[*]] le < 145> ge < 203>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ float}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bb9e4c0 } 
        PROD{  <
           ALPHA{ #201: in [ float[*], float[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ double}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba04a0 } 
        PROD{  <
           ALPHA{ #200: in [ double[*], double[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ bool}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba2480 } 
        PROD{  <
           ALPHA{ #199: in [ bool[*], bool[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ char}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba42b0 } 
        PROD{  <
           ALPHA{ #198: in [ char[*], char[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ byte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba6290 } 
        PROD{  <
           ALPHA{ #197: in [ byte[*], byte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ short}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bba8270 } 
        PROD{  <
           ALPHA{ #196: in [ short[*], short[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ long}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbaa250 } 
        PROD{  <
           ALPHA{ #195: in [ long[*], long[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ longlong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbac230 } 
        PROD{  <
           ALPHA{ #194: in [ longlong[*], longlong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ubyte}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbae210 } 
        PROD{  <
           ALPHA{ #193: in [ ubyte[*], ubyte[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ushort}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb01f0 } 
        PROD{  <
           ALPHA{ #192: in [ ushort[*], ushort[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ uint}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb21d0 } 
        PROD{  <
           ALPHA{ #191: in [ uint[*], uint[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb41b0 } 
        PROD{  <
           ALPHA{ #190: in [ ulong[*], ulong[*]] le <> ge <>}>}}>},
   PROD{  <
     PROD{  <
        AKD{ [.], Simple{ int}},
         AUD{ Simple{ ulonglong}}>},
      IRES{ poss: {0 } fundefs: {0x0x5bcc1bbb6190 } 
        PROD{  <
           ALPHA{ #189: in [ ulonglong[*], ulonglong[*]] le <> ge <>}>}}>}>}
TYdispatchFu: NTY: args:               PROD{  <
  AKS{ [1], Simple{ int}},
   AUDGZ{ 
     Simple{ double}}>}


OOOOOOOPS, your program crashed the compiler 8-((

Please, submit the bug report online at
https://gitlab.sac-home.org/sac-group/sac2c/-/issues.

For your convenience, the compiler has pre-fabricated a bug report
in the file "./sacprelude_d.sacbugreport" !

Besides some infos concerning the compiler version and its
usage it contains the specified source file.

If you want to send that bug report to us, you may simply type
  mail bugs@sac-home.org < sacprelude_d.sacbugreport

If you decide to file a bug on our bug-tracker, please go to
  https://gitlab.sac-home.org/sac-group/sac2c/-/issues.

When filing a bug report, please copy/paste the initial comment section of
the bug report into the plain text comment section of the bug-tracker, and add
the whole bug report file as an attachment.

