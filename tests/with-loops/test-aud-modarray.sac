// test AUD modarray WL with two operators

// SAC_TEST|include common.mk
// SAC_TEST|SAC2C_FLAGS += -v0 -noprelude
// SAC_TEST|CALL_SAC2C := $(SAC2C) $(SAC2C_FLAGS)

// SAC_TEST|all: <file-name-we>
// SAC_TEST|<tab>$(CHECK_RETURN_STATUS) $< 93

noinline
int[*] hide( int x, int[*] a)
{
   if (_eq_SxS_(x, 1))
      res = 42;
   else 
      res = a;
   return res;
}

noinline
int consume( int[*] a, int[*] b)
{
   return _add_SxS_ ( _sel_VxA_([4],(a)),
          _add_SxS_ ( _sel_VxA_([5],(a)),
          _add_SxS_ ( _sel_VxA_([8],(a)),
          _add_SxS_ ( _sel_VxA_([4],(b)),
          _add_SxS_ ( _sel_VxA_([5],(b)),
                      _sel_VxA_([8],(b)))))));
}


int main()
{
    a = hide (0, [1,2,3,4,5,6,7,8,9]);
    shp = hide (0, [6]);

    a,b = with {
              (_mul_SxV_(0,shp) <= iv < shp step _add_SxV_(4, _mul_SxV_(0,shp))) : (21,42);
          } : (modarray(a), modarray(a));

    // should return (21+6+9+42+6+9) = 93!
    return consume (a,b);
}
