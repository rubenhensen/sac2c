// check proper duplication of side-effect

// SAC_TEST|include common.mk
// SAC_TEST|SAC2C_FLAGS += -v0 -noprelude
// SAC_TEST|CALL_SAC2C := $(SAC2C) $(SAC2C_FLAGS)

// SAC_TEST|all: <file-name-we> miniCounter
// SAC_TEST|<tab>$(CHECK_RETURN_STATUS) $< 16

// source code of the class that is needed:
//
// SAC_TEST|define CLASS_SAC
// SAC_TEST|  class miniCounter;
// SAC_TEST|
// SAC_TEST|  classtype int;
// SAC_TEST|
// SAC_TEST|  export all;
// SAC_TEST|
// SAC_TEST|  miniCounter miniCounter (int x)
// SAC_TEST|  {
// SAC_TEST|      return to_miniCounter (x);
// SAC_TEST|  }
// SAC_TEST|
// SAC_TEST|  void inc (miniCounter& cnt)
// SAC_TEST|  {
// SAC_TEST|      x = from_miniCounter (c);
// SAC_TEST|      c = to_miniCounter (_add_SxS_(x,1));
// SAC_TEST|  }
// SAC_TEST|
// SAC_TEST|  int getValue (miniCounter& c)
// SAC_TEST|  {
// SAC_TEST|      x = from_miniCounter (c);
// SAC_TEST|      c = to_miniCounter (x);
// SAC_TEST|      return x;
// SAC_TEST|  }
// SAC_TEST|
// SAC_TEST|endef
// SAC_TEST|export CLASS_SAC

// generate class
// SAC_TEST|miniCounter.sac:
// SAC_TEST|<tab>echo "$$CLASS_SAC" > $@

// compile class
// SAC_TEST|miniCounter: miniCounter.sac
// SAC_TEST|<tab>@$(CALL_SAC2C) $< 2>&1 | $(GREP_COMMAND_OUTPUT) "arning\|rror" 0

use miniCounter: all;

int main()
{
    a = [1,2,3,4,5,6,7,8,9,10,11,12];
    cnt = miniCounter(0);

    a, b, cnt = with {
                  ([0] <= iv < [8]) { inc (cnt); } : ( _add_SxS_(_sel_VxA_(iv, a), 1),
                                                       _sel_VxA_(iv, a),
                                                       cnt );
                } : (genarray( [12], 0),
                     genarray( [11], 0),
                     propagate( cnt));

    return getValue (cnt); // should yield 16 !
}
