// test AUD fold WL with 2 operators

// SAC_TEST|include common.mk
// SAC_TEST|SAC2C_FLAGS += -v0 -noprelude
// SAC_TEST|CALL_SAC2C := $(SAC2C) $(SAC2C_FLAGS)

// SAC_TEST|all: <file-name-we>
// SAC_TEST|<tab>$(CHECK_RETURN_STATUS) $< 24

noinline
int[*] hide( int x, int[*] a)
{
   if (_eq_SxS_(x, 1))
      res = [7];
   else 
      res = a;
   return res;
}

noinline
int consume( int[*] a)
{
   return ( _eq_SxS_ (_dim_A_(a), 0) ? a : hide (0, _sel_VxA_([0], _shape_A_(a))));
}

noinline
int[*] add ( int[*] a, int[*] b)
{  return _add_SxS_ ( a, _sel_VxA_([0], b)); }

int main()
{
    shp = hide (1, 0);
    a,b = with {
            (_mul_SxV_(0,shp) <= iv < shp step _add_SxV_(4, _mul_SxV_(0,shp))
                                          width _add_SxV_(2, _mul_SxV_(0,shp))) : (iv,iv);
          } : (fold( add, 2), fold( add, 2));
// the correct answer is 24!
    return consume (add( a, [b]));
}
