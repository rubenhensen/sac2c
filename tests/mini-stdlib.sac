// A very simple set of commonly used sac functions across
// unit tests.


// Scalar operations
inline int + (int a, int b) { return _add_SxS_ (a, b); }
inline int - (int a, int b) { return _sub_SxS_ (a, b); }
inline int * (int a, int b) { return _mul_SxS_ (a, b); }
inline int / (int a, int b) { return _div_SxS_ (a, b); }

// Logical operationns
inline bool <  (int a, int b) { return _lt_SxS_ (a, b); }
inline bool <= (int a, int b) { return _le_SxS_ (a, b); }
inline bool >  (int a, int b) { return _gt_SxS_ (a, b); }
inline bool >= (int a, int b) { return _ge_SxS_ (a, b); }
inline bool == (int a, int b) { return _eq_SxS_ (a, b); }
inline bool != (int a, int b) { return _neq_SxS_ (a, b); }

// Selection
inline int sel (int[.] iv, int[*] a) { return _sel_VxA_ (iv, a); }

// Shape
inline int[.] shape (int[*] a) { return _shape_A_ (a); }

// Increment
inline int ++ (int a) { return _add_SxS_ (a, 1); }

// Mixed scalar-vector operations
inline int[.] + (int a, int[.] b)    { return _add_SxV_ (a, b); }
inline int[.] + (int[.] b, int a)    { return _add_VxS_ (b, a); }
inline int[.] + (int[.] a, int[.] b) { return _add_VxV_ (a, b); }

inline int[.] - (int a, int[.] b)    { return _sub_SxV_ (a, b); }
inline int[.] - (int[.] b, int a)    { return _sub_VxS_ (b, a); }
inline int[.] - (int[.] a, int[.] b) { return _sub_VxV_ (a, b); }

inline int[.] * (int a, int[.] b)    { return _mul_SxV_ (a, b); }
inline int[.] * (int[.] b, int a)    { return _mul_VxS_ (b, a); }
inline int[.] * (int[.] a, int[.] b) { return _mul_VxV_ (a, b); }

inline int[.] / (int a, int[.] b)    { return _div_SxV_ (a, b); }
inline int[.] / (int[.] b, int a)    { return _div_VxS_ (b, a); }
inline int[.] / (int[.] a, int[.] b) { return _div_VxV_ (a, b); }


inline int sum (int[*] a)
{
    sh = shape (a);
    return with {
             (0*sh <= iv < sh): a[iv];
           }: fold (+, 0);
}
