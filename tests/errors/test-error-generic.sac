// SAC_TEST|include common.mk
// SAC_TEST|SAC2C_FLAGS += -check tc -b 1:loc -printstart 1:loc -cti-message-length 1 -cti-header-format "%s begin----: " -cti-multi-line-format "%s continued: "
// SAC_TEST|CALL_SAC2C := $(SAC2C) $(SAC2C_FLAGS)
//
// SAC_TEST|all: <file-name>
// SAC_TEST|<tab>OUTPUT=`$(CALL_SAC2C) $< 2>&1`; <nlslash>

// Test that there is 1 primary line and 11 continued lines.
// SAC_TEST|<tab>echo "$$OUTPUT" | grep -E "^Error begin----: .+$$" | $(GREP_COMMAND_OUTPUT) "" 1; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | grep -E "^Error continued: .+$$" | $(GREP_COMMAND_OUTPUT) "" 11; <nlslash>

// Since the headers are of length 17, and the message length is lower than 37, the effective message length
// minus the header is set to 20.
// Recall that if there is a space in the first 20 (technically 21) characters, there will be room
// to wrap the line and no characters are allowed beyond the 20th character.
// However, if there are no spaces, the line is allowed to continue until the first place, at which point
// it is wrapped.
//
// To that end, we test that:
// If the non-header part of a line is longer than 20 characters (37 total), 
// then there may not be any spaces in the message part of the line.

// SAC_TEST|<tab>echo "$$OUTPUT" | while IFS= read -r line; do <nlslash>
// SAC_TEST|<tab>if [ `echo -n "$$line" | wc -c` -gt 37 ] ; <nlslash>
// SAC_TEST|<tab>then echo "$$line" | cut -c 18- | $(GREP_COMMAND_OUTPUT) " " 0; fi; done; <nlslash>


// Test the function CTIerror and the underlying CTF functions with no location information.

// No code is necessary - there is no matching -printstop flag for the -printstart flag, which leads to an error.