// This tests makes sure that the CUDA CUAD traversal is actually adding the *_start
// and *_end primitives.

// SAC_TEST|include common.mk
// SAC_TEST|SAC2C_FLAGS += -t cuda_reg -bcuda:cuad
// SAC_TEST|all: <file-name>
// SAC_TEST|<tab>@$(SAC2C) $(SAC2C_FLAGS) -nocuad $< | $(GREP_COMMAND_OUTPUT) '_start\|_end' 0
// SAC_TEST|<tab>@$(SAC2C) $(SAC2C_FLAGS) -docuad $< | $(GREP_COMMAND_OUTPUT) '_start\|_end' 6
#include "mini-stdlib.sac"

noinline int[.] id (int[.] a) { return a; }

int main () {
  a = id(with {} : genarray ([100], 19));
  aa = with { #pragma nocuda (. <= iv <= .): iv[0] + 1; } : genarray ([100], 23);
  bb = id (aa);
  dd = id (a * 2);
  k = with { (. <= iv <= .): a[iv] + 2; } : modarray (a);
  kk = bb + aa;
  d = id(k * 2);
  b = id(k);
  return b[10] + bb[23] + d[34] + dd[34] + kk[12];
}
