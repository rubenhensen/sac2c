// static declaration of file-local global objects

// SAC_TEST|include common.mk
// SAC_TEST|SAC2C_FLAGS +=
// SAC_TEST|CALL_SAC2C := $(SAC2C) $(SAC2C_FLAGS) -v0

// SAC_TEST|all: <file-name> miniCounter
// SAC_TEST|<tab>@$(CALL_SAC2C) $< 2>&1 | $(GREP_COMMAND_OUTPUT) "arning\|rror" 0

// source code of the class that is needed:
//
// SAC_TEST|define CLASS_SAC
// SAC_TEST|  class miniCounter;
// SAC_TEST|
// SAC_TEST|  classtype int;
// SAC_TEST|  
// SAC_TEST|  export all;
// SAC_TEST|  
// SAC_TEST|  miniCounter miniCounter (int x)
// SAC_TEST|  {
// SAC_TEST|      return to_miniCounter (x);
// SAC_TEST|  }
// SAC_TEST|  
// SAC_TEST|  int getValue (miniCounter& c)
// SAC_TEST|  {
// SAC_TEST|      x = from_miniCounter (c);
// SAC_TEST|      c = to_miniCounter (x);
// SAC_TEST|      return x;
// SAC_TEST|  }
// SAC_TEST|  export all;
// SAC_TEST|endef
// SAC_TEST|export CLASS_SAC

// generate class
// SAC_TEST|miniCounter.sac:
// SAC_TEST|<tab>echo "$$CLASS_SAC" > $@

// compile class
// SAC_TEST|miniCounter: miniCounter.sac
// SAC_TEST|<tab>@$(CALL_SAC2C) $< 2>&1 | $(GREP_COMMAND_OUTPUT) "arning\|rror" 0

use miniCounter: all;

objdef miniCounter theCounter = miniCounter (0);

int main()
{
    return getValue (theCounter);
}
