// Test whether the compiler is able to parse type patterns with conditions,
// and generates the corresponding code.
//
// SAC_TEST|include common.mk
// SAC_TEST|SAC2C_FLAGS += -noprelude -ecc -check c -bpre:rtpf
// SAC_TEST|CALL_SAC2C := $(SAC2C) $(SAC2C_FLAGS)
//
// SAC_TEST|all: <file-name>
// SAC_TEST|<tab>OUTPUT=`$(CALL_SAC2C) $< 2>&1`; <nlslash>
// Checks generated for pre-conditions
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "( b >0)"       1; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "( n >0)"       1; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "( m >n)"       1; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "( bar( a, m))" 1; <nlslash>
// Checks generated for post-conditions
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "( m >q)"       1; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "( q == q)"     1; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "( bar( q, m))" 1; <nlslash>
// Ensure a pre-condition is generated
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "( x >0)"       1; <nlslash>
// Ensure a post-condition is generated
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "( z >0)"       1; <nlslash>

inline bool == (int a, int b) { return _eq_SxS_ (a, b); }
inline bool >  (int a, int b) { return _gt_SxS_ (a, b); }

bool bar (int[m,n] a, int x)
{
    return _add_SxS_ (m, n) > x;
}

int[m,q,q] foo (int[m,n,3] a, int b)
    | b > 0, n > 0, m > n, bar(a, m) // pre-conditions
    , m > q, q == q, bar(q, m)       // post-conditions
{
    return a;
}

// Ensure a pre-check function is generated if there are no constraints imposed
// by type patterns, but there are pre-conditions.
int ensure_pre (int x)
    | x > 0
{
    return x;
}

// Ensure a post-check function is generated if there are no constraints imposed
// by type patterns, but there are post-conditions.
int[z] ensure_post (int y)
    | z > 0
{
    return [y];
}

int main ()
{
    return 0;
}
