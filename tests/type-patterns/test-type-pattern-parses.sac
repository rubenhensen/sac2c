// Test whether the compiler is able to parse different type patterns.
//
// SAC_TEST|include common.mk
// SAC_TEST|SAC2C_FLAGS += -noprelude
// SAC_TEST|CALL_SAC2C := $(SAC2C) $(SAC2C_FLAGS)
//
// SAC_TEST|all: <file-name-we>
// SAC_TEST|<tab>$(CHECK_RETURN_STATUS) $< 0

int[5] num_pattern (int[5] a)
{
    return a;
}

int[n] vect_pattern (int[n] b)
{
    return b;
}

int[m:shp] shape_pattern (int[m:shp] c)
{
    return c;
}

int[5,n,m:shp] combined_pattern (int[5,n,m:shp] d)
{
    return d;
}

int[5:shp,n:shp] multiple_shapes (int[5:shp,n:shp] e)
{
    return e;
}

int[n,n] return_only (int[.] f)
{
    return [f,f];
}

int[*] shp_as_dim (int[1:dim] idx, int[dim:shp] array)
{
    return _sel_VxA_ (idx, array);
}

int[n] + (int[n] a, int[n] b)
{
    return _add_VxV_ (a, b);
}

int[+,n:shp,n] start_with_aud (int[+,n:shp,n] g)
{
    return g;
}

int[n,+,n:shp] center_aud (int[n,+,n:shp] h)
{
    return h;
}

int[n,n:shp,+] end_with_aud (int[n,n:shp,+] i)
{
    return i;
}

int[n] two_nshps (int[n,n:shp,n:shp] i)
{
    return shp;
}

int main ()
{
    return 0;
}
