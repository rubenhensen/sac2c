// If the user gives a pre-existing type, such as int[2,2], we should not be
// generating any type pattern functions, as these cases are not actually type
// patterns, and are already captured by the type checker.
// Conversely, a pattern int[2,.] will be converted to int[.,.], in which case
// we DO now want to check that the length of the first dimension is actually 2.
// Thus in this case we do want to generate code.
//
// SAC_TEST|include common.mk
// SAC_TEST|SAC2C_FLAGS += -noprelude -ecc -check tc -bpre
// SAC_TEST|CALL_SAC2C := $(SAC2C) $(SAC2C_FLAGS)
//
// SAC_TEST|all: <file-name>
// SAC_TEST|<tab>OUTPUT=`$(CALL_SAC2C) $< 2>&1`; <nlslash>
// No type pattern code generated for foo
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "pre_foo" 0; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "post_foo" 0; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "impl_foo" 0; <nlslash>
// No type pattern code generated for bar
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "pre_bar" 0; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "post_bar" 0; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "impl_bar" 0; <nlslash>
// Type pattern code generated for baz
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "pre_baz(...)" 1; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "post_baz(...)" 1; <nlslash>
// SAC_TEST|<tab>echo "$$OUTPUT" | $(GREP_COMMAND_OUTPUT) "impl_baz(...)" 1; <nlslash>

// Pre-existing AKD type
int[.,.] foo (int[.,.] a)
{
    return a;
}

// Pre-existing AKS type
int[2,2] bar (int[2,2] b)
{
    return b;
}

// AKD type with type pattern
int[2,.] baz (int[2,.] c)
{
    return c;
}

int main()
{
    w = [ [1,2], [3,4] ];
    x = foo (w);
    y = bar (x);
    z = baz (y);
    return _sel_VxA_ ([0,0], z);
}
