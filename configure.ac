dnl
dnl $Log$
dnl Revision 1.35  2004/11/04 16:05:57  ktr
dnl Made some modifications for Mac OS X Panther.
dnl
dnl Revision 1.34  2004/08/09 15:52:06  sah
dnl well, we set __STDC__=0 again. This
dnl will only work with gcc 2.xx as the
dnl new gcc 3.xx will generate lots of warning
dnl but who cares. As nobody uses gcc 3.xx
dnl on solaris, forget about it.
dnl
dnl Revision 1.33  2004/08/09 15:37:13  sah
dnl removved __STDC__=0 define and added
dnl STDC_0_IN_SYSTEM_HEADERS instead
dnl
dnl Revision 1.32  2004/08/09 12:03:16  sah
dnl added better test for GNU indent
dnl
dnl Revision 1.31  2004/08/09 11:38:47  sah
dnl indent parameters modified
dnl
dnl Revision 1.30  2004/08/09 10:22:03  sah
dnl added check for __STDC__ flag on solaris
dnl its seems to be set already on some
dnl systenms
dnl
dnl Revision 1.29  2004/08/07 13:55:22  sah
dnl if available, gnu indent is used instead of cb
dnl which improves readability of generated code
dnl
dnl Revision 1.28  2003/11/24 16:57:46  sah
dnl fixed bison/yacc test
dnl
dnl Revision 1.27  2003/09/18 14:06:35  dkr
dnl test for -pthread flag of gcc: linker file removed as well now
dnl
dnl Revision 1.26  2003/07/31 16:55:41  mwe
dnl changed PDCCFLAGS from -g3 to -g for Mac's
dnl
dnl Revision 1.25  2003/04/26 12:33:50  sah
dnl added pthread test for gccs
dnl
dnl Revision 1.24  2003/04/25 18:28:04  sah
dnl added flag CCMTLINK and removed NEED_REENTRANT
dnl as now everything should be handeled right by
dnl gcc -pthread flag and dec cc -pthread flag
dnl
dnl Revision 1.23  2003/04/25 14:39:12  sbs
dnl -Dlint added on linux. Required for the yacc template to avoid nasty
dnl warnings.
dnl
dnl Revision 1.22  2003/04/25 14:00:35  sbs
dnl MUST_REFERENCE_YYLABELS disabled for all platforms now.
dnl However, left the flag as it may re-appear some day somewhere....
dnl
dnl Revision 1.21  2003/04/16 15:34:47  sah
dnl phm is now disabled on macos aka darwin
dnl by default
dnl
dnl Revision 1.20  2003/04/16 14:42:25  sbs
dnl -traditional-cpp added for mac RCCCFLAGS.
dnl
dnl Revision 1.19  2003/04/16 11:58:16  sah
dnl added macos specific cppfile flags
dnl
dnl Revision 1.18  2003/04/14 21:24:02  sah
dnl mac support (testing)
dnl
dnl Revision 1.17  2003/03/26 16:34:02  sah
dnl added mkdtemp test
dnl
dnl Revision 1.16  2003/03/26 09:18:30  sbs
dnl -pthread option added for DEC cc.
dnl
dnl Revision 1.15  2003/03/25 21:02:43  sah
dnl replaced 0 by O for optimization
dnl flags;)
dnl
dnl Revision 1.14  2003/03/24 23:16:16  sah
dnl fixed ranlib bug
dnl
dnl Revision 1.13  2003/03/21 17:25:29  sah
dnl fixed O flags bug on alpha
dnl
dnl Revision 1.12  2003/03/21 17:11:52  sah
dnl now testing on sqrt for libm
dnl
dnl Revision 1.11  2003/03/21 16:59:24  sah
dnl added test on
dnl bison functionality
dnl
dnl Revision 1.10  2003/03/21 16:41:37  sah
dnl updated sbrk detection
dnl
dnl Revision 1.9  2003/03/21 15:53:04  sah
dnl added handling of platform
dnl specific compiler flags
dnl
dnl Revision 1.8  2003/03/21 11:37:47  sah
dnl fixed alpha cc bug
dnl
dnl Revision 1.7  2003/03/21 01:29:51  sah
dnl stderr bugfix
dnl
dnl Revision 1.6  2003/03/21 01:23:09  sah
dnl minor fixes
dnl
dnl Revision 1.5  2003/03/21 00:43:23  sah
dnl fixed bug in stderr_is_constant
dnl detection
dnl
dnl Revision 1.4  2003/03/21 00:34:39  sah
dnl added support for linux
dnl (tested on gentoo linux)
dnl
dnl Revision 1.3  2003/03/20 23:12:59  sah
dnl cpu sparc now matches sac SPARC setting
dnl
dnl Revision 1.2  2003/03/20 22:28:07  sah
dnl os solaris* os now matched to SOLARIS
dnl
dnl Revision 1.1  2003/03/20 22:19:39  sah
dnl Initial revision
dnl
dnl

dnl configure script for building sac2c compiler 
dnl on different hosts and os

dnl tell configure who we are
dnl parameters: package name, version, where to send bugreports
AC_INIT(sac2c, rcs, info@sac-home.org)

dnl set source directory and scripting directory
AC_CONFIG_SRCDIR(.)
AC_CONFIG_AUX_DIR(./config)

dnl we use C as our compiler language
AC_LANG(C)

dnl and which files to create
AC_CONFIG_FILES(Makefile.Config src/runtime/sac2crc)
AC_CONFIG_HEADER(./src/global/config.h)

dnl check for host type
AC_CANONICAL_BUILD()
AC_CANONICAL_HOST()
AC_CANONICAL_TARGET()

dnl set OS and ARCH flags
AC_DEFINE_UNQUOTED(OS,"$target_os",set to the os type)
AC_SUBST(OS,$target_os)
AC_DEFINE_UNQUOTED(ARCH,"$target_cpu",set to the architecture)
AC_SUBST(ARCH,$target_cpu)

dnl search for a C compiler
AC_PROG_CC(gcc cc)

dnl check whether its suns cc
AC_MSG_CHECKING(whether cc is a Sun Pro C compiler)
AC_TRY_COMPILE(,
[#ifndef __SUNPRO_C
  choke me
#endif],
AC_MSG_RESULT(yes)
SUNC=yes,
AC_MSG_RESULT(no)
SUNC=no
)

dnl check whether its compaqs (or dec) cc
AC_MSG_CHECKING(whether cc is a Compaq/DEC C compiler)
AC_TRY_COMPILE(,
[#ifndef __DECC
  choke me
#endif],
AC_MSG_RESULT(yes)
DECC=yes,
AC_MSG_RESULT(no)
DECC=no
)

dnl check whether its apples cc
AC_MSG_CHECKING(whether cc is a Apple compiler)
AC_TRY_COMPILE(,
[#ifndef __APPLE__
  choke me
  #endif],
  AC_MSG_RESULT(yes)
  MACC=yes
  GCC=no,
  AC_MSG_RESULT(no)
  MACC=no
)
  
dnl check whether popen is an extension
AC_MSG_CHECKING([need of _EXTENSIONS_ flag])
AC_TRY_COMPILE([#include <stdio.h>],[popen("rw","testfile")],
AC_MSG_RESULT(no)
need_ext_flags=no,
AC_MSG_RESULT(yes)
need_ext_flags=yes)

dnl check for C preprocessor
AC_PROG_CPP()

dnl check for ranlib
AC_PROG_RANLIB()
if test "$RANLIB"; then
  case "$target_os" in
    *darwin*) RANLIB="$RANLIB -c"
  esac
fi

dnl check, whether we need -traditinal flag
AC_PROG_GCC_TRADITIONAL

dnl check whether its gnu indent
AC_MSG_CHECKING([whether GNU indent works])
GNUINDENT=$(indent --version)
case "$GNUINDENT" in
  *GNU*) 
    CB="indent"
    AC_MSG_RESULT(yes)
    ;;
  *) 
    CB="\$(PROJECT_ROOT)/tools/bin/cb"
    AC_MSG_RESULT(no)
    ;;
esac
AC_SUBST(CB, $CB)

dnl search for bison, byacc or yacc
AC_PROG_YACC()

dnl check whether a non yacc works
if [ test "$YACC" != "yacc" ]; then
  AC_MSG_CHECKING([whether $YACC works])
  mkdir .ac_yacc_test
  cd .ac_yacc_test
  cp ../src/scanparse/sac.y .
  if [ $YACC sac.y >/dev/null 2>/dev/null ]; then
    AC_MSG_RESULT(ok)
  else
    AC_MSG_RESULT(failed)
    AC_CHECK_PROG(YACC, [yacc], [yacc], [!fail])
    if [ test "$YACC" != "yacc" ]; then
      AC_MSG_ERROR([cannot find working bison/yacc], 10)
    else
      AC_MSG_NOTICE([using yacc instead])
    fi
  fi
  cd ..
  rm -rf .ac_yacc_test
fi

dnl search for flex or lex
AC_PROG_LEX()

dnl search for malloc.h
AC_CHECK_HEADERS(malloc.h)

dnl check for mkdtemp
AC_CHECK_FUNCS(mkdtemp)

dnl search for pthread.h
AC_CHECK_HEADER(pthread.h,[

dnl if found, enable multi threading
AC_DEFINE(HAVE_PTHREAD_H, 1, set to 1 if you have the <pthread.h> header file)
AC_SUBST(DISABLE_MT, no)

],[

dnl otherwise disable mt
AC_DEFINE(DISABLE_MT, 1, set to 1 to disable multi threading)
AC_SUBST(DISABLE_MT, yes)

])

dnl check whether to link math library
AC_SEARCH_LIBS(sqrt, m)

dnl checking for presence of strtok and strrchr
AC_CHECK_FUNCS([strtok strrchr])

dnl check for sbrk function
AC_CHECK_FUNC(sbrk, [

dnl if found, check type
dnl  check definition of sbrk
AC_MSG_CHECKING(for sbrk argument type)
include_file_list=`ls -1 /usr/include/*.h`
sbrk_types=`for name in $include_file_list; do grep sbrk $name 2>/dev/null; done`
[sbrk_types=`echo "$sbrk_types" | sed -e 's/[A-Za-z0-9 _*]*([ ]*//g' | sed -e 's/)[A-Za-z0-9_* ;]*//g' | sed -e 's/ [A-Za-z0-9_* ]*//g'` ]
[ for name in $sbrk_types; do ]
 AC_TRY_COMPILE([#include <unistd.h>],[sbrk(($name) 0)],break,name=none)
[ done ]

[ if test $name = none ; then ]
AC_DEFINE(DISABLE_PHM, 1)
AC_SUBST(DISABLE_PHM, yes)
AC_MSG_RESULT(not found)
[ else ]
AC_DEFINE_UNQUOTED(SBRK_T,$name,set to the type of sbrk argument)
AC_MSG_RESULT($name)
AC_SUBST(DISABLE_PHM, no)
[ fi ]
],[

dnl otherwise disable pm
AC_DEFINE(DISABLE_PHM, 1, set to disable private heapmanagement)
AC_SUBST(DISABLE_PHM, yes)
])

dnl hack, as we don't know why phm doesn't work
dnl on macs. just disable it there
case "$target_os" in
    *darwin*) AC_DEFINE(DISABLE_PHM, 1)
              AC_SUBST(DISABLE_PHM, yes)
esac

dnl check if printf generates leading 0x for pointers
AC_MSG_CHECKING(for 0x prefix when printing pointers)
AC_EGREP_CPP(0x0*,
[#include <stdio.h>
int main()
{
printf("%p", (void*) 0);
}
], has_ptr_prefix=yes, has_ptr_prefix=no)
if [ test $has_ptr_prefix = yes ]; then
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
  AC_DEFINE(NEED_PTR_PREFIX, 1, set to 1 if printf does not print a leading
0x in front of pointers)
fi

dnl check if stderr is a constant (needed for dbug.c
AC_MSG_CHECKING(whether stderr is a constant)
AC_TRY_COMPILE([
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

FILE *_db_fp_ = stderr;
],[],stderr_is_constant=yes,stderr_is_constant=no)
if [ test $stderr_is_constant = yes ]; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(STDERR_IS_CONSTANT, 1, set to 1 if stderr is a constant)
else
  AC_MSG_RESULT(no)
fi

dnl check whether to remove ar magic file
AC_MSG_CHECKING(for ar magic file)
mkdir .ar_magic_file_test
cd .ar_magic_file_test
touch testfile
ar -rc test.ar testfile
rm testfile
ar -x test.ar
[if [ -f ________64ELEL_ ]; then]
  AC_DEFINE(MUST_KILL_AR_MAGIC_FILE,1,set to 1 if ar generates a magic file)
  rm ________64ELEL_
  AC_MSG_RESULT(found);
else
  AC_MSG_RESULT(not found);
fi
rm testfile test.ar
cd ..
rmdir .ar_magic_file_test

dnl when not using bison, we need to
dnl reference YYLABELS
if test "$YACC" = "obsolete_yacc"; then
  AC_DEFINE(MUST_REFERENCE_YYLABELS, 1, set to 1 if gcc complains about unused labels)
fi

dnl check for pthread flag on gcc
if test "$GCC" = yes; then
  AC_MSG_CHECKING([existence of pthread flag])
  echo "int main(){return 0;}" > .sac_configure_temp.c
  if test "`gcc -o .sac_configure_temp -pthread .sac_configure_temp.c 2>&1 | grep "unrecognized option"`" = ""; then
    AC_MSG_RESULT([supported])
    GCC_PTHREADS="-pthread"
  else
    AC_MSG_RESULT([unsupported])
    GCC_PTHREADS="-lpthread"
  fi
  rm -f .sac_configure_temp.c .sac_configure_temp
fi
dnl test for compiler flags
dnl for sac2crc
AC_MSG_CHECKING([sac2crc compiler flags])
if [ test "$GCC" = yes ]; then
  AC_SUBST(OPT_O0, [""])
  AC_SUBST(OPT_O1, [-O1])
  AC_SUBST(OPT_O2, [-O2])
  AC_SUBST(OPT_O3, [-O3])
  AC_SUBST(OPT_g, [-g])
  AC_SUBST(RCLDFLAGS, [""])
  AC_SUBST(RCCCFLAGS, ["-Wall -Wno-unused -fno-builtin"])
  AC_SUBST(MKCCFLAGS, ["-ansi -Wall -g"])
  AC_SUBST(PDCCFLAGS, ["-ansi -Wall -g -O3"])
  AC_SUBST(DEPSFLAG, ["-M"])
  AC_SUBST(CPPFILE, ["gcc -E -C -x c"])
  AC_SUBST(CCMTLINK, [$GCC_PTHREADS])
  AC_MSG_RESULT([gcc settings])
elif [ test "$SUNC" = yes ]; then
  AC_SUBST(OPT_O0, [""])
  AC_SUBST(OPT_O1, [-xO2])
  AC_SUBST(OPT_O2, [-xO4])
  AC_SUBST(OPT_O3, [-xO5])
  AC_SUBST(OPT_g, [-g])
  AC_SUBST(RCLDFLAGS, [""])
  AC_SUBST(RCCCFLAGS, ["-dalign -fsimple -xsafe=mem"])
  AC_SUBST(MKCCFLAGS, ["-erroff=E_CAST_DOESNT_YIELD_LVALUE -g"])
  AC_SUBST(PDCCFLAGS, ["-erroff=E_CAST_DOESNT_YIELD_LVALUE -g -xO4"])
  AC_SUBST(DEPSFLAG, ["-xM"])
  AC_SUBST(CPPFILE, ["cc -E -C -x c"])
  AC_SUBST(CCMTLINK, ["-lpthread"])
  AC_MSG_RESULT([Sun cc settings])
elif [ test "$DECC" = yes ]; then
  AC_SUBST(OPT_O0, [""])
  AC_SUBST(OPT_O1, [-O1])
  AC_SUBST(OPT_O2, [-O2])
  AC_SUBST(OPT_O3, [-O3])
  AC_SUBST(OPT_g, [-g])
  AC_SUBST(RCLDFLAGS, [""])
  AC_SUBST(RCCCFLAGS, [""])
  AC_SUBST(MKCCFLAGS, ["-g"])
  AC_SUBST(PDCCFLAGS, ["-g3"])
  AC_SUBST(DEPSFLAG, ["-M"])
  AC_SUBST(CPPFILE, ["cc -E -C -x c"])
  AC_SUBST(CCMTLINK, ["-pthread"])
  AC_MSG_RESULT([Compaq/DEC cc settings])
elif [ test "$MACC" = yes ]; then
  AC_SUBST(OPT_O0, [""])
  AC_SUBST(OPT_O1, [-O1])
  AC_SUBST(OPT_O2, [-O2])
  AC_SUBST(OPT_O3, [-O3])
  AC_SUBST(OPT_g, [-g])
  AC_SUBST(RCLDFLAGS, ["-Wl,-multiply_defined,suppress"])
  AC_SUBST(RCCCFLAGS, ["-Wall -no-cpp-precomp -Wno-unused -fno-builtin"])
  AC_SUBST(MKCCFLAGS, ["-g"])
  AC_SUBST(PDCCFLAGS, ["-g"])
  AC_SUBST(DEPSFLAG, ["-M"])
  AC_SUBST(CPPFILE, ["cpp3 -C -traditional-cpp"])
  AC_SUBST(CCMTLINK, [""])
  AC_MSG_RESULT([Apple cc settings])
else
  AC_SUBST(OPT_O0, [""])
  AC_SUBST(OPT_O1, [""])
  AC_SUBST(OPT_O2, [""])
  AC_SUBST(OPT_O3, [""])
  AC_SUBST(OPT_g, [""])
  AC_SUBST(RCLDFLAGS, [""])
  AC_SUBST(RCCCFLAGS, [""])
  AC_SUBST(MKCCFLAGS, [""])
  AC_SUBST(PDCCFLAGS, [""])
  AC_SUBST(DEPSFLAG, ["-M"])
  AC_SUBST(CPPFILE, ["cpp -C"])
  AC_SUBST(CCMTLINK, [""])
  AC_MSG_RESULT([none found])
fi   

dnl append platform specific files
dnl to sac2crc
AC_SUBST_FILE(RCSUN)
AC_SUBST_FILE(RCX86)
AC_SUBST_FILE(RCALPHA)
AC_SUBST_FILE(RCMAC)
RCSUN=$srcdir/src/runtime/sac2crc.SUN
RCX86=$srcdir/src/runtime/sac2crc.X86
RCALPHA=$srcdir/src/runtime/sac2crc.ALPHA
RCMAC=$srcdir/src/runtime/sac2crc.MAC

dnl generate specific flags for known os
OSFLAGS=""
case "$target_os" in
  solaris*)     
     OSFLAGS=["-D__EXTENSIONS__ -D__STDC__=0 -DMUST_INIT_YY"]
    ;;
  *linux*)      
    OSFLAGS=["-D_POSIX_SOURCE -D_SVID_SOURCE -D_BSD_SOURCE -Dlint"]
    ;;
  *osf*)	
    OSFLAGS=["-D_OSF_SOURCE"]
    ;;
  *darwin*)      
    OSFLAGS=["-no-cpp-precomp -Wno-long-double"]
    ;;
esac
AC_SUBST(OSFLAGS)



dnl generate the Makefile.Config out of Makefile.Config.in
AC_OUTPUT()
